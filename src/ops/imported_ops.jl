# Autogenerated on 2017-05-08T16:47:40.843

module Ops
import TensorFlow
const tf = TensorFlow
"""
     avg_pool_grad(orig_input_shape, grad; data_format=NHWC)

Computes gradients of the average pooling function.


"""
tf.@op function avg_pool_grad(v6412, v6413; name=nothing, ksize=nothing, strides=nothing, padding=nothing, data_format=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AvgPoolGrad") 
                    begin  
                        begin  
                            v6412 = convert(TensorFlow.Tensor{Any}, v6412) 
                            begin  
                            end
                        end
                        begin  
                            v6413 = convert(TensorFlow.Tensor{Any}, v6413) 
                            begin  
                            end
                        end
                        begin  
                            (v6413,) = tf.tf_promote(v6413)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6412)
                        end
                        begin  
                            tf.add_input(desc, v6413)
                        end
                    end 
                    begin  
                        begin  
                            if ksize !== nothing 
                                desc["ksize"] = Base.identity.ksize
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "AvgPoolGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reduce_join(inputs, reduction_indices; keep_dims=false, separator=)

Joins a string Tensor across the given dimensions.

Computes the string join across dimensions in the given string Tensor of shape
`[d_0, d_1, ..., d_n-1]`.  Returns a new Tensor created by joining the input
strings with the given separator (default: empty string).  Negative indices are
counted backwards from the end, with `-1` being equivalent to `n - 1`.

For example:

```
# tensor `a` is [["a", "b"], ["c", "d"]]
tf.reduce_join(a, 0) ==> ["ac", "bd"]
tf.reduce_join(a, 1) ==> ["ab", "cd"]
tf.reduce_join(a, -2) = tf.reduce_join(a, 0) ==> ["ac", "bd"]
tf.reduce_join(a, -1) = tf.reduce_join(a, 1) ==> ["ab", "cd"]
tf.reduce_join(a, 0, keep_dims=True) ==> [["ac", "bd"]]
tf.reduce_join(a, 1, keep_dims=True) ==> [["ab"], ["cd"]]
tf.reduce_join(a, 0, separator=".") ==> ["a.c", "b.d"]
tf.reduce_join(a, [0, 1]) ==> ["acbd"]
tf.reduce_join(a, [1, 0]) ==> ["abcd"]
tf.reduce_join(a, []) ==> ["abcd"]
```
"""
tf.@op function reduce_join(v6414, v6415; name=nothing, keep_dims=nothing, separator=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReduceJoin") 
                    begin  
                        begin  
                            v6414 = convert(TensorFlow.Tensor{Any}, v6414) 
                            begin  
                            end
                        end
                        begin  
                            v6415 = convert(TensorFlow.Tensor{Any}, v6415) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6414)
                        end
                        begin  
                            tf.add_input(desc, v6415)
                        end
                    end 
                    begin  
                        begin  
                            if keep_dims !== nothing 
                                desc["keep_dims"] = Base.Bool(keep_dims)
                            end
                        end
                        begin  
                            if separator !== nothing 
                                desc["separator"] = Base.String(separator)
                            end
                        end
                    end
                end), name, "ReduceJoin") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     restore_v2(prefix, tensor_names, shape_and_slices)

Restores tensors from a V2 checkpoint.

For backward compatibility with the V1 format, this Op currently allows
restoring from a V1 checkpoint as well:
  - This Op first attempts to find the V2 index file pointed to by "prefix", and
    if found proceed to read it as a V2 checkpoint;
  - Otherwise the V1 read path is invoked.
Relying on this behavior is not recommended, as the ability to fall back to read
V1 might be deprecated and eventually removed.

By default, restores the named tensors in full.  If the caller wishes to restore
specific slices of stored tensors, "shape_and_slices" should be non-empty
strings and correspondingly well-formed.

Callers must ensure all the named tensors are indeed stored in the checkpoint.
"""
tf.@op function restore_v2(v6416, v6417, v6418; name=nothing, dtypes=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RestoreV2") 
                    begin  
                        begin  
                            v6416 = convert(TensorFlow.Tensor{Any}, v6416) 
                            begin  
                            end
                        end
                        begin  
                            v6417 = convert(TensorFlow.Tensor{Any}, v6417) 
                            begin  
                            end
                        end
                        begin  
                            v6418 = convert(TensorFlow.Tensor{Any}, v6418) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6416)
                        end
                        begin  
                            tf.add_input(desc, v6417)
                        end
                        begin  
                            tf.add_input(desc, v6418)
                        end
                    end 
                    begin  
                        begin  
                            if dtypes !== nothing 
                                desc["dtypes"] = Base.identity.dtypes
                            end
                        end
                    end
                end), name, "RestoreV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     relu_6(features)

Computes rectified linear 6: `min(max(features, 0), 6)`.


"""
tf.@op function relu_6(v6419; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Relu6") 
                    begin  
                        begin  
                            v6419 = convert(TensorFlow.Tensor{Any}, v6419) 
                            begin  
                            end
                        end
                        begin  
                            (v6419,) = tf.tf_promote(v6419)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6419)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Relu6") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_apply_rmsp(var, ms, mom, lr, rho, momentum, epsilon, grad, indices; use_locking=false)

Update '*var' according to the RMSProp algorithm.

Note that in dense implementation of this algorithm, ms and mom will
update even if the grad is zero, but in this sparse implementation, ms
and mom will not update in iterations during which the grad is zero.

mean_square = decay * mean_square + (1-decay) * gradient ** 2
Delta = learning_rate * gradient / sqrt(mean_square + epsilon)

ms <- rho * ms_{t-1} + (1-rho) * grad * grad
mom <- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
var <- var - mom
"""
tf.@op function sparse_apply_rmsp(v6420, v6421, v6422, v6423, v6424, v6425, v6426, v6427, v6428; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseApplyRMSProp") 
                    begin  
                        begin  
                            v6420 = convert(TensorFlow.Tensor{Any}, v6420) 
                            begin  
                            end
                        end
                        begin  
                            v6421 = convert(TensorFlow.Tensor{Any}, v6421) 
                            begin  
                            end
                        end
                        begin  
                            v6422 = convert(TensorFlow.Tensor{Any}, v6422) 
                            begin  
                            end
                        end
                        begin  
                            v6423 = convert(TensorFlow.Tensor{Any}, v6423) 
                            begin  
                            end
                        end
                        begin  
                            v6424 = convert(TensorFlow.Tensor{Any}, v6424) 
                            begin  
                            end
                        end
                        begin  
                            v6425 = convert(TensorFlow.Tensor{Any}, v6425) 
                            begin  
                            end
                        end
                        begin  
                            v6426 = convert(TensorFlow.Tensor{Any}, v6426) 
                            begin  
                            end
                        end
                        begin  
                            v6427 = convert(TensorFlow.Tensor{Any}, v6427) 
                            begin  
                            end
                        end
                        begin  
                            v6428 = convert(TensorFlow.Tensor{Any}, v6428) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6420, v6421, v6422, v6423, v6424, v6425, v6426, v6427) = tf.tf_promote(v6420, v6421, v6422, v6423, v6424, v6425, v6426, v6427)
                        end
                        begin  
                            (v6428,) = tf.tf_promote(v6428)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6420)
                        end
                        begin  
                            tf.add_input(desc, v6421)
                        end
                        begin  
                            tf.add_input(desc, v6422)
                        end
                        begin  
                            tf.add_input(desc, v6423)
                        end
                        begin  
                            tf.add_input(desc, v6424)
                        end
                        begin  
                            tf.add_input(desc, v6425)
                        end
                        begin  
                            tf.add_input(desc, v6426)
                        end
                        begin  
                            tf.add_input(desc, v6427)
                        end
                        begin  
                            tf.add_input(desc, v6428)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "SparseApplyRMSProp") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     recv(; client_terminated=false)

Receives the named tensor from send_device on recv_device.


"""
tf.@op function recv(; name=nothing, tensor_type=nothing, tensor_name=nothing, send_device=nothing, send_device_incarnation=nothing, recv_device=nothing, client_terminated=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("_Recv") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if tensor_type !== nothing 
                                desc["tensor_type"] = Base.identity(tensor_type)
                            end
                        end
                        begin  
                            if tensor_name !== nothing 
                                desc["tensor_name"] = Base.String(tensor_name)
                            end
                        end
                        begin  
                            if send_device !== nothing 
                                desc["send_device"] = Base.String(send_device)
                            end
                        end
                        begin  
                            if send_device_incarnation !== nothing 
                                desc["send_device_incarnation"] = Base.Int(send_device_incarnation)
                            end
                        end
                        begin  
                            if recv_device !== nothing 
                                desc["recv_device"] = Base.String(recv_device)
                            end
                        end
                        begin  
                            if client_terminated !== nothing 
                                desc["client_terminated"] = Base.Bool(client_terminated)
                            end
                        end
                    end
                end), name, "_Recv") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     max_pool(input; T=Float32, data_format=NHWC)

Performs max pooling on the input.


"""
tf.@op function max_pool(v6429; name=nothing, T=nothing, ksize=nothing, strides=nothing, padding=nothing, data_format=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MaxPool") 
                    begin  
                        begin  
                            v6429 = convert(TensorFlow.Tensor{Float32}, v6429) 
                            begin  
                            end
                        end
                        begin  
                            (v6429,) = tf.tf_promote(v6429)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6429)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if ksize !== nothing 
                                desc["ksize"] = Base.identity.ksize
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                    end
                end), name, "MaxPool") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     host_recv(; client_terminated=false)

Receives the named tensor from send_device on recv_device.

_HostRecv requires its input on host memory whereas _Recv requires its
input on device memory.
"""
tf.@op function host_recv(; name=nothing, tensor_type=nothing, tensor_name=nothing, send_device=nothing, send_device_incarnation=nothing, recv_device=nothing, client_terminated=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("_HostRecv") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if tensor_type !== nothing 
                                desc["tensor_type"] = Base.identity(tensor_type)
                            end
                        end
                        begin  
                            if tensor_name !== nothing 
                                desc["tensor_name"] = Base.String(tensor_name)
                            end
                        end
                        begin  
                            if send_device !== nothing 
                                desc["send_device"] = Base.String(send_device)
                            end
                        end
                        begin  
                            if send_device_incarnation !== nothing 
                                desc["send_device_incarnation"] = Base.Int(send_device_incarnation)
                            end
                        end
                        begin  
                            if recv_device !== nothing 
                                desc["recv_device"] = Base.String(recv_device)
                            end
                        end
                        begin  
                            if client_terminated !== nothing 
                                desc["client_terminated"] = Base.Bool(client_terminated)
                            end
                        end
                    end
                end), name, "_HostRecv") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     merge_summary(inputs)

Merges summaries.

This op creates a
[`Summary`](https://www.tensorflow.org/code/tensorflow/core/framework/summary.proto)
protocol buffer that contains the union of all the values in the input
summaries.

When the Op is run, it reports an `InvalidArgument` error if multiple values
in the summaries to merge use the same tag.
"""
tf.@op function merge_summary(v6430; name=nothing, N=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MergeSummary") 
                    begin  
                        begin  
                            v6430 = convert.(TensorFlow.Tensor{Any}, v6430) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6430)
                        end
                    end 
                    begin  
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                    end
                end), name, "MergeSummary") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fake_queue(resource)

Deprecated. Do not use.


"""
tf.@op function fake_queue(v6431; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FakeQueue") 
                    begin  
                        begin  
                            v6431 = convert(TensorFlow.Tensor{Any}, v6431) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6431)
                        end
                    end 
                    begin  
                    end
                end), name, "FakeQueue") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     irfft(input, fft_length)

Compute the inverse 1-dimensional discrete Fourier Transform of a real-valued

signal over the inner-most dimension of `input`.

The inner-most dimension of `input` is assumed to be the result of `RFFT`: the
`fft_length / 2 + 1` unique components of the DFT of a real-valued signal. If
`fft_length` is not provided, it is computed from the size of the inner-most
dimension of `input` (`fft_length = 2 * (inner - 1)`). If the FFT length used to
compute `input` is odd, it should be provided since it cannot be inferred
properly.
"""
tf.@op function irfft(v6432, v6433; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("IRFFT") 
                    begin  
                        begin  
                            v6432 = convert(TensorFlow.Tensor{Any}, v6432) 
                            begin  
                            end
                        end
                        begin  
                            v6433 = convert(TensorFlow.Tensor{Any}, v6433) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6432)
                        end
                        begin  
                            tf.add_input(desc, v6433)
                        end
                    end 
                    begin  
                    end
                end), name, "IRFFT") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_cholesky(input)




"""
tf.@op function batch_cholesky(v6434; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchCholesky") 
                    begin  
                        begin  
                            v6434 = convert(TensorFlow.Tensor{Any}, v6434) 
                            begin  
                            end
                        end
                        begin  
                            (v6434,) = tf.tf_promote(v6434)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6434)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchCholesky") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     bias_add(value, bias; data_format=NHWC)

Adds `bias` to `value`.

This is a special case of `tf.add` where `bias` is restricted to be 1-D.
Broadcasting is supported, so `value` may have any number of dimensions.
"""
tf.@op function bias_add(v6435, v6436; name=nothing, T=nothing, data_format=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BiasAdd") 
                    begin  
                        begin  
                            v6435 = convert(TensorFlow.Tensor{Any}, v6435) 
                            begin  
                            end
                        end
                        begin  
                            v6436 = convert(TensorFlow.Tensor{Any}, v6436) 
                            begin  
                            end
                        end
                        begin  
                            (v6435, v6436) = tf.tf_promote(v6435, v6436)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6435)
                        end
                        begin  
                            tf.add_input(desc, v6436)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                    end
                end), name, "BiasAdd") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     svd(input; compute_uv=true, full_matrices=false)

Computes the singular value decompositions of one or more matrices.

Computes the SVD of each inner matrix in `input` such that
`input[..., :, :] = u[..., :, :] * diag(s[..., :, :]) * transpose(v[..., :, :])`

```prettyprint
# a is a tensor containing a batch of matrices.
# s is a tensor of singular values for each matrix.
# u is the tensor containing of left singular vectors for each matrix.
# v is the tensor containing of right singular vectors for each matrix.
s, u, v = svd(a)
s, _, _ = svd(a, compute_uv=False)
```
"""
tf.@op function svd(v6437; name=nothing, compute_uv=nothing, full_matrices=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Svd") 
                    begin  
                        begin  
                            v6437 = convert(TensorFlow.Tensor{Any}, v6437) 
                            begin  
                            end
                        end
                        begin  
                            (v6437,) = tf.tf_promote(v6437)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6437)
                        end
                    end 
                    begin  
                        begin  
                            if compute_uv !== nothing 
                                desc["compute_uv"] = Base.Bool(compute_uv)
                            end
                        end
                        begin  
                            if full_matrices !== nothing 
                                desc["full_matrices"] = Base.Bool(full_matrices)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Svd") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     parse_tensor(serialized)

Transforms a serialized tensorflow.TensorProto proto into a Tensor.


"""
tf.@op function parse_tensor(v6438; name=nothing, out_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ParseTensor") 
                    begin  
                        begin  
                            v6438 = convert(TensorFlow.Tensor{Any}, v6438) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6438)
                        end
                    end 
                    begin  
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                    end
                end), name, "ParseTensor") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     ref_enter(data; is_constant=false, parallel_iterations=10)

Creates or finds a child frame, and makes `data` available to the child frame.

The unique `frame_name` is used by the `Executor` to identify frames. If
`is_constant` is true, `output` is a constant in the child frame; otherwise
it may be changed in the child frame. At most `parallel_iterations` iterations
are run in parallel in the child frame.
"""
tf.@op function ref_enter(v6439; name=nothing, T=nothing, frame_name=nothing, is_constant=nothing, parallel_iterations=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RefEnter") 
                    begin  
                        begin  
                            v6439 = convert(TensorFlow.Tensor{Any}, v6439) 
                            begin  
                            end
                        end
                        begin  
                            (v6439,) = tf.tf_promote(v6439)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6439)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if frame_name !== nothing 
                                desc["frame_name"] = Base.String(frame_name)
                            end
                        end
                        begin  
                            if is_constant !== nothing 
                                desc["is_constant"] = Base.Bool(is_constant)
                            end
                        end
                        begin  
                            if parallel_iterations !== nothing 
                                desc["parallel_iterations"] = Base.Int(parallel_iterations)
                            end
                        end
                    end
                end), name, "RefEnter") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     erf(x)

Computes the Gauss error function of `x` element-wise.


"""
tf.@op function erf(v6440; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Erf") 
                    begin  
                        begin  
                            v6440 = convert(TensorFlow.Tensor{Any}, v6440) 
                            begin  
                            end
                        end
                        begin  
                            (v6440,) = tf.tf_promote(v6440)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6440)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Erf") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     round(x)

Rounds the values of a tensor to the nearest integer, element-wise.

Rounds half to even.  Also known as bankers rounding. If you want to round
according to the current system rounding mode use std::cint.
"""
tf.@op function round(v6441; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Round") 
                    begin  
                        begin  
                            v6441 = convert(TensorFlow.Tensor{Any}, v6441) 
                            begin  
                            end
                        end
                        begin  
                            (v6441,) = tf.tf_promote(v6441)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6441)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Round") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     diag(diagonal)

Returns a diagonal tensor with a given diagonal values.

Given a `diagonal`, this operation returns a tensor with the `diagonal` and
everything else padded with zeros. The diagonal is computed as follows:

Assume `diagonal` has dimensions [D1,..., Dk], then the output is a tensor of
rank 2k with dimensions [D1,..., Dk, D1,..., Dk] where:

`output[i1,..., ik, i1,..., ik] = diagonal[i1, ..., ik]` and 0 everywhere else.

For example:

```prettyprint
# 'diagonal' is [1, 2, 3, 4]
tf.diag(diagonal) ==> [[1, 0, 0, 0]
                       [0, 2, 0, 0]
                       [0, 0, 3, 0]
                       [0, 0, 0, 4]]
```
"""
tf.@op function diag(v6442; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Diag") 
                    begin  
                        begin  
                            v6442 = convert(TensorFlow.Tensor{Any}, v6442) 
                            begin  
                            end
                        end
                        begin  
                            (v6442,) = tf.tf_promote(v6442)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6442)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Diag") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     merge(inputs)

Forwards the value of an available tensor from `inputs` to `output`.

`Merge` waits for at least one of the tensors in `inputs` to become available.
It is usually combined with `Switch` to implement branching.

`Merge` forwards the first tensor for become available to `output`, and sets
`value_index` to its index in `inputs`.
"""
tf.@op function merge(v6443; name=nothing, T=nothing, N=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Merge") 
                    begin  
                        begin  
                            v6443 = convert.(TensorFlow.Tensor{Any}, v6443) 
                            begin  
                            end
                        end
                        begin  
                            (v6443,) = tf.tf_promote(v6443)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6443)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                    end
                end), name, "Merge") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     quantized_instance_norm(x, x_min, x_max; output_range_given=false, given_y_min=nothing, given_y_max=nothing, variance_epsilon=nothing, min_separation=nothing)

Quantized Instance normalization.


"""
tf.@op function quantized_instance_norm(v6444, v6445, v6446; name=nothing, T=nothing, output_range_given=nothing, given_y_min=nothing, given_y_max=nothing, variance_epsilon=nothing, min_separation=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedInstanceNorm") 
                    begin  
                        begin  
                            v6444 = convert(TensorFlow.Tensor{Any}, v6444) 
                            begin  
                            end
                        end
                        begin  
                            v6445 = convert(TensorFlow.Tensor{Any}, v6445) 
                            begin  
                            end
                        end
                        begin  
                            v6446 = convert(TensorFlow.Tensor{Any}, v6446) 
                            begin  
                            end
                        end
                        begin  
                            (v6444,) = tf.tf_promote(v6444)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6444)
                        end
                        begin  
                            tf.add_input(desc, v6445)
                        end
                        begin  
                            tf.add_input(desc, v6446)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if output_range_given !== nothing 
                                desc["output_range_given"] = Base.Bool(output_range_given)
                            end
                        end
                        begin  
                            if given_y_min !== nothing 
                                desc["given_y_min"] = Base.identity(given_y_min)
                            end
                        end
                        begin  
                            if given_y_max !== nothing 
                                desc["given_y_max"] = Base.identity(given_y_max)
                            end
                        end
                        begin  
                            if variance_epsilon !== nothing 
                                desc["variance_epsilon"] = Base.identity(variance_epsilon)
                            end
                        end
                        begin  
                            if min_separation !== nothing 
                                desc["min_separation"] = Base.identity(min_separation)
                            end
                        end
                    end
                end), name, "QuantizedInstanceNorm") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     random_uniform_int(shape, minval, maxval; seed=0, seed2=0)

Outputs random integers from a uniform distribution.

The generated values are uniform integers in the range `[minval, maxval)`.
The lower bound `minval` is included in the range, while the upper bound
`maxval` is excluded.

The random integers are slightly biased unless `maxval - minval` is an exact
power of two.  The bias is small for values of `maxval - minval` significantly
smaller than the range of the output (either `2^32` or `2^64`).
"""
tf.@op function random_uniform_int(v6447, v6448, v6449; name=nothing, seed=nothing, seed2=nothing, Tout=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RandomUniformInt") 
                    begin  
                        begin  
                            v6447 = convert(TensorFlow.Tensor{Any}, v6447) 
                            begin  
                            end
                        end
                        begin  
                            v6448 = convert(TensorFlow.Tensor{Any}, v6448) 
                            begin  
                            end
                        end
                        begin  
                            v6449 = convert(TensorFlow.Tensor{Any}, v6449) 
                            begin  
                            end
                        end
                        begin  
                            (v6447,) = tf.tf_promote(v6447)
                        end
                        begin  
                            (v6448, v6449) = tf.tf_promote(v6448, v6449)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6447)
                        end
                        begin  
                            tf.add_input(desc, v6448)
                        end
                        begin  
                            tf.add_input(desc, v6449)
                        end
                    end 
                    begin  
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if Tout !== nothing 
                                desc["Tout"] = Base.identity(Tout)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "RandomUniformInt") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_write_v3(handle, index, value, flow_in)

Push an element onto the tensor_array.


"""
tf.@op function tensor_array_write_v3(v6450, v6451, v6452, v6453; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayWriteV3") 
                    begin  
                        begin  
                            v6450 = convert(TensorFlow.Tensor{Any}, v6450) 
                            begin  
                            end
                        end
                        begin  
                            v6451 = convert(TensorFlow.Tensor{Any}, v6451) 
                            begin  
                            end
                        end
                        begin  
                            v6452 = convert(TensorFlow.Tensor{Any}, v6452) 
                            begin  
                            end
                        end
                        begin  
                            v6453 = convert(TensorFlow.Tensor{Any}, v6453) 
                            begin  
                            end
                        end
                        begin  
                            (v6452,) = tf.tf_promote(v6452)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6450)
                        end
                        begin  
                            tf.add_input(desc, v6451)
                        end
                        begin  
                            tf.add_input(desc, v6452)
                        end
                        begin  
                            tf.add_input(desc, v6453)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TensorArrayWriteV3") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     asin(x)

Computes asin of x element-wise.


"""
tf.@op function asin(v6454; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Asin") 
                    begin  
                        begin  
                            v6454 = convert(TensorFlow.Tensor{Any}, v6454) 
                            begin  
                            end
                        end
                        begin  
                            (v6454,) = tf.tf_promote(v6454)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6454)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Asin") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     any(input, reduction_indices; keep_dims=false, Tidx=Int32)

Computes the "logical or" of elements across dimensions of a tensor.

Reduces `input` along the dimensions given in `reduction_indices`. Unless
`keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
`reduction_indices`. If `keep_dims` is true, the reduced dimensions are
retained with length 1.
"""
tf.@op function any(v6455, v6456; name=nothing, keep_dims=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Any") 
                    begin  
                        begin  
                            v6455 = convert(TensorFlow.Tensor{Any}, v6455) 
                            begin  
                            end
                        end
                        begin  
                            v6456 = convert(TensorFlow.Tensor{Int32}, v6456) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6456,) = tf.tf_promote(v6456)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6455)
                        end
                        begin  
                            tf.add_input(desc, v6456)
                        end
                    end 
                    begin  
                        begin  
                            if keep_dims !== nothing 
                                desc["keep_dims"] = Base.Bool(keep_dims)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "Any") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     rsqrt_grad(x, y)

Computes the gradient for the rsqrt of `x` wrt its input.

Specifically, `grad = dy * -0.5 * y^3`, where `y = rsqrt(x)`, and `dy`
is the corresponding input gradient.
"""
tf.@op function rsqrt_grad(v6457, v6458; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RsqrtGrad") 
                    begin  
                        begin  
                            v6457 = convert(TensorFlow.Tensor{Any}, v6457) 
                            begin  
                            end
                        end
                        begin  
                            v6458 = convert(TensorFlow.Tensor{Any}, v6458) 
                            begin  
                            end
                        end
                        begin  
                            (v6457, v6458) = tf.tf_promote(v6457, v6458)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6457)
                        end
                        begin  
                            tf.add_input(desc, v6458)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "RsqrtGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     encode_jpeg(image; format=, quality=95, progressive=false, optimize_size=false, chroma_downsampling=true, density_unit=in, x_density=300, y_density=300, xmp_metadata=)

JPEG-encode an image.

`image` is a 3-D uint8 Tensor of shape `[height, width, channels]`.

The attr `format` can be used to override the color format of the encoded
output.  Values can be:

*   `''`: Use a default format based on the number of channels in the image.
*   `grayscale`: Output a grayscale JPEG image.  The `channels` dimension
    of `image` must be 1.
*   `rgb`: Output an RGB JPEG image. The `channels` dimension
    of `image` must be 3.

If `format` is not specified or is the empty string, a default format is picked
in function of the number of channels in `image`:

*   1: Output a grayscale image.
*   3: Output an RGB image.
"""
tf.@op function encode_jpeg(v6459; name=nothing, format=nothing, quality=nothing, progressive=nothing, optimize_size=nothing, chroma_downsampling=nothing, density_unit=nothing, x_density=nothing, y_density=nothing, xmp_metadata=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("EncodeJpeg") 
                    begin  
                        begin  
                            v6459 = convert(TensorFlow.Tensor{Any}, v6459) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6459)
                        end
                    end 
                    begin  
                        begin  
                            if format !== nothing 
                                desc["format"] = Base.String(format)
                            end
                        end
                        begin  
                            if quality !== nothing 
                                desc["quality"] = Base.Int(quality)
                            end
                        end
                        begin  
                            if progressive !== nothing 
                                desc["progressive"] = Base.Bool(progressive)
                            end
                        end
                        begin  
                            if optimize_size !== nothing 
                                desc["optimize_size"] = Base.Bool(optimize_size)
                            end
                        end
                        begin  
                            if chroma_downsampling !== nothing 
                                desc["chroma_downsampling"] = Base.Bool(chroma_downsampling)
                            end
                        end
                        begin  
                            if density_unit !== nothing 
                                desc["density_unit"] = Base.String(density_unit)
                            end
                        end
                        begin  
                            if x_density !== nothing 
                                desc["x_density"] = Base.Int(x_density)
                            end
                        end
                        begin  
                            if y_density !== nothing 
                                desc["y_density"] = Base.Int(y_density)
                            end
                        end
                        begin  
                            if xmp_metadata !== nothing 
                                desc["xmp_metadata"] = Base.String(xmp_metadata)
                            end
                        end
                    end
                end), name, "EncodeJpeg") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fused_pad_conv_2d(input, paddings, filter)

Performs a padding as a preprocess during a convolution.

Similar to FusedResizeAndPadConv2d, this op allows for an optimized
implementation where the spatial padding transformation stage is fused with the
im2col lookup, but in this case without the bilinear filtering required for
resizing. Fusing the padding prevents the need to write out the intermediate
results as whole tensors, reducing memory pressure, and we can get some latency
gains by merging the transformation calculations.
The data_format attribute for Conv2D isn't supported by this op, and 'NHWC'
order is used instead.
Internally this op uses a single per-graph scratch buffer, which means that it
will block if multiple versions are being run in parallel. This is because this
operator is primarily an optimization to minimize memory usage.
"""
tf.@op function fused_pad_conv_2d(v6460, v6461, v6462; name=nothing, T=nothing, mode=nothing, strides=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FusedPadConv2D") 
                    begin  
                        begin  
                            v6460 = convert(TensorFlow.Tensor{Any}, v6460) 
                            begin  
                            end
                        end
                        begin  
                            v6461 = convert(TensorFlow.Tensor{Any}, v6461) 
                            begin  
                            end
                        end
                        begin  
                            v6462 = convert(TensorFlow.Tensor{Any}, v6462) 
                            begin  
                            end
                        end
                        begin  
                            (v6460, v6462) = tf.tf_promote(v6460, v6462)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6460)
                        end
                        begin  
                            tf.add_input(desc, v6461)
                        end
                        begin  
                            tf.add_input(desc, v6462)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if mode !== nothing 
                                desc["mode"] = Base.String(mode)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "FusedPadConv2D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_scatter(handle, indices, value, flow_in)




"""
tf.@op function tensor_array_scatter(v6463, v6464, v6465, v6466; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayScatter") 
                    begin  
                        begin  
                            v6463 = convert(TensorFlow.Tensor{Any}, v6463) 
                            begin  
                            end
                        end
                        begin  
                            v6464 = convert(TensorFlow.Tensor{Any}, v6464) 
                            begin  
                            end
                        end
                        begin  
                            v6465 = convert(TensorFlow.Tensor{Any}, v6465) 
                            begin  
                            end
                        end
                        begin  
                            v6466 = convert(TensorFlow.Tensor{Any}, v6466) 
                            begin  
                            end
                        end
                        begin  
                            (v6465,) = tf.tf_promote(v6465)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6463)
                        end
                        begin  
                            tf.add_input(desc, v6464)
                        end
                        begin  
                            tf.add_input(desc, v6465)
                        end
                        begin  
                            tf.add_input(desc, v6466)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TensorArrayScatter") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     dynamic_partition(data, partitions)

Partitions `data` into `num_partitions` tensors using indices from `partitions`.

For each index tuple `js` of size `partitions.ndim`, the slice `data[js, ...]`
becomes part of `outputs[partitions[js]]`.  The slices with `partitions[js] = i`
are placed in `outputs[i]` in lexicographic order of `js`, and the first
dimension of `outputs[i]` is the number of entries in `partitions` equal to `i`.
In detail,

```python
    outputs[i].shape = [sum(partitions == i)] + data.shape[partitions.ndim:]

    outputs[i] = pack([data[js, ...] for js if partitions[js] == i])
```

`data.shape` must start with `partitions.shape`.

For example:

```python
    # Scalar partitions.
    partitions = 1
    num_partitions = 2
    data = [10, 20]
    outputs[0] = []  # Empty with shape [0, 2]
    outputs[1] = [[10, 20]]

    # Vector partitions.
    partitions = [0, 0, 1, 1, 0]
    num_partitions = 2
    data = [10, 20, 30, 40, 50]
    outputs[0] = [10, 20, 50]
    outputs[1] = [30, 40]
```

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/DynamicPartition.png" alt>
</div>
"""
tf.@op function dynamic_partition(v6467, v6468; name=nothing, num_partitions=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DynamicPartition") 
                    begin  
                        begin  
                            v6467 = convert(TensorFlow.Tensor{Any}, v6467) 
                            begin  
                            end
                        end
                        begin  
                            v6468 = convert(TensorFlow.Tensor{Any}, v6468) 
                            begin  
                            end
                        end
                        begin  
                            (v6467,) = tf.tf_promote(v6467)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6467)
                        end
                        begin  
                            tf.add_input(desc, v6468)
                        end
                    end 
                    begin  
                        begin  
                            if num_partitions !== nothing 
                                desc["num_partitions"] = Base.Int(num_partitions)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "DynamicPartition") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     add_sparse_to_tensors_map(sparse_indices, sparse_values, sparse_shape; container=, shared_name=)

Add a `SparseTensor` to a `SparseTensorsMap` return its handle.

A `SparseTensor` is represented by three tensors: `sparse_indices`,
`sparse_values`, and `sparse_shape`.

This operator takes the given `SparseTensor` and adds it to a container
object (a `SparseTensorsMap`).  A unique key within this container is generated
in the form of an `int64`, and this is the value that is returned.

The `SparseTensor` can then be read out as part of a minibatch by passing
the key as a vector element to `TakeManySparseFromTensorsMap`.  To ensure
the correct `SparseTensorsMap` is accessed, ensure that the same
`container` and `shared_name` are passed to that Op.  If no `shared_name`
is provided here, instead use the *name* of the Operation created by calling
`AddSparseToTensorsMap` as the `shared_name` passed to
`TakeManySparseFromTensorsMap`.  Ensure the Operations are colocated.
"""
tf.@op function add_sparse_to_tensors_map(v6469, v6470, v6471; name=nothing, T=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AddSparseToTensorsMap") 
                    begin  
                        begin  
                            v6469 = convert(TensorFlow.Tensor{Any}, v6469) 
                            begin  
                            end
                        end
                        begin  
                            v6470 = convert(TensorFlow.Tensor{Any}, v6470) 
                            begin  
                            end
                        end
                        begin  
                            v6471 = convert(TensorFlow.Tensor{Any}, v6471) 
                            begin  
                            end
                        end
                        begin  
                            (v6470,) = tf.tf_promote(v6470)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6469)
                        end
                        begin  
                            tf.add_input(desc, v6470)
                        end
                        begin  
                            tf.add_input(desc, v6471)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "AddSparseToTensorsMap") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     dense_to_dense_set_operation(set1, set2; validate_indices=true)

Applies set operation along last dimension of 2 `Tensor` inputs.

See SetOperationOp::SetOperationFromContext for values of `set_operation`.

Output `result` is a `SparseTensor` represented by `result_indices`,
`result_values`, and `result_shape`. For `set1` and `set2` ranked `n`, this
has rank `n` and the same 1st `n-1` dimensions as `set1` and `set2`. The `nth`
dimension contains the result of `set_operation` applied to the corresponding
`[0...n-1]` dimension of `set`.
"""
tf.@op function dense_to_dense_set_operation(v6472, v6473; name=nothing, set_operation=nothing, validate_indices=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DenseToDenseSetOperation") 
                    begin  
                        begin  
                            v6472 = convert(TensorFlow.Tensor{Any}, v6472) 
                            begin  
                            end
                        end
                        begin  
                            v6473 = convert(TensorFlow.Tensor{Any}, v6473) 
                            begin  
                            end
                        end
                        begin  
                            (v6472, v6473) = tf.tf_promote(v6472, v6473)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6472)
                        end
                        begin  
                            tf.add_input(desc, v6473)
                        end
                    end 
                    begin  
                        begin  
                            if set_operation !== nothing 
                                desc["set_operation"] = Base.String(set_operation)
                            end
                        end
                        begin  
                            if validate_indices !== nothing 
                                desc["validate_indices"] = Base.Bool(validate_indices)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "DenseToDenseSetOperation") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     quantized_relu(features, min_features, max_features; out_type=?)

Computes Quantized Rectified Linear: `max(features, 0)`


"""
tf.@op function quantized_relu(v6474, v6475, v6476; name=nothing, Tinput=nothing, out_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedRelu") 
                    begin  
                        begin  
                            v6474 = convert(TensorFlow.Tensor{Any}, v6474) 
                            begin  
                            end
                        end
                        begin  
                            v6475 = convert(TensorFlow.Tensor{Any}, v6475) 
                            begin  
                            end
                        end
                        begin  
                            v6476 = convert(TensorFlow.Tensor{Any}, v6476) 
                            begin  
                            end
                        end
                        begin  
                            (v6474,) = tf.tf_promote(v6474)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6474)
                        end
                        begin  
                            tf.add_input(desc, v6475)
                        end
                        begin  
                            tf.add_input(desc, v6476)
                        end
                    end 
                    begin  
                        begin  
                            if Tinput !== nothing 
                                desc["Tinput"] = Base.identity(Tinput)
                            end
                        end
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                    end
                end), name, "QuantizedRelu") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     sparse_softmax_cross_entropy_with_logits(features, labels; Tlabels=Int64)

Computes softmax cross entropy cost and gradients to backpropagate.

Unlike `SoftmaxCrossEntropyWithLogits`, this operation does not accept
a matrix of label probabilities, but rather a single label per row
of features.  This label is considered to have probability 1.0 for the
given row.

Inputs are the logits, not probabilities.
"""
tf.@op function sparse_softmax_cross_entropy_with_logits(v6477, v6478; name=nothing, T=nothing, Tlabels=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseSoftmaxCrossEntropyWithLogits") 
                    begin  
                        begin  
                            v6477 = convert(TensorFlow.Tensor{Any}, v6477) 
                            begin  
                            end
                        end
                        begin  
                            v6478 = convert(TensorFlow.Tensor{Int64}, v6478) 
                            begin  
                            end
                        end
                        begin  
                            (v6477,) = tf.tf_promote(v6477)
                        end
                        begin  
                            (v6478,) = tf.tf_promote(v6478)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6477)
                        end
                        begin  
                            tf.add_input(desc, v6478)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tlabels !== nothing 
                                desc["Tlabels"] = Base.identity(Tlabels)
                            end
                        end
                    end
                end), name, "SparseSoftmaxCrossEntropyWithLogits") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     tensor_array_read_v2(handle, index, flow_in)

Deprecated. Use TensorArrayReadV3


"""
tf.@op function tensor_array_read_v2(v6479, v6480, v6481; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayReadV2") 
                    begin  
                        begin  
                            v6479 = convert(TensorFlow.Tensor{Any}, v6479) 
                            begin  
                            end
                        end
                        begin  
                            v6480 = convert(TensorFlow.Tensor{Any}, v6480) 
                            begin  
                            end
                        end
                        begin  
                            v6481 = convert(TensorFlow.Tensor{Any}, v6481) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6479)
                        end
                        begin  
                            tf.add_input(desc, v6480)
                        end
                        begin  
                            tf.add_input(desc, v6481)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "TensorArrayReadV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reader_serialize_state(reader_handle)

Produce a string tensor that encodes the state of a Reader.

Not all Readers support being serialized, so this can produce an
Unimplemented error.
"""
tf.@op function reader_serialize_state(v6482; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderSerializeState") 
                    begin  
                        begin  
                            v6482 = convert(TensorFlow.Tensor{Any}, v6482) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6482)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderSerializeState") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     gather_nd(params, indices)

Gather values or slices from `params` according to `indices`.

`params` is a Tensor of rank `P` and `indices` is a Tensor of rank `Q`.

`indices` must be integer tensor, containing indices into `params`.
It must be shape `[d_0, ..., d_{Q-2}, K]` where `0 < K <= P`.

The innermost dimension of `indices` (with length `K`) corresponds to
indices into elements (if `K = P`) or slices (if `K < P`) along the `K`th
dimension of `params`.

Produces an output tensor with shape

```
[d_0, ..., d_{Q-2}, params.shape[K], ..., params.shape[P-1]].
```

Some examples below.

Simple indexing into a matrix:

```python
    indices = [[0, 0], [1, 1]]
    params = [['a', 'b'], ['c', 'd']]
    output = ['a', 'd']
```

Slice indexing into a matrix:

```python
    indices = [[1], [0]]
    params = [['a', 'b'], ['c', 'd']]
    output = [['c', 'd'], ['a', 'b']]
```

Indexing into a 3-tensor:

```python
    indices = [[1]]
    params = [[['a0', 'b0'], ['c0', 'd0']],
              [['a1', 'b1'], ['c1', 'd1']]]
    output = [[['a1', 'b1'], ['c1', 'd1']]]


    indices = [[0, 1], [1, 0]]
    params = [[['a0', 'b0'], ['c0', 'd0']],
              [['a1', 'b1'], ['c1', 'd1']]]
    output = [['c0', 'd0'], ['a1', 'b1']]


    indices = [[0, 0, 1], [1, 0, 1]]
    params = [[['a0', 'b0'], ['c0', 'd0']],
              [['a1', 'b1'], ['c1', 'd1']]]
    output = ['b0', 'b1']
```

Batched indexing into a matrix:

```python
    indices = [[[0, 0]], [[0, 1]]]
    params = [['a', 'b'], ['c', 'd']]
    output = [['a'], ['b']]
```

Batched slice indexing into a matrix:

```python
    indices = [[[1]], [[0]]]
    params = [['a', 'b'], ['c', 'd']]
    output = [[['c', 'd']], [['a', 'b']]]
```

Batched indexing into a 3-tensor:

```python
    indices = [[[1]], [[0]]]
    params = [[['a0', 'b0'], ['c0', 'd0']],
              [['a1', 'b1'], ['c1', 'd1']]]
    output = [[[['a1', 'b1'], ['c1', 'd1']]],
              [[['a0', 'b0'], ['c0', 'd0']]]]

    indices = [[[0, 1], [1, 0]], [[0, 0], [1, 1]]]
    params = [[['a0', 'b0'], ['c0', 'd0']],
              [['a1', 'b1'], ['c1', 'd1']]]
    output = [[['c0', 'd0'], ['a1', 'b1']],
              [['a0', 'b0'], ['c1', 'd1']]]


    indices = [[[0, 0, 1], [1, 0, 1]], [[0, 1, 1], [1, 1, 0]]]
    params = [[['a0', 'b0'], ['c0', 'd0']],
              [['a1', 'b1'], ['c1', 'd1']]]
    output = [['b0', 'b1'], ['d0', 'c1']]
```
"""
tf.@op function gather_nd(v6483, v6484; name=nothing, Tparams=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("GatherNd") 
                    begin  
                        begin  
                            v6483 = convert(TensorFlow.Tensor{Any}, v6483) 
                            begin  
                            end
                        end
                        begin  
                            v6484 = convert(TensorFlow.Tensor{Any}, v6484) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6483,) = tf.tf_promote(v6483)
                        end
                        begin  
                            (v6484,) = tf.tf_promote(v6484)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6483)
                        end
                        begin  
                            tf.add_input(desc, v6484)
                        end
                    end 
                    begin  
                        begin  
                            if Tparams !== nothing 
                                desc["Tparams"] = Base.identity(Tparams)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "GatherNd") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reader_read_up_to(reader_handle, queue_handle, num_records)

Returns up to `num_records` (key, value) pairs produced by a Reader.

Will dequeue from the input queue if necessary (e.g. when the
Reader needs to start reading from a new file since it has finished
with the previous file).
It may return less than `num_records` even before the last batch.
"""
tf.@op function reader_read_up_to(v6485, v6486, v6487; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderReadUpTo") 
                    begin  
                        begin  
                            v6485 = convert(TensorFlow.Tensor{Any}, v6485) 
                            begin  
                            end
                        end
                        begin  
                            v6486 = convert(TensorFlow.Tensor{Any}, v6486) 
                            begin  
                            end
                        end
                        begin  
                            v6487 = convert(TensorFlow.Tensor{Any}, v6487) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6485)
                        end
                        begin  
                            tf.add_input(desc, v6486)
                        end
                        begin  
                            tf.add_input(desc, v6487)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderReadUpTo") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     avg_pool_3d(input)

Performs 3D average pooling on the input.


"""
tf.@op function avg_pool_3d(v6488; name=nothing, ksize=nothing, strides=nothing, padding=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AvgPool3D") 
                    begin  
                        begin  
                            v6488 = convert(TensorFlow.Tensor{Any}, v6488) 
                            begin  
                            end
                        end
                        begin  
                            (v6488,) = tf.tf_promote(v6488)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6488)
                        end
                    end 
                    begin  
                        begin  
                            if ksize !== nothing 
                                desc["ksize"] = Base.identity.ksize
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "AvgPool3D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     placeholder(; shape=TensorShape[])

A placeholder op for a value that will be fed into the computation.

N.B. This operation will fail with an error if it is executed. It is
intended as a way to represent a value that will always be fed, and to
provide attrs that enable the fed value to be checked at runtime.
"""
tf.@op function placeholder(; name=nothing, dtype=nothing, shape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Placeholder") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if shape !== nothing 
                                desc["shape"] = Base.identity(shape)
                            end
                        end
                    end
                end), name, "Placeholder") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     unsafe_read_variable(resource)

Reads the value of a variable without any memory model.

The tensor returned by this operation aliases a mutable Tensor, and its value
can be observed to be different by different ops.

Internal and private to the tensorflow implementation.
"""
tf.@op function unsafe_read_variable(v6489; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("_UnsafeReadVariable") 
                    begin  
                        begin  
                            v6489 = convert(TensorFlow.Tensor{Any}, v6489) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6489)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "_UnsafeReadVariable") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     rgbt_hsv(images; T=Float32)

Converts one or more images from RGB to HSV.

Outputs a tensor of the same shape as the `images` tensor, containing the HSV
value of the pixels. The output is only well defined if the value in `images`
are in `[0,1]`.

`output[..., 0]` contains hue, `output[..., 1]` contains saturation, and
`output[..., 2]` contains value. All HSV values are in `[0,1]`. A hue of 0
corresponds to pure red, hue 1/3 is pure green, and 2/3 is pure blue.
"""
tf.@op function rgbt_hsv(v6490; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RGBToHSV") 
                    begin  
                        begin  
                            v6490 = convert(TensorFlow.Tensor{Float32}, v6490) 
                            begin  
                            end
                        end
                        begin  
                            (v6490,) = tf.tf_promote(v6490)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6490)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "RGBToHSV") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     encode_png(image; compression=-1, T=UInt8)

PNG-encode an image.

`image` is a 3-D uint8 or uint16 Tensor of shape `[height, width, channels]`
where `channels` is:

*   1: for grayscale.
*   2: for grayscale + alpha.
*   3: for RGB.
*   4: for RGBA.

The ZLIB compression level, `compression`, can be -1 for the PNG-encoder
default or a value from 0 to 9.  9 is the highest compression level, generating
the smallest output, but is slower.
"""
tf.@op function encode_png(v6491; name=nothing, compression=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("EncodePng") 
                    begin  
                        begin  
                            v6491 = convert(TensorFlow.Tensor{UInt8}, v6491) 
                            begin  
                            end
                        end
                        begin  
                            (v6491,) = tf.tf_promote(v6491)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6491)
                        end
                    end 
                    begin  
                        begin  
                            if compression !== nothing 
                                desc["compression"] = Base.Int(compression)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "EncodePng") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     image_summary(tag, tensor; max_images=3, T=Float32, bad_color=?)

Outputs a `Summary` protocol buffer with images.

The summary has up to `max_images` summary values containing images. The
images are built from `tensor` which must be 4-D with shape `[batch_size,
height, width, channels]` and where `channels` can be:

*  1: `tensor` is interpreted as Grayscale.
*  3: `tensor` is interpreted as RGB.
*  4: `tensor` is interpreted as RGBA.

The images have the same number of channels as the input tensor. For float
input, the values are normalized one image at a time to fit in the range
`[0, 255]`.  `uint8` values are unchanged.  The op uses two different
normalization algorithms:

*  If the input values are all positive, they are rescaled so the largest one
   is 255.

*  If any input value is negative, the values are shifted so input value 0.0
   is at 127.  They are then rescaled so that either the smallest value is 0,
   or the largest one is 255.

The `tag` argument is a scalar `Tensor` of type `string`.  It is used to
build the `tag` of the summary values:

*  If `max_images` is 1, the summary value tag is '*tag*/image'.
*  If `max_images` is greater than 1, the summary value tags are
   generated sequentially as '*tag*/image/0', '*tag*/image/1', etc.

The `bad_color` argument is the color to use in the generated images for
non-finite input values.  It is a `unit8` 1-D tensor of length `channels`.
Each element must be in the range `[0, 255]` (It represents the value of a
pixel in the output image).  Non-finite values in the input tensor are
replaced by this tensor in the output image.  The default value is the color
red.
"""
tf.@op function image_summary(v6492, v6493; name=nothing, max_images=nothing, T=nothing, bad_color=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ImageSummary") 
                    begin  
                        begin  
                            v6492 = convert(TensorFlow.Tensor{Any}, v6492) 
                            begin  
                            end
                        end
                        begin  
                            v6493 = convert(TensorFlow.Tensor{Float32}, v6493) 
                            begin  
                            end
                        end
                        begin  
                            (v6493,) = tf.tf_promote(v6493)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6492)
                        end
                        begin  
                            tf.add_input(desc, v6493)
                        end
                    end 
                    begin  
                        begin  
                            if max_images !== nothing 
                                desc["max_images"] = Base.Int(max_images)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if bad_color !== nothing 
                                desc["bad_color"] = TensorFlow.RawTensor(bad_color)
                            end
                        end
                    end
                end), name, "ImageSummary") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     strided_slice_grad(shape, begin, end, strides, dy; begin_mask=0, end_mask=0, ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0)

Returns the gradient of `StridedSlice`.

Since `StridedSlice` cuts out pieces of its `input` which is size
`shape`, its gradient will have the same shape (which is passed here
as `shape`). The gradient will be zero in any element that the slice
does not select.

Arguments are the same as StridedSliceGrad with the exception that
`dy` is the input gradient to be propagated and `shape` is the
shape of `StridedSlice`'s `input`.
"""
tf.@op function strided_slice_grad(v6494, v6495, v6496, v6497, v6498; name=nothing, T=nothing, Index=nothing, begin_mask=nothing, end_mask=nothing, ellipsis_mask=nothing, new_axis_mask=nothing, shrink_axis_mask=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StridedSliceGrad") 
                    begin  
                        begin  
                            v6494 = convert(TensorFlow.Tensor{Any}, v6494) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6495 = convert(TensorFlow.Tensor{Any}, v6495) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6496 = convert(TensorFlow.Tensor{Any}, v6496) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6497 = convert(TensorFlow.Tensor{Any}, v6497) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6498 = convert(TensorFlow.Tensor{Any}, v6498) 
                            begin  
                            end
                        end
                        begin  
                            (v6498,) = tf.tf_promote(v6498)
                        end
                        begin  
                            (v6494, v6495, v6496, v6497) = tf.tf_promote(v6494, v6495, v6496, v6497)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6494)
                        end
                        begin  
                            tf.add_input(desc, v6495)
                        end
                        begin  
                            tf.add_input(desc, v6496)
                        end
                        begin  
                            tf.add_input(desc, v6497)
                        end
                        begin  
                            tf.add_input(desc, v6498)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Index !== nothing 
                                desc["Index"] = Base.identity(Index)
                            end
                        end
                        begin  
                            if begin_mask !== nothing 
                                desc["begin_mask"] = Base.Int(begin_mask)
                            end
                        end
                        begin  
                            if end_mask !== nothing 
                                desc["end_mask"] = Base.Int(end_mask)
                            end
                        end
                        begin  
                            if ellipsis_mask !== nothing 
                                desc["ellipsis_mask"] = Base.Int(ellipsis_mask)
                            end
                        end
                        begin  
                            if new_axis_mask !== nothing 
                                desc["new_axis_mask"] = Base.Int(new_axis_mask)
                            end
                        end
                        begin  
                            if shrink_axis_mask !== nothing 
                                desc["shrink_axis_mask"] = Base.Int(shrink_axis_mask)
                            end
                        end
                    end
                end), name, "StridedSliceGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     string_join(inputs; separator=)

Joins the strings in the given list of string tensors into one tensor;

with the given separator (default is an empty separator).
"""
tf.@op function string_join(v6499; name=nothing, N=nothing, separator=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StringJoin") 
                    begin  
                        begin  
                            v6499 = convert.(TensorFlow.Tensor{Any}, v6499) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6499)
                        end
                    end 
                    begin  
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                        begin  
                            if separator !== nothing 
                                desc["separator"] = Base.String(separator)
                            end
                        end
                    end
                end), name, "StringJoin") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     imag(input; T=Complex{Float32}, Tout=Float32)

Returns the imaginary part of a complex number.

Given a tensor `input` of complex numbers, this operation returns a tensor of
type `float` that is the imaginary part of each element in `input`. All
elements in `input` must be complex numbers of the form \\(a + bj\\), where *a*
is the real part and *b* is the imaginary part returned by this operation.

For example:

```
# tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]
tf.imag(input) ==> [4.75, 5.75]
```
"""
tf.@op function imag(v6500; name=nothing, T=nothing, Tout=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Imag") 
                    begin  
                        begin  
                            v6500 = convert(TensorFlow.Tensor{Complex{Float32}}, v6500) 
                            begin  
                            end
                        end
                        begin  
                            (v6500,) = tf.tf_promote(v6500)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6500)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tout !== nothing 
                                desc["Tout"] = Base.identity(Tout)
                            end
                        end
                    end
                end), name, "Imag") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     concat_offset(concat_dim, shape)

Computes offsets of concat inputs within its output.

For example:

```prettyprint
# 'x' is [2, 2, 7]
# 'y' is [2, 3, 7]
# 'z' is [2, 5, 7]
concat_offset(2, [x, y, z]) => [0, 0, 0], [0, 2, 0], [0, 5, 0]
```
"""
tf.@op function concat_offset(v6501, v6502; name=nothing, N=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ConcatOffset") 
                    begin  
                        begin  
                            v6501 = convert(TensorFlow.Tensor{Any}, v6501) 
                            begin  
                            end
                        end
                        begin  
                            v6502 = convert.(TensorFlow.Tensor{Any}, v6502) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6501)
                        end
                        begin  
                            tf.add_input(desc, v6502)
                        end
                    end 
                    begin  
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                    end
                end), name, "ConcatOffset") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     as_string(input; precision=-1, scientific=false, shortest=false, width=-1, fill=)

Converts each entry in the given tensor to strings.  Supports many numeric

types and boolean.
"""
tf.@op function as_string(v6503; name=nothing, T=nothing, precision=nothing, scientific=nothing, shortest=nothing, width=nothing, fill=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AsString") 
                    begin  
                        begin  
                            v6503 = convert(TensorFlow.Tensor{Any}, v6503) 
                            begin  
                            end
                        end
                        begin  
                            (v6503,) = tf.tf_promote(v6503)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6503)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if precision !== nothing 
                                desc["precision"] = Base.Int(precision)
                            end
                        end
                        begin  
                            if scientific !== nothing 
                                desc["scientific"] = Base.Bool(scientific)
                            end
                        end
                        begin  
                            if shortest !== nothing 
                                desc["shortest"] = Base.Bool(shortest)
                            end
                        end
                        begin  
                            if width !== nothing 
                                desc["width"] = Base.Int(width)
                            end
                        end
                        begin  
                            if fill !== nothing 
                                desc["fill"] = Base.String(fill)
                            end
                        end
                    end
                end), name, "AsString") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     stage(values; container=, shared_name=)

Stage values similar to a lightweight Enqueue.  The basic functionality of this

Op is similar to a queue with many fewer capabilities and options.  This Op is
optimized for performance.
"""
tf.@op function stage(v6504; name=nothing, dtypes=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Stage") 
                    begin  
                        begin  
                            v6504 = convert.(TensorFlow.Tensor{Any}, v6504) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6504)
                        end
                    end 
                    begin  
                        begin  
                            if dtypes !== nothing 
                                desc["dtypes"] = Base.identity.dtypes
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "Stage") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     queue_enqueue_many(handle, components; timeout_ms=-1)

Enqueues zero or more tuples of one or more tensors in the given queue.

This operation slices each component tensor along the 0th dimension to
make multiple queue elements. All of the tuple components must have the
same size in the 0th dimension.

The components input has k elements, which correspond to the components of
tuples stored in the given queue.

N.B. If the queue is full, this operation will block until the given
elements have been enqueued (or 'timeout_ms' elapses, if specified).
"""
tf.@op function queue_enqueue_many(v6505, v6506; name=nothing, Tcomponents=nothing, timeout_ms=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueEnqueueMany") 
                    begin  
                        begin  
                            v6505 = convert(TensorFlow.Tensor{Any}, v6505) 
                            begin  
                            end
                        end
                        begin  
                            v6506 = convert.(TensorFlow.Tensor{Any}, v6506) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6505)
                        end
                        begin  
                            tf.add_input(desc, v6506)
                        end
                    end 
                    begin  
                        begin  
                            if Tcomponents !== nothing 
                                desc["Tcomponents"] = Base.identity.Tcomponents
                            end
                        end
                        begin  
                            if timeout_ms !== nothing 
                                desc["timeout_ms"] = Base.Int(timeout_ms)
                            end
                        end
                    end
                end), name, "QueueEnqueueMany") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     switch(data, pred)

Forwards `data` to the output port determined by `pred`.

If `pred` is true, the `data` input is forwarded to `output_true`. Otherwise,
the data goes to `output_false`.

See also `RefSwitch` and `Merge`.
"""
tf.@op function switch(v6507, v6508; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Switch") 
                    begin  
                        begin  
                            v6507 = convert(TensorFlow.Tensor{Any}, v6507) 
                            begin  
                            end
                        end
                        begin  
                            v6508 = convert(TensorFlow.Tensor{Any}, v6508) 
                            begin  
                            end
                        end
                        begin  
                            (v6507,) = tf.tf_promote(v6507)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6507)
                        end
                        begin  
                            tf.add_input(desc, v6508)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Switch") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     sign(x)

Returns an element-wise indication of the sign of a number.

`y = sign(x) = -1` if `x < 0`; 0 if `x == 0`; 1 if `x > 0`.

For complex numbers, `y = sign(x) = x / |x|` if `x != 0`, otherwise `y = 0`.
"""
tf.@op function sign(v6509; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Sign") 
                    begin  
                        begin  
                            v6509 = convert(TensorFlow.Tensor{Any}, v6509) 
                            begin  
                            end
                        end
                        begin  
                            (v6509,) = tf.tf_promote(v6509)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6509)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Sign") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     neg(x)

Computes numerical negative value element-wise.

I.e., \\(y = -x\\).
"""
tf.@op function neg(v6510; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Neg") 
                    begin  
                        begin  
                            v6510 = convert(TensorFlow.Tensor{Any}, v6510) 
                            begin  
                            end
                        end
                        begin  
                            (v6510,) = tf.tf_promote(v6510)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6510)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Neg") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     queue_dequeue_many_v2(handle, n; timeout_ms=-1)

Dequeues n tuples of one or more tensors from the given queue.

If the queue is closed and there are fewer than n elements, then an
OutOfRange error is returned.

This operation concatenates queue-element component tensors along the
0th dimension to make a single component tensor.  All of the components
in the dequeued tuple will have size n in the 0th dimension.

This operation has k outputs, where k is the number of components in
the tuples stored in the given queue, and output i is the ith
component of the dequeued tuple.

N.B. If the queue is empty, this operation will block until n elements
have been dequeued (or 'timeout_ms' elapses, if specified).
"""
tf.@op function queue_dequeue_many_v2(v6511, v6512; name=nothing, component_types=nothing, timeout_ms=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueDequeueManyV2") 
                    begin  
                        begin  
                            v6511 = convert(TensorFlow.Tensor{Any}, v6511) 
                            begin  
                            end
                        end
                        begin  
                            v6512 = convert(TensorFlow.Tensor{Any}, v6512) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6511)
                        end
                        begin  
                            tf.add_input(desc, v6512)
                        end
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if timeout_ms !== nothing 
                                desc["timeout_ms"] = Base.Int(timeout_ms)
                            end
                        end
                    end
                end), name, "QueueDequeueManyV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     segment_prod(data, segment_ids)

Computes the product along segments of a tensor.

Read [the section on
Segmentation](../../api_docs/python/math_ops.md#segmentation) for an explanation
of segments.

Computes a tensor such that
\\(output_i = \prod_j data_j\\) where the product is over `j` such
that `segment_ids[j] == i`.

If the product is empty for a given segment ID `i`, `output[i] = 1`.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/SegmentProd.png" alt>
</div>
"""
tf.@op function segment_prod(v6513, v6514; name=nothing, T=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SegmentProd") 
                    begin  
                        begin  
                            v6513 = convert(TensorFlow.Tensor{Any}, v6513) 
                            begin  
                            end
                        end
                        begin  
                            v6514 = convert(TensorFlow.Tensor{Any}, v6514) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6513,) = tf.tf_promote(v6513)
                        end
                        begin  
                            (v6514,) = tf.tf_promote(v6514)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6513)
                        end
                        begin  
                            tf.add_input(desc, v6514)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "SegmentProd") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     ifft_3d(input)

Compute the inverse 3-dimensional discrete Fourier Transform over the inner-most

3 dimensions of `input`.
"""
tf.@op function ifft_3d(v6515; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("IFFT3D") 
                    begin  
                        begin  
                            v6515 = convert(TensorFlow.Tensor{Any}, v6515) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6515)
                        end
                    end 
                    begin  
                    end
                end), name, "IFFT3D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_reduce_sum(input_indices, input_values, input_shape, reduction_axes; keep_dims=false)

Computes the sum of elements across dimensions of a SparseTensor.

This Op takes a SparseTensor and is the sparse counterpart to
`tf.reduce_sum()`.  In particular, this Op also returns a dense `Tensor`
instead of a sparse one.

Reduces `sp_input` along the dimensions given in `reduction_axes`.  Unless
`keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
`reduction_axes`. If `keep_dims` is true, the reduced dimensions are retained
with length 1.

If `reduction_axes` has no entries, all dimensions are reduced, and a tensor
with a single element is returned.  Additionally, the axes can be negative,
which are interpreted according to the indexing rules in Python.
"""
tf.@op function sparse_reduce_sum(v6516, v6517, v6518, v6519; name=nothing, keep_dims=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseReduceSum") 
                    begin  
                        begin  
                            v6516 = convert(TensorFlow.Tensor{Any}, v6516) 
                            begin  
                            end
                        end
                        begin  
                            v6517 = convert(TensorFlow.Tensor{Any}, v6517) 
                            begin  
                            end
                        end
                        begin  
                            v6518 = convert(TensorFlow.Tensor{Any}, v6518) 
                            begin  
                            end
                        end
                        begin  
                            v6519 = convert(TensorFlow.Tensor{Any}, v6519) 
                            begin  
                            end
                        end
                        begin  
                            (v6517,) = tf.tf_promote(v6517)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6516)
                        end
                        begin  
                            tf.add_input(desc, v6517)
                        end
                        begin  
                            tf.add_input(desc, v6518)
                        end
                        begin  
                            tf.add_input(desc, v6519)
                        end
                    end 
                    begin  
                        begin  
                            if keep_dims !== nothing 
                                desc["keep_dims"] = Base.Bool(keep_dims)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseReduceSum") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     approximate_equal(x, y; tolerance=nothing)

Returns the truth value of abs(x-y) < tolerance element-wise.


"""
tf.@op function approximate_equal(v6520, v6521; name=nothing, T=nothing, tolerance=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ApproximateEqual") 
                    begin  
                        begin  
                            v6520 = convert(TensorFlow.Tensor{Any}, v6520) 
                            begin  
                            end
                        end
                        begin  
                            v6521 = convert(TensorFlow.Tensor{Any}, v6521) 
                            begin  
                            end
                        end
                        begin  
                            (v6520, v6521) = tf.tf_promote(v6520, v6521)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6520)
                        end
                        begin  
                            tf.add_input(desc, v6521)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if tolerance !== nothing 
                                desc["tolerance"] = Base.identity(tolerance)
                            end
                        end
                    end
                end), name, "ApproximateEqual") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     conv_3d(input, filter)

Computes a 3-D convolution given 5-D `input` and `filter` tensors.

In signal processing, cross-correlation is a measure of similarity of
two waveforms as a function of a time-lag applied to one of them. This
is also known as a sliding dot product or sliding inner-product.

Our Conv3D implements a form of cross-correlation.
"""
tf.@op function conv_3d(v6522, v6523; name=nothing, T=nothing, strides=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Conv3D") 
                    begin  
                        begin  
                            v6522 = convert(TensorFlow.Tensor{Any}, v6522) 
                            begin  
                            end
                        end
                        begin  
                            v6523 = convert(TensorFlow.Tensor{Any}, v6523) 
                            begin  
                            end
                        end
                        begin  
                            (v6522, v6523) = tf.tf_promote(v6522, v6523)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6522)
                        end
                        begin  
                            tf.add_input(desc, v6523)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "Conv3D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     conv_2d(input, filter; use_cudnn_on_gpu=true, data_format=NHWC)

Computes a 2-D convolution given 4-D `input` and `filter` tensors.

Given an input tensor of shape `[batch, in_height, in_width, in_channels]`
and a filter / kernel tensor of shape
`[filter_height, filter_width, in_channels, out_channels]`, this op
performs the following:

1. Flattens the filter to a 2-D matrix with shape
   `[filter_height * filter_width * in_channels, output_channels]`.
2. Extracts image patches from the input tensor to form a *virtual*
   tensor of shape `[batch, out_height, out_width,
   filter_height * filter_width * in_channels]`.
3. For each patch, right-multiplies the filter matrix and the image patch
   vector.

In detail, with the default NHWC format,

    output[b, i, j, k] =
        sum_{di, dj, q} input[b, strides[1] * i + di, strides[2] * j + dj, q] *
                        filter[di, dj, q, k]

Must have `strides[0] = strides[3] = 1`.  For the most common case of the same
horizontal and vertices strides, `strides = [1, stride, stride, 1]`.
"""
tf.@op function conv_2d(v6524, v6525; name=nothing, T=nothing, strides=nothing, use_cudnn_on_gpu=nothing, padding=nothing, data_format=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Conv2D") 
                    begin  
                        begin  
                            v6524 = convert(TensorFlow.Tensor{Any}, v6524) 
                            begin  
                            end
                        end
                        begin  
                            v6525 = convert(TensorFlow.Tensor{Any}, v6525) 
                            begin  
                            end
                        end
                        begin  
                            (v6524, v6525) = tf.tf_promote(v6524, v6525)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6524)
                        end
                        begin  
                            tf.add_input(desc, v6525)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if use_cudnn_on_gpu !== nothing 
                                desc["use_cudnn_on_gpu"] = Base.Bool(use_cudnn_on_gpu)
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                    end
                end), name, "Conv2D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     apply_adagrad(var, accum, lr, grad; use_locking=false)

Update '*var' according to the adagrad scheme.

accum += grad * grad
var -= lr * grad * (1 / sqrt(accum))
"""
tf.@op function apply_adagrad(v6526, v6527, v6528, v6529; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ApplyAdagrad") 
                    begin  
                        begin  
                            v6526 = convert(TensorFlow.Tensor{Any}, v6526) 
                            begin  
                            end
                        end
                        begin  
                            v6527 = convert(TensorFlow.Tensor{Any}, v6527) 
                            begin  
                            end
                        end
                        begin  
                            v6528 = convert(TensorFlow.Tensor{Any}, v6528) 
                            begin  
                            end
                        end
                        begin  
                            v6529 = convert(TensorFlow.Tensor{Any}, v6529) 
                            begin  
                            end
                        end
                        begin  
                            (v6526, v6527, v6528, v6529) = tf.tf_promote(v6526, v6527, v6528, v6529)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6526)
                        end
                        begin  
                            tf.add_input(desc, v6527)
                        end
                        begin  
                            tf.add_input(desc, v6528)
                        end
                        begin  
                            tf.add_input(desc, v6529)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ApplyAdagrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     ref_select(index, inputs)

Forwards the `index`th element of `inputs` to `output`.


"""
tf.@op function ref_select(v6530, v6531; name=nothing, T=nothing, N=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RefSelect") 
                    begin  
                        begin  
                            v6530 = convert(TensorFlow.Tensor{Any}, v6530) 
                            begin  
                            end
                        end
                        begin  
                            v6531 = convert.(TensorFlow.Tensor{Any}, v6531) 
                            begin  
                            end
                        end
                        begin  
                            (v6531,) = tf.tf_promote(v6531)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6530)
                        end
                        begin  
                            tf.add_input(desc, v6531)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                    end
                end), name, "RefSelect") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_mat_mul(a, b; transpose_a=false, transpose_b=false, a_is_sparse=false, b_is_sparse=false, Ta=Float32, Tb=Float32)

Multiply matrix "a" by matrix "b".

The inputs must be two-dimensional matrices and the inner dimension of "a" must
match the outer dimension of "b". This op is optimized for the case where at
least one of "a" or "b" is sparse. The breakeven for using this versus a dense
matrix multiply on one platform was 30% zero values in the sparse matrix.
"""
tf.@op function sparse_mat_mul(v6532, v6533; name=nothing, transpose_a=nothing, transpose_b=nothing, a_is_sparse=nothing, b_is_sparse=nothing, Ta=nothing, Tb=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseMatMul") 
                    begin  
                        begin  
                            v6532 = convert(TensorFlow.Tensor{Float32}, v6532) 
                            begin  
                            end
                        end
                        begin  
                            v6533 = convert(TensorFlow.Tensor{Float32}, v6533) 
                            begin  
                            end
                        end
                        begin  
                            (v6533,) = tf.tf_promote(v6533)
                        end
                        begin  
                            (v6532,) = tf.tf_promote(v6532)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6532)
                        end
                        begin  
                            tf.add_input(desc, v6533)
                        end
                    end 
                    begin  
                        begin  
                            if transpose_a !== nothing 
                                desc["transpose_a"] = Base.Bool(transpose_a)
                            end
                        end
                        begin  
                            if transpose_b !== nothing 
                                desc["transpose_b"] = Base.Bool(transpose_b)
                            end
                        end
                        begin  
                            if a_is_sparse !== nothing 
                                desc["a_is_sparse"] = Base.Bool(a_is_sparse)
                            end
                        end
                        begin  
                            if b_is_sparse !== nothing 
                                desc["b_is_sparse"] = Base.Bool(b_is_sparse)
                            end
                        end
                        begin  
                            if Ta !== nothing 
                                desc["Ta"] = Base.identity(Ta)
                            end
                        end
                        begin  
                            if Tb !== nothing 
                                desc["Tb"] = Base.identity(Tb)
                            end
                        end
                    end
                end), name, "SparseMatMul") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     igammac(a, x)

Compute the upper regularized incomplete Gamma function `Q(a, x)`.

The upper regularized incomplete Gamma function is defined as:

```
Q(a, x) = Gamma(a, x) / Gamma(a) = 1 - P(a, x)
```
where
```
Gamma(a, x) = int_{x}^{\infty} t^{a-1} exp(-t) dt
```
is the upper incomplete Gama function.

Note, above `P(a, x)` (`Igamma`) is the lower regularized complete
Gamma function.
"""
tf.@op function igammac(v6534, v6535; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Igammac") 
                    begin  
                        begin  
                            v6534 = convert(TensorFlow.Tensor{Any}, v6534) 
                            begin  
                            end
                        end
                        begin  
                            v6535 = convert(TensorFlow.Tensor{Any}, v6535) 
                            begin  
                            end
                        end
                        begin  
                            (v6534, v6535) = tf.tf_promote(v6534, v6535)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6534)
                        end
                        begin  
                            tf.add_input(desc, v6535)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Igammac") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_mat_mul(x, y; adj_x=false, adj_y=false)

Multiplies slices of two tensors in batches.

Multiplies all slices of `Tensor` `x` and `y` (each slice can be
viewed as an element of a batch), and arranges the individual results
in a single output tensor of the same batch size. Each of the
individual slices can optionally be adjointed (to adjoint a matrix
means to transpose and conjugate it) before multiplication by setting
the `adj_x` or `adj_y` flag to `True`, which are by default `False`.

The input tensors `x` and `y` are 3-D or higher with shape `[..., r_x, c_x]`
and `[..., r_y, c_y]`.

The output tensor is 3-D or higher with shape `[..., r_o, c_o]`, where:

    r_o = c_x if adj_x else r_x
    c_o = r_y if adj_y else c_y

It is computed as:

    output[..., :, :] = matrix(x[..., :, :]) * matrix(y[..., :, :])
"""
tf.@op function batch_mat_mul(v6536, v6537; name=nothing, T=nothing, adj_x=nothing, adj_y=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchMatMul") 
                    begin  
                        begin  
                            v6536 = convert(TensorFlow.Tensor{Any}, v6536) 
                            begin  
                            end
                        end
                        begin  
                            v6537 = convert(TensorFlow.Tensor{Any}, v6537) 
                            begin  
                            end
                        end
                        begin  
                            (v6536, v6537) = tf.tf_promote(v6536, v6537)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6536)
                        end
                        begin  
                            tf.add_input(desc, v6537)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if adj_x !== nothing 
                                desc["adj_x"] = Base.Bool(adj_x)
                            end
                        end
                        begin  
                            if adj_y !== nothing 
                                desc["adj_y"] = Base.Bool(adj_y)
                            end
                        end
                    end
                end), name, "BatchMatMul") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_ifft_2d(input)




"""
tf.@op function batch_ifft_2d(v6538; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchIFFT2D") 
                    begin  
                        begin  
                            v6538 = convert(TensorFlow.Tensor{Any}, v6538) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6538)
                        end
                    end 
                    begin  
                    end
                end), name, "BatchIFFT2D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     apply_adam(var, m, v, beta1_power, beta2_power, lr, beta1, beta2, epsilon, grad; use_locking=false)

Update '*var' according to the Adam algorithm.

lr_t <- learning_rate * sqrt(1 - beta2^t) / (1 - beta1^t)
m_t <- beta1 * m_{t-1} + (1 - beta1) * g_t
v_t <- beta2 * v_{t-1} + (1 - beta2) * g_t * g_t
variable <- variable - lr_t * m_t / (sqrt(v_t) + epsilon)
"""
tf.@op function apply_adam(v6539, v6540, v6541, v6542, v6543, v6544, v6545, v6546, v6547, v6548; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ApplyAdam") 
                    begin  
                        begin  
                            v6539 = convert(TensorFlow.Tensor{Any}, v6539) 
                            begin  
                            end
                        end
                        begin  
                            v6540 = convert(TensorFlow.Tensor{Any}, v6540) 
                            begin  
                            end
                        end
                        begin  
                            v6541 = convert(TensorFlow.Tensor{Any}, v6541) 
                            begin  
                            end
                        end
                        begin  
                            v6542 = convert(TensorFlow.Tensor{Any}, v6542) 
                            begin  
                            end
                        end
                        begin  
                            v6543 = convert(TensorFlow.Tensor{Any}, v6543) 
                            begin  
                            end
                        end
                        begin  
                            v6544 = convert(TensorFlow.Tensor{Any}, v6544) 
                            begin  
                            end
                        end
                        begin  
                            v6545 = convert(TensorFlow.Tensor{Any}, v6545) 
                            begin  
                            end
                        end
                        begin  
                            v6546 = convert(TensorFlow.Tensor{Any}, v6546) 
                            begin  
                            end
                        end
                        begin  
                            v6547 = convert(TensorFlow.Tensor{Any}, v6547) 
                            begin  
                            end
                        end
                        begin  
                            v6548 = convert(TensorFlow.Tensor{Any}, v6548) 
                            begin  
                            end
                        end
                        begin  
                            (v6539, v6540, v6541, v6542, v6543, v6544, v6545, v6546, v6547, v6548) = tf.tf_promote(v6539, v6540, v6541, v6542, v6543, v6544, v6545, v6546, v6547, v6548)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6539)
                        end
                        begin  
                            tf.add_input(desc, v6540)
                        end
                        begin  
                            tf.add_input(desc, v6541)
                        end
                        begin  
                            tf.add_input(desc, v6542)
                        end
                        begin  
                            tf.add_input(desc, v6543)
                        end
                        begin  
                            tf.add_input(desc, v6544)
                        end
                        begin  
                            tf.add_input(desc, v6545)
                        end
                        begin  
                            tf.add_input(desc, v6546)
                        end
                        begin  
                            tf.add_input(desc, v6547)
                        end
                        begin  
                            tf.add_input(desc, v6548)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ApplyAdam") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     adjust_contrast(images, contrast_factor, min_value, max_value)

Deprecated. Disallowed in GraphDef version >= 2.


"""
tf.@op function adjust_contrast(v6549, v6550, v6551, v6552; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AdjustContrast") 
                    begin  
                        begin  
                            v6549 = convert(TensorFlow.Tensor{Any}, v6549) 
                            begin  
                            end
                        end
                        begin  
                            v6550 = convert(TensorFlow.Tensor{Any}, v6550) 
                            begin  
                            end
                        end
                        begin  
                            v6551 = convert(TensorFlow.Tensor{Any}, v6551) 
                            begin  
                            end
                        end
                        begin  
                            v6552 = convert(TensorFlow.Tensor{Any}, v6552) 
                            begin  
                            end
                        end
                        begin  
                            (v6549,) = tf.tf_promote(v6549)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6549)
                        end
                        begin  
                            tf.add_input(desc, v6550)
                        end
                        begin  
                            tf.add_input(desc, v6551)
                        end
                        begin  
                            tf.add_input(desc, v6552)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "AdjustContrast") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_pack(handle, flow_in; element_shape=TensorShape[unknown])




"""
tf.@op function tensor_array_pack(v6553, v6554; name=nothing, dtype=nothing, element_shape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayPack") 
                    begin  
                        begin  
                            v6553 = convert(TensorFlow.Tensor{Any}, v6553) 
                            begin  
                            end
                        end
                        begin  
                            v6554 = convert(TensorFlow.Tensor{Any}, v6554) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6553)
                        end
                        begin  
                            tf.add_input(desc, v6554)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if element_shape !== nothing 
                                desc["element_shape"] = Base.identity(element_shape)
                            end
                        end
                    end
                end), name, "TensorArrayPack") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reader_restore_state(reader_handle, state)

Restore a reader to a previously saved state.

Not all Readers support being restored, so this can produce an
Unimplemented error.
"""
tf.@op function reader_restore_state(v6555, v6556; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderRestoreState") 
                    begin  
                        begin  
                            v6555 = convert(TensorFlow.Tensor{Any}, v6555) 
                            begin  
                            end
                        end
                        begin  
                            v6556 = convert(TensorFlow.Tensor{Any}, v6556) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6555)
                        end
                        begin  
                            tf.add_input(desc, v6556)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderRestoreState") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     queue_close_v2(handle; cancel_pending_enqueues=false)

Closes the given queue.

This operation signals that no more elements will be enqueued in the
given queue. Subsequent Enqueue(Many) operations will fail.
Subsequent Dequeue(Many) operations will continue to succeed if
sufficient elements remain in the queue. Subsequent Dequeue(Many)
operations that would block will fail immediately.
"""
tf.@op function queue_close_v2(v6557; name=nothing, cancel_pending_enqueues=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueCloseV2") 
                    begin  
                        begin  
                            v6557 = convert(TensorFlow.Tensor{Any}, v6557) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6557)
                        end
                    end 
                    begin  
                        begin  
                            if cancel_pending_enqueues !== nothing 
                                desc["cancel_pending_enqueues"] = Base.Bool(cancel_pending_enqueues)
                            end
                        end
                    end
                end), name, "QueueCloseV2") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     tensor_array_gather(handle, indices, flow_in; element_shape=TensorShape[unknown])




"""
tf.@op function tensor_array_gather(v6558, v6559, v6560; name=nothing, dtype=nothing, element_shape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayGather") 
                    begin  
                        begin  
                            v6558 = convert(TensorFlow.Tensor{Any}, v6558) 
                            begin  
                            end
                        end
                        begin  
                            v6559 = convert(TensorFlow.Tensor{Any}, v6559) 
                            begin  
                            end
                        end
                        begin  
                            v6560 = convert(TensorFlow.Tensor{Any}, v6560) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6558)
                        end
                        begin  
                            tf.add_input(desc, v6559)
                        end
                        begin  
                            tf.add_input(desc, v6560)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if element_shape !== nothing 
                                desc["element_shape"] = Base.identity(element_shape)
                            end
                        end
                    end
                end), name, "TensorArrayGather") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     extract_image_patches(images)

Extract `patches` from `images` and put them in the "depth" output dimension.


"""
tf.@op function extract_image_patches(v6561; name=nothing, ksizes=nothing, strides=nothing, rates=nothing, T=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ExtractImagePatches") 
                    begin  
                        begin  
                            v6561 = convert(TensorFlow.Tensor{Any}, v6561) 
                            begin  
                            end
                        end
                        begin  
                            (v6561,) = tf.tf_promote(v6561)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6561)
                        end
                    end 
                    begin  
                        begin  
                            if ksizes !== nothing 
                                desc["ksizes"] = Base.identity.ksizes
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if rates !== nothing 
                                desc["rates"] = Base.identity.rates
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "ExtractImagePatches") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     variable_v2(; container=, shared_name=)

Holds state in the form of a tensor that persists across steps.

Outputs a ref to the tensor state so it may be read or modified.
TODO(zhifengc/mrry): Adds a pointer to a more detail document
about sharing states in tensorflow.
"""
tf.@op function variable_v2(; name=nothing, shape=nothing, dtype=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("VariableV2") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if shape !== nothing 
                                desc["shape"] = Base.identity(shape)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "VariableV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     elu(features)

Computes exponential linear: `exp(features) - 1` if < 0, `features` otherwise.

See [Fast and Accurate Deep Network Learning by Exponential Linear Units (ELUs)
](http://arxiv.org/abs/1511.07289)
"""
tf.@op function elu(v6562; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Elu") 
                    begin  
                        begin  
                            v6562 = convert(TensorFlow.Tensor{Any}, v6562) 
                            begin  
                            end
                        end
                        begin  
                            (v6562,) = tf.tf_promote(v6562)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6562)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Elu") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     irfft_3d(input, fft_length)

Compute the inverse 3-dimensional discrete Fourier Transform of a real-valued

signal over the inner-most 3 dimensions of `input`.

The inner-most 3 dimensions of `input` are assumed to be the result of `RFFT3D`:
The inner-most dimension contains the `fft_length / 2 + 1` unique components of
the DFT of a real-valued signal. If `fft_length` is not provided, it is computed
from the size of the inner-most 3 dimensions of `input`. If the FFT length used
to compute `input` is odd, it should be provided since it cannot be inferred
properly.
"""
tf.@op function irfft_3d(v6563, v6564; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("IRFFT3D") 
                    begin  
                        begin  
                            v6563 = convert(TensorFlow.Tensor{Any}, v6563) 
                            begin  
                            end
                        end
                        begin  
                            v6564 = convert(TensorFlow.Tensor{Any}, v6564) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6563)
                        end
                        begin  
                            tf.add_input(desc, v6564)
                        end
                    end 
                    begin  
                    end
                end), name, "IRFFT3D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_update(ref, indices, updates; use_locking=true)

Applies sparse updates to a variable reference.

This operation computes

    # Scalar indices
    ref[indices, ...] = updates[...]

    # Vector indices (for each i)
    ref[indices[i], ...] = updates[i, ...]

    # High rank indices (for each i, ..., j)
    ref[indices[i, ..., j], ...] = updates[i, ..., j, ...]

This operation outputs `ref` after the update is done.
This makes it easier to chain operations that need to use the reset value.

If values in `ref` is to be updated more than once, because there are
duplicate entries in `indices`, the order at which the updates happen
for each value is undefined.

Requires `updates.shape = indices.shape + ref.shape[1:]`.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/ScatterUpdate.png" alt>
</div>
"""
tf.@op function scatter_update(v6565, v6566, v6567; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ScatterUpdate") 
                    begin  
                        begin  
                            v6565 = convert(TensorFlow.Tensor{Any}, v6565) 
                            begin  
                            end
                        end
                        begin  
                            v6566 = convert(TensorFlow.Tensor{Any}, v6566) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6567 = convert(TensorFlow.Tensor{Any}, v6567) 
                            begin  
                            end
                        end
                        begin  
                            (v6565, v6567) = tf.tf_promote(v6565, v6567)
                        end
                        begin  
                            (v6566,) = tf.tf_promote(v6566)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6565)
                        end
                        begin  
                            tf.add_input(desc, v6566)
                        end
                        begin  
                            tf.add_input(desc, v6567)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ScatterUpdate") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     apply_proximal_gradient_descent(var, alpha, l1, l2, delta; use_locking=false)

Update '*var' as FOBOS algorithm with fixed learning rate.

prox_v = var - alpha * delta
var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}
"""
tf.@op function apply_proximal_gradient_descent(v6568, v6569, v6570, v6571, v6572; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ApplyProximalGradientDescent") 
                    begin  
                        begin  
                            v6568 = convert(TensorFlow.Tensor{Any}, v6568) 
                            begin  
                            end
                        end
                        begin  
                            v6569 = convert(TensorFlow.Tensor{Any}, v6569) 
                            begin  
                            end
                        end
                        begin  
                            v6570 = convert(TensorFlow.Tensor{Any}, v6570) 
                            begin  
                            end
                        end
                        begin  
                            v6571 = convert(TensorFlow.Tensor{Any}, v6571) 
                            begin  
                            end
                        end
                        begin  
                            v6572 = convert(TensorFlow.Tensor{Any}, v6572) 
                            begin  
                            end
                        end
                        begin  
                            (v6568, v6569, v6570, v6571, v6572) = tf.tf_promote(v6568, v6569, v6570, v6571, v6572)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6568)
                        end
                        begin  
                            tf.add_input(desc, v6569)
                        end
                        begin  
                            tf.add_input(desc, v6570)
                        end
                        begin  
                            tf.add_input(desc, v6571)
                        end
                        begin  
                            tf.add_input(desc, v6572)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ApplyProximalGradientDescent") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     floor_mod(x, y)

Returns element-wise remainder of division. When `x < 0` xor `y < 0` is

true, this follows Python semantics in that the result here is consistent
with a flooring divide. E.g. `floor(x / y) * y + mod(x, y) = x`.

*NOTE*: `FloorMod` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function floor_mod(v6573, v6574; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FloorMod") 
                    begin  
                        begin  
                            v6573 = convert(TensorFlow.Tensor{Any}, v6573) 
                            begin  
                            end
                        end
                        begin  
                            v6574 = convert(TensorFlow.Tensor{Any}, v6574) 
                            begin  
                            end
                        end
                        begin  
                            (v6573, v6574) = tf.tf_promote(v6573, v6574)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6573)
                        end
                        begin  
                            tf.add_input(desc, v6574)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "FloorMod") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     is_nan(x)

Returns which elements of x are NaN.

@compatibility(numpy)
Equivalent to np.isnan
@end_compatibility
"""
tf.@op function is_nan(v6575; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("IsNan") 
                    begin  
                        begin  
                            v6575 = convert(TensorFlow.Tensor{Any}, v6575) 
                            begin  
                            end
                        end
                        begin  
                            (v6575,) = tf.tf_promote(v6575)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6575)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "IsNan") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     compute_accidental_hits(true_classes, sampled_candidates; seed=0, seed2=0)

Computes the ids of the positions in sampled_candidates that match true_labels.

When doing log-odds NCE, the result of this op should be passed through a
SparseToDense op, then added to the logits of the sampled candidates. This has
the effect of 'removing' the sampled labels that match the true labels by
making the classifier sure that they are sampled labels.
"""
tf.@op function compute_accidental_hits(v6576, v6577; name=nothing, num_true=nothing, seed=nothing, seed2=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ComputeAccidentalHits") 
                    begin  
                        begin  
                            v6576 = convert(TensorFlow.Tensor{Any}, v6576) 
                            begin  
                            end
                        end
                        begin  
                            v6577 = convert(TensorFlow.Tensor{Any}, v6577) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6576)
                        end
                        begin  
                            tf.add_input(desc, v6577)
                        end
                    end 
                    begin  
                        begin  
                            if num_true !== nothing 
                                desc["num_true"] = Base.Int(num_true)
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                    end
                end), name, "ComputeAccidentalHits") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     string_to_number(string_tensor; out_type=Float32)

Converts each string in the input Tensor to the specified numeric type.

(Note that int32 overflow results in an error while float overflow
results in a rounded value.)
"""
tf.@op function string_to_number(v6578; name=nothing, out_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StringToNumber") 
                    begin  
                        begin  
                            v6578 = convert(TensorFlow.Tensor{Any}, v6578) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6578)
                        end
                    end 
                    begin  
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                    end
                end), name, "StringToNumber") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     mutable_hash_table_of_tensors(; container=, shared_name=, use_node_name_sharing=false, value_shape=TensorShape[])

Creates an empty hash table.

This op creates a mutable hash table, specifying the type of its keys and
values. Each value must be a vector. Data can be inserted into the table using
the insert operations. It does not support the initialization operation.
"""
tf.@op function mutable_hash_table_of_tensors(; name=nothing, container=nothing, shared_name=nothing, use_node_name_sharing=nothing, key_dtype=nothing, value_dtype=nothing, value_shape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MutableHashTableOfTensors") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                        begin  
                            if use_node_name_sharing !== nothing 
                                desc["use_node_name_sharing"] = Base.Bool(use_node_name_sharing)
                            end
                        end
                        begin  
                            if key_dtype !== nothing 
                                desc["key_dtype"] = Base.identity(key_dtype)
                            end
                        end
                        begin  
                            if value_dtype !== nothing 
                                desc["value_dtype"] = Base.identity(value_dtype)
                            end
                        end
                        begin  
                            if value_shape !== nothing 
                                desc["value_shape"] = Base.identity(value_shape)
                            end
                        end
                    end
                end), name, "MutableHashTableOfTensors") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     read_file(filename)

Reads and outputs the entire contents of the input filename.


"""
tf.@op function read_file(v6579; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReadFile") 
                    begin  
                        begin  
                            v6579 = convert(TensorFlow.Tensor{Any}, v6579) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6579)
                        end
                    end 
                    begin  
                    end
                end), name, "ReadFile") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     apply_centered_rmsp(var, mg, ms, mom, lr, rho, momentum, epsilon, grad; use_locking=false)

Update '*var' according to the centered RMSProp algorithm.

The centered RMSProp algorithm uses an estimate of the centered second moment
(i.e., the variance) for normalization, as opposed to regular RMSProp, which
uses the (uncentered) second moment. This often helps with training, but is
slightly more expensive in terms of computation and memory.

Note that in dense implementation of this algorithm, mg, ms, and mom will
update even if the grad is zero, but in this sparse implementation, mg, ms,
and mom will not update in iterations during which the grad is zero.

mean_square = decay * mean_square + (1-decay) * gradient ** 2
mean_grad = decay * mean_grad + (1-decay) * gradient

Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)

mg <- rho * mg_{t-1} + (1-rho) * grad
ms <- rho * ms_{t-1} + (1-rho) * grad * grad
mom <- momentum * mom_{t-1} + lr * grad / sqrt(ms - mg * mg + epsilon)
var <- var - mom
"""
tf.@op function apply_centered_rmsp(v6580, v6581, v6582, v6583, v6584, v6585, v6586, v6587, v6588; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ApplyCenteredRMSProp") 
                    begin  
                        begin  
                            v6580 = convert(TensorFlow.Tensor{Any}, v6580) 
                            begin  
                            end
                        end
                        begin  
                            v6581 = convert(TensorFlow.Tensor{Any}, v6581) 
                            begin  
                            end
                        end
                        begin  
                            v6582 = convert(TensorFlow.Tensor{Any}, v6582) 
                            begin  
                            end
                        end
                        begin  
                            v6583 = convert(TensorFlow.Tensor{Any}, v6583) 
                            begin  
                            end
                        end
                        begin  
                            v6584 = convert(TensorFlow.Tensor{Any}, v6584) 
                            begin  
                            end
                        end
                        begin  
                            v6585 = convert(TensorFlow.Tensor{Any}, v6585) 
                            begin  
                            end
                        end
                        begin  
                            v6586 = convert(TensorFlow.Tensor{Any}, v6586) 
                            begin  
                            end
                        end
                        begin  
                            v6587 = convert(TensorFlow.Tensor{Any}, v6587) 
                            begin  
                            end
                        end
                        begin  
                            v6588 = convert(TensorFlow.Tensor{Any}, v6588) 
                            begin  
                            end
                        end
                        begin  
                            (v6580, v6581, v6582, v6583, v6584, v6585, v6586, v6587, v6588) = tf.tf_promote(v6580, v6581, v6582, v6583, v6584, v6585, v6586, v6587, v6588)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6580)
                        end
                        begin  
                            tf.add_input(desc, v6581)
                        end
                        begin  
                            tf.add_input(desc, v6582)
                        end
                        begin  
                            tf.add_input(desc, v6583)
                        end
                        begin  
                            tf.add_input(desc, v6584)
                        end
                        begin  
                            tf.add_input(desc, v6585)
                        end
                        begin  
                            tf.add_input(desc, v6586)
                        end
                        begin  
                            tf.add_input(desc, v6587)
                        end
                        begin  
                            tf.add_input(desc, v6588)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ApplyCenteredRMSProp") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     conv_3d_backprop_filter_v2(input, filter_sizes, out_backprop)

Computes the gradients of 3-D convolution with respect to the filter.


"""
tf.@op function conv_3d_backprop_filter_v2(v6589, v6590, v6591; name=nothing, T=nothing, strides=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Conv3DBackpropFilterV2") 
                    begin  
                        begin  
                            v6589 = convert(TensorFlow.Tensor{Any}, v6589) 
                            begin  
                            end
                        end
                        begin  
                            v6590 = convert(TensorFlow.Tensor{Any}, v6590) 
                            begin  
                            end
                        end
                        begin  
                            v6591 = convert(TensorFlow.Tensor{Any}, v6591) 
                            begin  
                            end
                        end
                        begin  
                            (v6589, v6591) = tf.tf_promote(v6589, v6591)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6589)
                        end
                        begin  
                            tf.add_input(desc, v6590)
                        end
                        begin  
                            tf.add_input(desc, v6591)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "Conv3DBackpropFilterV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     learned_unigram_candidate_sampler(true_classes; seed=0, seed2=0)

Generates labels for candidate sampling with a learned unigram distribution.

See explanations of candidate sampling and the data formats at
go/candidate-sampling.

For each batch, this op picks a single set of sampled candidate labels.

The advantages of sampling candidates per-batch are simplicity and the
possibility of efficient dense matrix multiplication. The disadvantage is that
the sampled candidates must be chosen independently of the context and of the
true labels.
"""
tf.@op function learned_unigram_candidate_sampler(v6592; name=nothing, num_true=nothing, num_sampled=nothing, unique=nothing, range_max=nothing, seed=nothing, seed2=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LearnedUnigramCandidateSampler") 
                    begin  
                        begin  
                            v6592 = convert(TensorFlow.Tensor{Any}, v6592) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6592)
                        end
                    end 
                    begin  
                        begin  
                            if num_true !== nothing 
                                desc["num_true"] = Base.Int(num_true)
                            end
                        end
                        begin  
                            if num_sampled !== nothing 
                                desc["num_sampled"] = Base.Int(num_sampled)
                            end
                        end
                        begin  
                            if unique !== nothing 
                                desc["unique"] = Base.Bool(unique)
                            end
                        end
                        begin  
                            if range_max !== nothing 
                                desc["range_max"] = Base.Int(range_max)
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                    end
                end), name, "LearnedUnigramCandidateSampler") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     arg()

A graph node which represents an argument to a function.


"""
tf.@op function arg(; name=nothing, T=nothing, index=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("_Arg") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if index !== nothing 
                                desc["index"] = Base.Int(index)
                            end
                        end
                    end
                end), name, "_Arg") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_triangular_solve(matrix, rhs; lower=true, adjoint=false)

Solves systems of linear equations with upper or lower triangular matrices by

backsubstitution.

`matrix` is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions form
square matrices. If `lower` is `True` then the strictly upper triangular part
of each inner-most matrix is assumed to be zero and not accessed.
If `lower` is False then the strictly lower triangular part of each inner-most
matrix is assumed to be zero and not accessed.
`rhs` is a tensor of shape `[..., M, K]`.

The output is a tensor of shape `[..., M, K]`. If `adjoint` is
`True` then the innermost matrices in output` satisfy matrix equations
`matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]`.
If `adjoint` is `False` then the strictly then the  innermost matrices in
`output` satisfy matrix equations
`adjoint(matrix[..., i, k]) * output[..., k, j] = rhs[..., i, j]`.
"""
tf.@op function matrix_triangular_solve(v6593, v6594; name=nothing, lower=nothing, adjoint=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MatrixTriangularSolve") 
                    begin  
                        begin  
                            v6593 = convert(TensorFlow.Tensor{Any}, v6593) 
                            begin  
                            end
                        end
                        begin  
                            v6594 = convert(TensorFlow.Tensor{Any}, v6594) 
                            begin  
                            end
                        end
                        begin  
                            (v6593, v6594) = tf.tf_promote(v6593, v6594)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6593)
                        end
                        begin  
                            tf.add_input(desc, v6594)
                        end
                    end 
                    begin  
                        begin  
                            if lower !== nothing 
                                desc["lower"] = Base.Bool(lower)
                            end
                        end
                        begin  
                            if adjoint !== nothing 
                                desc["adjoint"] = Base.Bool(adjoint)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MatrixTriangularSolve") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fractional_avg_pool_grad(orig_input_tensor_shape, out_backprop, row_pooling_sequence, col_pooling_sequence; overlapping=false)

Computes gradient of the FractionalAvgPool function.

Unlike FractionalMaxPoolGrad, we don't need to find arg_max for
FractionalAvgPoolGrad, we just need to evenly back-propagate each element of
out_backprop to those indices that form the same pooling cell. Therefore, we
just need to know the shape of original input tensor, instead of the whole
tensor.
"""
tf.@op function fractional_avg_pool_grad(v6595, v6596, v6597, v6598; name=nothing, overlapping=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FractionalAvgPoolGrad") 
                    begin  
                        begin  
                            v6595 = convert(TensorFlow.Tensor{Any}, v6595) 
                            begin  
                            end
                        end
                        begin  
                            v6596 = convert(TensorFlow.Tensor{Any}, v6596) 
                            begin  
                            end
                        end
                        begin  
                            v6597 = convert(TensorFlow.Tensor{Any}, v6597) 
                            begin  
                            end
                        end
                        begin  
                            v6598 = convert(TensorFlow.Tensor{Any}, v6598) 
                            begin  
                            end
                        end
                        begin  
                            (v6596,) = tf.tf_promote(v6596)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6595)
                        end
                        begin  
                            tf.add_input(desc, v6596)
                        end
                        begin  
                            tf.add_input(desc, v6597)
                        end
                        begin  
                            tf.add_input(desc, v6598)
                        end
                    end 
                    begin  
                        begin  
                            if overlapping !== nothing 
                                desc["overlapping"] = Base.Bool(overlapping)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "FractionalAvgPoolGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reader_num_work_units_completed(reader_handle)

Returns the number of work units this Reader has finished processing.


"""
tf.@op function reader_num_work_units_completed(v6599; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderNumWorkUnitsCompleted") 
                    begin  
                        begin  
                            v6599 = convert(TensorFlow.Tensor{Any}, v6599) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6599)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderNumWorkUnitsCompleted") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     atan(x)

Computes atan of x element-wise.


"""
tf.@op function atan(v6600; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Atan") 
                    begin  
                        begin  
                            v6600 = convert(TensorFlow.Tensor{Any}, v6600) 
                            begin  
                            end
                        end
                        begin  
                            (v6600,) = tf.tf_promote(v6600)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6600)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Atan") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     bincount(arr, size, weights)

Counts the number of occurrences of each value in an integer array.

Outputs a vector with length `size` and the same dtype as `weights`. If
`weights` are empty, then index `i` stores the number of times the value `i` is
counted in `arr`. If `weights` are non-empty, then index `i` stores the sum of
the value in `weights` at each index where the corresponding value in `arr` is
`i`.

Values in `arr` outside of the range [0, size) are ignored.
"""
tf.@op function bincount(v6601, v6602, v6603; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Bincount") 
                    begin  
                        begin  
                            v6601 = convert(TensorFlow.Tensor{Any}, v6601) 
                            begin  
                            end
                        end
                        begin  
                            v6602 = convert(TensorFlow.Tensor{Any}, v6602) 
                            begin  
                            end
                        end
                        begin  
                            v6603 = convert(TensorFlow.Tensor{Any}, v6603) 
                            begin  
                            end
                        end
                        begin  
                            (v6603,) = tf.tf_promote(v6603)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6601)
                        end
                        begin  
                            tf.add_input(desc, v6602)
                        end
                        begin  
                            tf.add_input(desc, v6603)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Bincount") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     mat_mul(a, b; transpose_a=false, transpose_b=false)

Multiply the matrix "a" by the matrix "b".

The inputs must be two-dimensional matrices and the inner dimension of
"a" (after being transposed if transpose_a is true) must match the
outer dimension of "b" (after being transposed if transposed_b is
true).

*Note*: The default kernel implementation for MatMul on GPUs uses
cublas.
"""
tf.@op function mat_mul(v6604, v6605; name=nothing, transpose_a=nothing, transpose_b=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MatMul") 
                    begin  
                        begin  
                            v6604 = convert(TensorFlow.Tensor{Any}, v6604) 
                            begin  
                            end
                        end
                        begin  
                            v6605 = convert(TensorFlow.Tensor{Any}, v6605) 
                            begin  
                            end
                        end
                        begin  
                            (v6604, v6605) = tf.tf_promote(v6604, v6605)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6604)
                        end
                        begin  
                            tf.add_input(desc, v6605)
                        end
                    end 
                    begin  
                        begin  
                            if transpose_a !== nothing 
                                desc["transpose_a"] = Base.Bool(transpose_a)
                            end
                        end
                        begin  
                            if transpose_b !== nothing 
                                desc["transpose_b"] = Base.Bool(transpose_b)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MatMul") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     inv(x)

Computes the reciprocal of x element-wise.

I.e., \\(y = 1 / x\\).
"""
tf.@op function inv(v6606; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Inv") 
                    begin  
                        begin  
                            v6606 = convert(TensorFlow.Tensor{Any}, v6606) 
                            begin  
                            end
                        end
                        begin  
                            (v6606,) = tf.tf_promote(v6606)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6606)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Inv") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     apply_proximal_adagrad(var, accum, lr, l1, l2, grad; use_locking=false)

Update '*var' and '*accum' according to FOBOS with Adagrad learning rate.

accum += grad * grad
prox_v = var - lr * grad * (1 / sqrt(accum))
var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}
"""
tf.@op function apply_proximal_adagrad(v6607, v6608, v6609, v6610, v6611, v6612; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ApplyProximalAdagrad") 
                    begin  
                        begin  
                            v6607 = convert(TensorFlow.Tensor{Any}, v6607) 
                            begin  
                            end
                        end
                        begin  
                            v6608 = convert(TensorFlow.Tensor{Any}, v6608) 
                            begin  
                            end
                        end
                        begin  
                            v6609 = convert(TensorFlow.Tensor{Any}, v6609) 
                            begin  
                            end
                        end
                        begin  
                            v6610 = convert(TensorFlow.Tensor{Any}, v6610) 
                            begin  
                            end
                        end
                        begin  
                            v6611 = convert(TensorFlow.Tensor{Any}, v6611) 
                            begin  
                            end
                        end
                        begin  
                            v6612 = convert(TensorFlow.Tensor{Any}, v6612) 
                            begin  
                            end
                        end
                        begin  
                            (v6607, v6608, v6609, v6610, v6611, v6612) = tf.tf_promote(v6607, v6608, v6609, v6610, v6611, v6612)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6607)
                        end
                        begin  
                            tf.add_input(desc, v6608)
                        end
                        begin  
                            tf.add_input(desc, v6609)
                        end
                        begin  
                            tf.add_input(desc, v6610)
                        end
                        begin  
                            tf.add_input(desc, v6611)
                        end
                        begin  
                            tf.add_input(desc, v6612)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ApplyProximalAdagrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     erfc(x)

Computes the complementary error function of `x` element-wise.


"""
tf.@op function erfc(v6613; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Erfc") 
                    begin  
                        begin  
                            v6613 = convert(TensorFlow.Tensor{Any}, v6613) 
                            begin  
                            end
                        end
                        begin  
                            (v6613,) = tf.tf_promote(v6613)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6613)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Erfc") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sigmoid_grad(x, y)

Computes the gradient of the sigmoid of `x` wrt its input.

Specifically, `grad = dy * y * (1 - y)`, where `y = sigmoid(x)`, and
`dy` is the corresponding input gradient.
"""
tf.@op function sigmoid_grad(v6614, v6615; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SigmoidGrad") 
                    begin  
                        begin  
                            v6614 = convert(TensorFlow.Tensor{Any}, v6614) 
                            begin  
                            end
                        end
                        begin  
                            v6615 = convert(TensorFlow.Tensor{Any}, v6615) 
                            begin  
                            end
                        end
                        begin  
                            (v6614, v6615) = tf.tf_promote(v6614, v6615)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6614)
                        end
                        begin  
                            tf.add_input(desc, v6615)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SigmoidGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_dense_cwise_mul(sp_indices, sp_values, sp_shape, dense)

Component-wise multiplies a SparseTensor by a dense Tensor.

The output locations corresponding to the implicitly zero elements in the sparse
tensor will be zero (i.e., will not take up storage space), regardless of the
contents of the dense tensor (even if it's +/-INF and that INF*0 == NaN).

*Limitation*: this Op only broadcasts the dense side to the sparse side, but not
the other direction.
"""
tf.@op function sparse_dense_cwise_mul(v6616, v6617, v6618, v6619; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseDenseCwiseMul") 
                    begin  
                        begin  
                            v6616 = convert(TensorFlow.Tensor{Any}, v6616) 
                            begin  
                            end
                        end
                        begin  
                            v6617 = convert(TensorFlow.Tensor{Any}, v6617) 
                            begin  
                            end
                        end
                        begin  
                            v6618 = convert(TensorFlow.Tensor{Any}, v6618) 
                            begin  
                            end
                        end
                        begin  
                            v6619 = convert(TensorFlow.Tensor{Any}, v6619) 
                            begin  
                            end
                        end
                        begin  
                            (v6617, v6619) = tf.tf_promote(v6617, v6619)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6616)
                        end
                        begin  
                            tf.add_input(desc, v6617)
                        end
                        begin  
                            tf.add_input(desc, v6618)
                        end
                        begin  
                            tf.add_input(desc, v6619)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseDenseCwiseMul") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fixed_length_record_reader_v2(; header_bytes=0, footer_bytes=0, container=, shared_name=)

A Reader that outputs fixed-length records from a file.


"""
tf.@op function fixed_length_record_reader_v2(; name=nothing, header_bytes=nothing, record_bytes=nothing, footer_bytes=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FixedLengthRecordReaderV2") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if header_bytes !== nothing 
                                desc["header_bytes"] = Base.Int(header_bytes)
                            end
                        end
                        begin  
                            if record_bytes !== nothing 
                                desc["record_bytes"] = Base.Int(record_bytes)
                            end
                        end
                        begin  
                            if footer_bytes !== nothing 
                                desc["footer_bytes"] = Base.Int(footer_bytes)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "FixedLengthRecordReaderV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sharded_filespec(basename, num_shards)

Generate a glob pattern matching all sharded file names.


"""
tf.@op function sharded_filespec(v6620, v6621; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ShardedFilespec") 
                    begin  
                        begin  
                            v6620 = convert(TensorFlow.Tensor{Any}, v6620) 
                            begin  
                            end
                        end
                        begin  
                            v6621 = convert(TensorFlow.Tensor{Any}, v6621) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6620)
                        end
                        begin  
                            tf.add_input(desc, v6621)
                        end
                    end 
                    begin  
                    end
                end), name, "ShardedFilespec") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_concat_v3(handle, flow_in; element_shape_except0=TensorShape[unknown])

Concat the elements from the TensorArray into value `value`.

Takes `T` elements of shapes

  ```
  (n0 x d0 x d1 x ...), (n1 x d0 x d1 x ...), ..., (n(T-1) x d0 x d1 x ...)
  ```

and concatenates them into a Tensor of shape:

  ```(n0 + n1 + ... + n(T-1) x d0 x d1 x ...)```

All elements must have the same shape (excepting the first dimension).
"""
tf.@op function tensor_array_concat_v3(v6622, v6623; name=nothing, dtype=nothing, element_shape_except0=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayConcatV3") 
                    begin  
                        begin  
                            v6622 = convert(TensorFlow.Tensor{Any}, v6622) 
                            begin  
                            end
                        end
                        begin  
                            v6623 = convert(TensorFlow.Tensor{Any}, v6623) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6622)
                        end
                        begin  
                            tf.add_input(desc, v6623)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if element_shape_except0 !== nothing 
                                desc["element_shape_except0"] = Base.identity(element_shape_except0)
                            end
                        end
                    end
                end), name, "TensorArrayConcatV3") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     write_file(filename, contents)

Writes contents to the file at input filename. Creates file if not existing.


"""
tf.@op function write_file(v6624, v6625; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("WriteFile") 
                    begin  
                        begin  
                            v6624 = convert(TensorFlow.Tensor{Any}, v6624) 
                            begin  
                            end
                        end
                        begin  
                            v6625 = convert(TensorFlow.Tensor{Any}, v6625) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6624)
                        end
                        begin  
                            tf.add_input(desc, v6625)
                        end
                    end 
                    begin  
                    end
                end), name, "WriteFile") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     sparse_accumulator_apply_gradient(handle, local_step, gradient_indices, gradient_values, gradient_shape)

Applies a sparse gradient to a given accumulator. Does not add if local_step is

lesser than the accumulator's global_step.
"""
tf.@op function sparse_accumulator_apply_gradient(v6626, v6627, v6628, v6629, v6630; name=nothing, dtype=nothing, has_known_shape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseAccumulatorApplyGradient") 
                    begin  
                        begin  
                            v6626 = convert(TensorFlow.Tensor{Any}, v6626) 
                            begin  
                            end
                        end
                        begin  
                            v6627 = convert(TensorFlow.Tensor{Any}, v6627) 
                            begin  
                            end
                        end
                        begin  
                            v6628 = convert(TensorFlow.Tensor{Any}, v6628) 
                            begin  
                            end
                        end
                        begin  
                            v6629 = convert(TensorFlow.Tensor{Any}, v6629) 
                            begin  
                            end
                        end
                        begin  
                            v6630 = convert(TensorFlow.Tensor{Any}, v6630) 
                            begin  
                            end
                        end
                        begin  
                            (v6629,) = tf.tf_promote(v6629)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6626)
                        end
                        begin  
                            tf.add_input(desc, v6627)
                        end
                        begin  
                            tf.add_input(desc, v6628)
                        end
                        begin  
                            tf.add_input(desc, v6629)
                        end
                        begin  
                            tf.add_input(desc, v6630)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if has_known_shape !== nothing 
                                desc["has_known_shape"] = Base.Bool(has_known_shape)
                            end
                        end
                    end
                end), name, "SparseAccumulatorApplyGradient") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     barrier_insert_many(handle, keys, values)

For each key, assigns the respective value to the specified component.

If a key is not found in the barrier, this operation will create a new
incomplete element. If a key is found in the barrier, and the element
already has a value at component_index, this operation will fail with
INVALID_ARGUMENT, and leave the barrier in an undefined state.
"""
tf.@op function barrier_insert_many(v6631, v6632, v6633; name=nothing, T=nothing, component_index=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BarrierInsertMany") 
                    begin  
                        begin  
                            v6631 = convert(TensorFlow.Tensor{Any}, v6631) 
                            begin  
                            end
                        end
                        begin  
                            v6632 = convert(TensorFlow.Tensor{Any}, v6632) 
                            begin  
                            end
                        end
                        begin  
                            v6633 = convert(TensorFlow.Tensor{Any}, v6633) 
                            begin  
                            end
                        end
                        begin  
                            (v6633,) = tf.tf_promote(v6633)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6631)
                        end
                        begin  
                            tf.add_input(desc, v6632)
                        end
                        begin  
                            tf.add_input(desc, v6633)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if component_index !== nothing 
                                desc["component_index"] = Base.Int(component_index)
                            end
                        end
                    end
                end), name, "BarrierInsertMany") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     dilation_2d_backprop_input(input, filter, out_backprop)

Computes the gradient of morphological 2-D dilation with respect to the input.


"""
tf.@op function dilation_2d_backprop_input(v6634, v6635, v6636; name=nothing, T=nothing, strides=nothing, rates=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Dilation2DBackpropInput") 
                    begin  
                        begin  
                            v6634 = convert(TensorFlow.Tensor{Any}, v6634) 
                            begin  
                            end
                        end
                        begin  
                            v6635 = convert(TensorFlow.Tensor{Any}, v6635) 
                            begin  
                            end
                        end
                        begin  
                            v6636 = convert(TensorFlow.Tensor{Any}, v6636) 
                            begin  
                            end
                        end
                        begin  
                            (v6634, v6635, v6636) = tf.tf_promote(v6634, v6635, v6636)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6634)
                        end
                        begin  
                            tf.add_input(desc, v6635)
                        end
                        begin  
                            tf.add_input(desc, v6636)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if rates !== nothing 
                                desc["rates"] = Base.identity.rates
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "Dilation2DBackpropInput") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_apply_adadelta(var, accum, accum_update, lr, rho, epsilon, grad; use_locking=false)

Update '*var' according to the adadelta scheme.

accum = rho() * accum + (1 - rho()) * grad.square();
update = (update_accum + epsilon).sqrt() * (accum + epsilon()).rsqrt() * grad;
update_accum = rho() * update_accum + (1 - rho()) * update.square();
var -= update;
"""
tf.@op function resource_apply_adadelta(v6637, v6638, v6639, v6640, v6641, v6642, v6643; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceApplyAdadelta") 
                    begin  
                        begin  
                            v6637 = convert(TensorFlow.Tensor{Any}, v6637) 
                            begin  
                            end
                        end
                        begin  
                            v6638 = convert(TensorFlow.Tensor{Any}, v6638) 
                            begin  
                            end
                        end
                        begin  
                            v6639 = convert(TensorFlow.Tensor{Any}, v6639) 
                            begin  
                            end
                        end
                        begin  
                            v6640 = convert(TensorFlow.Tensor{Any}, v6640) 
                            begin  
                            end
                        end
                        begin  
                            v6641 = convert(TensorFlow.Tensor{Any}, v6641) 
                            begin  
                            end
                        end
                        begin  
                            v6642 = convert(TensorFlow.Tensor{Any}, v6642) 
                            begin  
                            end
                        end
                        begin  
                            v6643 = convert(TensorFlow.Tensor{Any}, v6643) 
                            begin  
                            end
                        end
                        begin  
                            (v6640, v6641, v6642, v6643) = tf.tf_promote(v6640, v6641, v6642, v6643)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6637)
                        end
                        begin  
                            tf.add_input(desc, v6638)
                        end
                        begin  
                            tf.add_input(desc, v6639)
                        end
                        begin  
                            tf.add_input(desc, v6640)
                        end
                        begin  
                            tf.add_input(desc, v6641)
                        end
                        begin  
                            tf.add_input(desc, v6642)
                        end
                        begin  
                            tf.add_input(desc, v6643)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceApplyAdadelta") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     batch_cholesky_grad(l, grad)




"""
tf.@op function batch_cholesky_grad(v6644, v6645; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchCholeskyGrad") 
                    begin  
                        begin  
                            v6644 = convert(TensorFlow.Tensor{Any}, v6644) 
                            begin  
                            end
                        end
                        begin  
                            v6645 = convert(TensorFlow.Tensor{Any}, v6645) 
                            begin  
                            end
                        end
                        begin  
                            (v6644, v6645) = tf.tf_promote(v6644, v6645)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6644)
                        end
                        begin  
                            tf.add_input(desc, v6645)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchCholeskyGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_gather(resource, indices; validate_indices=true)

Gather slices from the variable pointed to by `resource` according to `indices`.

`indices` must be an integer tensor of any dimension (usually 0-D or 1-D).
Produces an output tensor with shape `indices.shape + params.shape[1:]` where:

```python
    # Scalar indices
    output[:, ..., :] = params[indices, :, ... :]

    # Vector indices
    output[i, :, ..., :] = params[indices[i], :, ... :]

    # Higher rank indices
    output[i, ..., j, :, ... :] = params[indices[i, ..., j], :, ..., :]
```
"""
tf.@op function resource_gather(v6646, v6647; name=nothing, validate_indices=nothing, dtype=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceGather") 
                    begin  
                        begin  
                            v6646 = convert(TensorFlow.Tensor{Any}, v6646) 
                            begin  
                            end
                        end
                        begin  
                            v6647 = convert(TensorFlow.Tensor{Any}, v6647) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6647,) = tf.tf_promote(v6647)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6646)
                        end
                        begin  
                            tf.add_input(desc, v6647)
                        end
                    end 
                    begin  
                        begin  
                            if validate_indices !== nothing 
                                desc["validate_indices"] = Base.Bool(validate_indices)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "ResourceGather") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     logical_or(x, y)

Returns the truth value of x OR y element-wise.

*NOTE*: `LogicalOr` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function logical_or(v6648, v6649; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LogicalOr") 
                    begin  
                        begin  
                            v6648 = convert(TensorFlow.Tensor{Any}, v6648) 
                            begin  
                            end
                        end
                        begin  
                            v6649 = convert(TensorFlow.Tensor{Any}, v6649) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6648)
                        end
                        begin  
                            tf.add_input(desc, v6649)
                        end
                    end 
                    begin  
                    end
                end), name, "LogicalOr") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sin(x)

Computes sin of x element-wise.


"""
tf.@op function sin(v6650; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Sin") 
                    begin  
                        begin  
                            v6650 = convert(TensorFlow.Tensor{Any}, v6650) 
                            begin  
                            end
                        end
                        begin  
                            (v6650,) = tf.tf_promote(v6650)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6650)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Sin") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     const_()

Returns a constant tensor.


"""
tf.@op function const_(; name=nothing, value=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Const") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if value !== nothing 
                                desc["value"] = TensorFlow.RawTensor(value)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "Const") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     dense_to_sparse_set_operation(set1, set2_indices, set2_values, set2_shape; validate_indices=true)

Applies set operation along last dimension of `Tensor` and `SparseTensor`.

See SetOperationOp::SetOperationFromContext for values of `set_operation`.

Input `set2` is a `SparseTensor` represented by `set2_indices`, `set2_values`,
and `set2_shape`. For `set2` ranked `n`, 1st `n-1` dimensions must be the same
as `set1`. Dimension `n` contains values in a set, duplicates are allowed but
ignored.

If `validate_indices` is `True`, this op validates the order and range of `set2`
indices.

Output `result` is a `SparseTensor` represented by `result_indices`,
`result_values`, and `result_shape`. For `set1` and `set2` ranked `n`, this
has rank `n` and the same 1st `n-1` dimensions as `set1` and `set2`. The `nth`
dimension contains the result of `set_operation` applied to the corresponding
`[0...n-1]` dimension of `set`.
"""
tf.@op function dense_to_sparse_set_operation(v6651, v6652, v6653, v6654; name=nothing, set_operation=nothing, validate_indices=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DenseToSparseSetOperation") 
                    begin  
                        begin  
                            v6651 = convert(TensorFlow.Tensor{Any}, v6651) 
                            begin  
                            end
                        end
                        begin  
                            v6652 = convert(TensorFlow.Tensor{Any}, v6652) 
                            begin  
                            end
                        end
                        begin  
                            v6653 = convert(TensorFlow.Tensor{Any}, v6653) 
                            begin  
                            end
                        end
                        begin  
                            v6654 = convert(TensorFlow.Tensor{Any}, v6654) 
                            begin  
                            end
                        end
                        begin  
                            (v6651, v6653) = tf.tf_promote(v6651, v6653)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6651)
                        end
                        begin  
                            tf.add_input(desc, v6652)
                        end
                        begin  
                            tf.add_input(desc, v6653)
                        end
                        begin  
                            tf.add_input(desc, v6654)
                        end
                    end 
                    begin  
                        begin  
                            if set_operation !== nothing 
                                desc["set_operation"] = Base.String(set_operation)
                            end
                        end
                        begin  
                            if validate_indices !== nothing 
                                desc["validate_indices"] = Base.Bool(validate_indices)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "DenseToSparseSetOperation") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     reader_num_records_produced(reader_handle)

Returns the number of records this Reader has produced.

This is the same as the number of ReaderRead executions that have
succeeded.
"""
tf.@op function reader_num_records_produced(v6655; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderNumRecordsProduced") 
                    begin  
                        begin  
                            v6655 = convert(TensorFlow.Tensor{Any}, v6655) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6655)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderNumRecordsProduced") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     truncate_mod(x, y)

Returns element-wise remainder of division. This emulates C semantics where

true, this follows C semantics in that the result here is consistent
with a flooring divide. E.g. `floor(x / y) * y + mod(x, y) = x`.

*NOTE*: `Mod` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function truncate_mod(v6656, v6657; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TruncateMod") 
                    begin  
                        begin  
                            v6656 = convert(TensorFlow.Tensor{Any}, v6656) 
                            begin  
                            end
                        end
                        begin  
                            v6657 = convert(TensorFlow.Tensor{Any}, v6657) 
                            begin  
                            end
                        end
                        begin  
                            (v6656, v6657) = tf.tf_promote(v6656, v6657)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6656)
                        end
                        begin  
                            tf.add_input(desc, v6657)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TruncateMod") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_fft(input)




"""
tf.@op function batch_fft(v6658; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchFFT") 
                    begin  
                        begin  
                            v6658 = convert(TensorFlow.Tensor{Any}, v6658) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6658)
                        end
                    end 
                    begin  
                    end
                end), name, "BatchFFT") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_apply_proximal_gradient_descent(var, alpha, l1, l2, delta; use_locking=false)

Update '*var' as FOBOS algorithm with fixed learning rate.

prox_v = var - alpha * delta
var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}
"""
tf.@op function resource_apply_proximal_gradient_descent(v6659, v6660, v6661, v6662, v6663; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceApplyProximalGradientDescent") 
                    begin  
                        begin  
                            v6659 = convert(TensorFlow.Tensor{Any}, v6659) 
                            begin  
                            end
                        end
                        begin  
                            v6660 = convert(TensorFlow.Tensor{Any}, v6660) 
                            begin  
                            end
                        end
                        begin  
                            v6661 = convert(TensorFlow.Tensor{Any}, v6661) 
                            begin  
                            end
                        end
                        begin  
                            v6662 = convert(TensorFlow.Tensor{Any}, v6662) 
                            begin  
                            end
                        end
                        begin  
                            v6663 = convert(TensorFlow.Tensor{Any}, v6663) 
                            begin  
                            end
                        end
                        begin  
                            (v6660, v6661, v6662, v6663) = tf.tf_promote(v6660, v6661, v6662, v6663)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6659)
                        end
                        begin  
                            tf.add_input(desc, v6660)
                        end
                        begin  
                            tf.add_input(desc, v6661)
                        end
                        begin  
                            tf.add_input(desc, v6662)
                        end
                        begin  
                            tf.add_input(desc, v6663)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceApplyProximalGradientDescent") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     mean(input, reduction_indices; keep_dims=false, Tidx=Int32)

Computes the mean of elements across dimensions of a tensor.

Reduces `input` along the dimensions given in `reduction_indices`. Unless
`keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
`reduction_indices`. If `keep_dims` is true, the reduced dimensions are
retained with length 1.
"""
tf.@op function mean(v6664, v6665; name=nothing, keep_dims=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Mean") 
                    begin  
                        begin  
                            v6664 = convert(TensorFlow.Tensor{Any}, v6664) 
                            begin  
                            end
                        end
                        begin  
                            v6665 = convert(TensorFlow.Tensor{Int32}, v6665) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6664,) = tf.tf_promote(v6664)
                        end
                        begin  
                            (v6665,) = tf.tf_promote(v6665)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6664)
                        end
                        begin  
                            tf.add_input(desc, v6665)
                        end
                    end 
                    begin  
                        begin  
                            if keep_dims !== nothing 
                                desc["keep_dims"] = Base.Bool(keep_dims)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "Mean") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     quantized_max_pool(input, min_input, max_input)

Produces the max pool of the input tensor for quantized types.


"""
tf.@op function quantized_max_pool(v6666, v6667, v6668; name=nothing, T=nothing, ksize=nothing, strides=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedMaxPool") 
                    begin  
                        begin  
                            v6666 = convert(TensorFlow.Tensor{Any}, v6666) 
                            begin  
                            end
                        end
                        begin  
                            v6667 = convert(TensorFlow.Tensor{Any}, v6667) 
                            begin  
                            end
                        end
                        begin  
                            v6668 = convert(TensorFlow.Tensor{Any}, v6668) 
                            begin  
                            end
                        end
                        begin  
                            (v6666,) = tf.tf_promote(v6666)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6666)
                        end
                        begin  
                            tf.add_input(desc, v6667)
                        end
                        begin  
                            tf.add_input(desc, v6668)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if ksize !== nothing 
                                desc["ksize"] = Base.identity.ksize
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "QuantizedMaxPool") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     space_to_batch(input, paddings; Tpaddings=Int32)

SpaceToBatch for 4-D tensors of type T.

This is a legacy version of the more general SpaceToBatchND.

Zero-pads and then rearranges (permutes) blocks of spatial data into batch.
More specifically, this op outputs a copy of the input tensor where values from
the `height` and `width` dimensions are moved to the `batch` dimension. After
the zero-padding, both `height` and `width` of the input must be divisible by the
block size.
"""
tf.@op function space_to_batch(v6669, v6670; name=nothing, T=nothing, Tpaddings=nothing, block_size=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SpaceToBatch") 
                    begin  
                        begin  
                            v6669 = convert(TensorFlow.Tensor{Any}, v6669) 
                            begin  
                            end
                        end
                        begin  
                            v6670 = convert(TensorFlow.Tensor{Int32}, v6670) 
                            begin  
                            end
                        end
                        begin  
                            (v6669,) = tf.tf_promote(v6669)
                        end
                        begin  
                            (v6670,) = tf.tf_promote(v6670)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6669)
                        end
                        begin  
                            tf.add_input(desc, v6670)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tpaddings !== nothing 
                                desc["Tpaddings"] = Base.identity(Tpaddings)
                            end
                        end
                        begin  
                            if block_size !== nothing 
                                desc["block_size"] = Base.Int(block_size)
                            end
                        end
                    end
                end), name, "SpaceToBatch") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     irfft_2d(input, fft_length)

Compute the inverse 2-dimensional discrete Fourier Transform of a real-valued

signal over the inner-most 2 dimensions of `input`.

The inner-most 2 dimensions of `input` are assumed to be the result of `RFFT2D`:
The inner-most dimension contains the `fft_length / 2 + 1` unique components of
the DFT of a real-valued signal. If `fft_length` is not provided, it is computed
from the size of the inner-most 2 dimensions of `input`. If the FFT length used
to compute `input` is odd, it should be provided since it cannot be inferred
properly.
"""
tf.@op function irfft_2d(v6671, v6672; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("IRFFT2D") 
                    begin  
                        begin  
                            v6671 = convert(TensorFlow.Tensor{Any}, v6671) 
                            begin  
                            end
                        end
                        begin  
                            v6672 = convert(TensorFlow.Tensor{Any}, v6672) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6671)
                        end
                        begin  
                            tf.add_input(desc, v6672)
                        end
                    end 
                    begin  
                    end
                end), name, "IRFFT2D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     adjust_hue(images, delta)

Adjust the hue of one or more images.

`images` is a tensor of at least 3 dimensions.  The last dimension is
interpretted as channels, and must be three.

The input image is considered in the RGB colorspace. Conceptually, the RGB
colors are first mapped into HSV. A delta is then applied all the hue values,
and then remapped back to RGB colorspace.
"""
tf.@op function adjust_hue(v6673, v6674; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AdjustHue") 
                    begin  
                        begin  
                            v6673 = convert(TensorFlow.Tensor{Any}, v6673) 
                            begin  
                            end
                        end
                        begin  
                            v6674 = convert(TensorFlow.Tensor{Any}, v6674) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6673)
                        end
                        begin  
                            tf.add_input(desc, v6674)
                        end
                    end 
                    begin  
                    end
                end), name, "AdjustHue") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     floor(x)

Returns element-wise largest integer not greater than x.


"""
tf.@op function floor(v6675; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Floor") 
                    begin  
                        begin  
                            v6675 = convert(TensorFlow.Tensor{Any}, v6675) 
                            begin  
                            end
                        end
                        begin  
                            (v6675,) = tf.tf_promote(v6675)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6675)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Floor") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tile_grad(input, multiples)

Returns the gradient of `Tile`.

Since `Tile` takes an input and repeats the input `multiples` times
along each dimension, `TileGrad` takes in `multiples` and aggregates
each repeated tile of `input` into `output`.
"""
tf.@op function tile_grad(v6676, v6677; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TileGrad") 
                    begin  
                        begin  
                            v6676 = convert(TensorFlow.Tensor{Any}, v6676) 
                            begin  
                            end
                        end
                        begin  
                            v6677 = convert(TensorFlow.Tensor{Any}, v6677) 
                            begin  
                            end
                        end
                        begin  
                            (v6676,) = tf.tf_promote(v6676)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6676)
                        end
                        begin  
                            tf.add_input(desc, v6677)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TileGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     real_div(x, y)

Returns x / y element-wise for real types.

If `x` and `y` are reals, this will return the floating-point division.

*NOTE*: `Div` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function real_div(v6678, v6679; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RealDiv") 
                    begin  
                        begin  
                            v6678 = convert(TensorFlow.Tensor{Any}, v6678) 
                            begin  
                            end
                        end
                        begin  
                            v6679 = convert(TensorFlow.Tensor{Any}, v6679) 
                            begin  
                            end
                        end
                        begin  
                            (v6678, v6679) = tf.tf_promote(v6678, v6679)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6678)
                        end
                        begin  
                            tf.add_input(desc, v6679)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "RealDiv") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_grad_v3(handle, flow_in)

Creates a TensorArray for storing the gradients of values in the given handle.

If the given TensorArray gradient already exists, returns a reference to it.

Locks the size of the original TensorArray by disabling its dynamic size flag.

**A note about the input flow_in:**

The handle flow_in forces the execution of the gradient lookup to occur
only after certain other operations have occurred.  For example, when
the forward TensorArray is dynamically sized, writes to this TensorArray
may resize the object.  The gradient TensorArray is statically sized based
on the size of the forward TensorArray when this operation executes.
Furthermore, the size of the forward TensorArray is frozen by this call.
As a result, the flow is used to ensure that the call to generate the gradient
TensorArray only happens after all writes are executed.

In the case of dynamically sized TensorArrays, gradient computation should
only be performed on read operations that have themselves been chained via
flow to occur only after all writes have executed. That way the final size
of the forward TensorArray is known when this operation is called.

**A note about the source attribute:**

TensorArray gradient calls use an accumulator TensorArray object.  If
multiple gradients are calculated and run in the same session, the multiple
gradient nodes may accidentally flow throuth the same accumulator TensorArray.
This double counts and generally breaks the TensorArray gradient flow.

The solution is to identify which gradient call this particular
TensorArray gradient is being called in.  This is performed by identifying
a unique string (e.g. "gradients", "gradients_1", ...) from the input
gradient Tensor's name.  This string is used as a suffix when creating
the TensorArray gradient object here (the attribute `source`).

The attribute `source` is added as a suffix to the forward TensorArray's
name when performing the creation / lookup, so that each separate gradient
calculation gets its own TensorArray accumulator.
"""
tf.@op function tensor_array_grad_v3(v6680, v6681; name=nothing, source=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayGradV3") 
                    begin  
                        begin  
                            v6680 = convert(TensorFlow.Tensor{Any}, v6680) 
                            begin  
                            end
                        end
                        begin  
                            v6681 = convert(TensorFlow.Tensor{Any}, v6681) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6680)
                        end
                        begin  
                            tf.add_input(desc, v6681)
                        end
                    end 
                    begin  
                        begin  
                            if source !== nothing 
                                desc["source"] = Base.String(source)
                            end
                        end
                    end
                end), name, "TensorArrayGradV3") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     restore_slice(file_pattern, tensor_name, shape_and_slice; preferred_shard=-1)

Restores a tensor from checkpoint files.

This is like `Restore` except that restored tensor can be listed as filling
only a slice of a larger tensor.  `shape_and_slice` specifies the shape of the
larger tensor and the slice that the restored tensor covers.

The `shape_and_slice` input has the same format as the
elements of the `shapes_and_slices` input of the `SaveSlices` op.
"""
tf.@op function restore_slice(v6682, v6683, v6684; name=nothing, dt=nothing, preferred_shard=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RestoreSlice") 
                    begin  
                        begin  
                            v6682 = convert(TensorFlow.Tensor{Any}, v6682) 
                            begin  
                            end
                        end
                        begin  
                            v6683 = convert(TensorFlow.Tensor{Any}, v6683) 
                            begin  
                            end
                        end
                        begin  
                            v6684 = convert(TensorFlow.Tensor{Any}, v6684) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6682)
                        end
                        begin  
                            tf.add_input(desc, v6683)
                        end
                        begin  
                            tf.add_input(desc, v6684)
                        end
                    end 
                    begin  
                        begin  
                            if dt !== nothing 
                                desc["dt"] = Base.identity(dt)
                            end
                        end
                        begin  
                            if preferred_shard !== nothing 
                                desc["preferred_shard"] = Base.Int(preferred_shard)
                            end
                        end
                    end
                end), name, "RestoreSlice") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_apply_adagrad(var, accum, lr, grad, indices; use_locking=false)

Update relevant entries in '*var' and '*accum' according to the adagrad scheme.

That is for rows we have grad for, we update var and accum as follows:
accum += grad * grad
var -= lr * grad * (1 / sqrt(accum))
"""
tf.@op function sparse_apply_adagrad(v6685, v6686, v6687, v6688, v6689; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseApplyAdagrad") 
                    begin  
                        begin  
                            v6685 = convert(TensorFlow.Tensor{Any}, v6685) 
                            begin  
                            end
                        end
                        begin  
                            v6686 = convert(TensorFlow.Tensor{Any}, v6686) 
                            begin  
                            end
                        end
                        begin  
                            v6687 = convert(TensorFlow.Tensor{Any}, v6687) 
                            begin  
                            end
                        end
                        begin  
                            v6688 = convert(TensorFlow.Tensor{Any}, v6688) 
                            begin  
                            end
                        end
                        begin  
                            v6689 = convert(TensorFlow.Tensor{Any}, v6689) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6685, v6686, v6687, v6688) = tf.tf_promote(v6685, v6686, v6687, v6688)
                        end
                        begin  
                            (v6689,) = tf.tf_promote(v6689)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6685)
                        end
                        begin  
                            tf.add_input(desc, v6686)
                        end
                        begin  
                            tf.add_input(desc, v6687)
                        end
                        begin  
                            tf.add_input(desc, v6688)
                        end
                        begin  
                            tf.add_input(desc, v6689)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "SparseApplyAdagrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fused_batch_norm(x, scale, offset, mean, variance; epsilon=nothing, data_format=NHWC, is_training=true)

Batch normalization.

Note that the size of 4D Tensors are defined by either "NHWC" or "NCHW".
The size of 1D Tensors matches the dimension C of the 4D Tensors.
"""
tf.@op function fused_batch_norm(v6690, v6691, v6692, v6693, v6694; name=nothing, T=nothing, epsilon=nothing, data_format=nothing, is_training=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FusedBatchNorm") 
                    begin  
                        begin  
                            v6690 = convert(TensorFlow.Tensor{Any}, v6690) 
                            begin  
                            end
                        end
                        begin  
                            v6691 = convert(TensorFlow.Tensor{Any}, v6691) 
                            begin  
                            end
                        end
                        begin  
                            v6692 = convert(TensorFlow.Tensor{Any}, v6692) 
                            begin  
                            end
                        end
                        begin  
                            v6693 = convert(TensorFlow.Tensor{Any}, v6693) 
                            begin  
                            end
                        end
                        begin  
                            v6694 = convert(TensorFlow.Tensor{Any}, v6694) 
                            begin  
                            end
                        end
                        begin  
                            (v6690, v6691, v6692, v6693, v6694) = tf.tf_promote(v6690, v6691, v6692, v6693, v6694)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6690)
                        end
                        begin  
                            tf.add_input(desc, v6691)
                        end
                        begin  
                            tf.add_input(desc, v6692)
                        end
                        begin  
                            tf.add_input(desc, v6693)
                        end
                        begin  
                            tf.add_input(desc, v6694)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if epsilon !== nothing 
                                desc["epsilon"] = Base.identity(epsilon)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                        begin  
                            if is_training !== nothing 
                                desc["is_training"] = Base.Bool(is_training)
                            end
                        end
                    end
                end), name, "FusedBatchNorm") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3), tf.Tensor(op, 4), tf.Tensor(op, 5))
        end
    end

"""
     reverse(tensor, dims)

Reverses specific dimensions of a tensor.

Given a `tensor`, and a `bool` tensor `dims` representing the dimensions
of `tensor`, this operation reverses each dimension i of `tensor` where
`dims[i]` is `True`.

`tensor` can have up to 8 dimensions. The number of dimensions
of `tensor` must equal the number of elements in `dims`. In other words:

`rank(tensor) = size(dims)`

For example:

```prettyprint
# tensor 't' is [[[[ 0,  1,  2,  3],
#                  [ 4,  5,  6,  7],
#                  [ 8,  9, 10, 11]],
#                 [[12, 13, 14, 15],
#                  [16, 17, 18, 19],
#                  [20, 21, 22, 23]]]]
# tensor 't' shape is [1, 2, 3, 4]

# 'dims' is [False, False, False, True]
reverse(t, dims) ==> [[[[ 3,  2,  1,  0],
                        [ 7,  6,  5,  4],
                        [ 11, 10, 9, 8]],
                       [[15, 14, 13, 12],
                        [19, 18, 17, 16],
                        [23, 22, 21, 20]]]]

# 'dims' is [False, True, False, False]
reverse(t, dims) ==> [[[[12, 13, 14, 15],
                        [16, 17, 18, 19],
                        [20, 21, 22, 23]
                       [[ 0,  1,  2,  3],
                        [ 4,  5,  6,  7],
                        [ 8,  9, 10, 11]]]]

# 'dims' is [False, False, True, False]
reverse(t, dims) ==> [[[[8, 9, 10, 11],
                        [4, 5, 6, 7],
                        [0, 1, 2, 3]]
                       [[20, 21, 22, 23],
                        [16, 17, 18, 19],
                        [12, 13, 14, 15]]]]
```
"""
tf.@op function reverse(v6695, v6696; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Reverse") 
                    begin  
                        begin  
                            v6695 = convert(TensorFlow.Tensor{Any}, v6695) 
                            begin  
                            end
                        end
                        begin  
                            v6696 = convert(TensorFlow.Tensor{Any}, v6696) 
                            begin  
                            end
                        end
                        begin  
                            (v6695,) = tf.tf_promote(v6695)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6695)
                        end
                        begin  
                            tf.add_input(desc, v6696)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Reverse") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     logical_and(x, y)

Returns the truth value of x AND y element-wise.

*NOTE*: `LogicalAnd` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function logical_and(v6697, v6698; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LogicalAnd") 
                    begin  
                        begin  
                            v6697 = convert(TensorFlow.Tensor{Any}, v6697) 
                            begin  
                            end
                        end
                        begin  
                            v6698 = convert(TensorFlow.Tensor{Any}, v6698) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6697)
                        end
                        begin  
                            tf.add_input(desc, v6698)
                        end
                    end 
                    begin  
                    end
                end), name, "LogicalAnd") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     get_session_tensor(handle)

Get the value of the tensor specified by its handle.


"""
tf.@op function get_session_tensor(v6699; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("GetSessionTensor") 
                    begin  
                        begin  
                            v6699 = convert(TensorFlow.Tensor{Any}, v6699) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6699)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "GetSessionTensor") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     decode_png(contents; channels=0, dtype=UInt8)

Decode a PNG-encoded image to a uint8 or uint16 tensor.

The attr `channels` indicates the desired number of color channels for the
decoded image.

Accepted values are:

*   0: Use the number of channels in the PNG-encoded image.
*   1: output a grayscale image.
*   3: output an RGB image.
*   4: output an RGBA image.

If needed, the PNG-encoded image is transformed to match the requested number
of color channels.
"""
tf.@op function decode_png(v6700; name=nothing, channels=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DecodePng") 
                    begin  
                        begin  
                            v6700 = convert(TensorFlow.Tensor{Any}, v6700) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6700)
                        end
                    end 
                    begin  
                        begin  
                            if channels !== nothing 
                                desc["channels"] = Base.Int(channels)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "DecodePng") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     igamma(a, x)

Compute the lower regularized incomplete Gamma function `Q(a, x)`.

The lower regularized incomplete Gamma function is defined as:

```
P(a, x) = gamma(a, x) / Gamma(a) = 1 - Q(a, x)
```
where
```
gamma(a, x) = int_{0}^{x} t^{a-1} exp(-t) dt
```
is the lower incomplete Gamma function.

Note, above `Q(a, x)` (`Igammac`) is the upper regularized complete
Gamma function.
"""
tf.@op function igamma(v6701, v6702; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Igamma") 
                    begin  
                        begin  
                            v6701 = convert(TensorFlow.Tensor{Any}, v6701) 
                            begin  
                            end
                        end
                        begin  
                            v6702 = convert(TensorFlow.Tensor{Any}, v6702) 
                            begin  
                            end
                        end
                        begin  
                            (v6701, v6702) = tf.tf_promote(v6701, v6702)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6701)
                        end
                        begin  
                            tf.add_input(desc, v6702)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Igamma") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_gather_v3(handle, indices, flow_in; element_shape=TensorShape[unknown])

Gather specific elements from the TensorArray into output `value`.

All elements selected by `indices` must have the same shape.
"""
tf.@op function tensor_array_gather_v3(v6703, v6704, v6705; name=nothing, dtype=nothing, element_shape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayGatherV3") 
                    begin  
                        begin  
                            v6703 = convert(TensorFlow.Tensor{Any}, v6703) 
                            begin  
                            end
                        end
                        begin  
                            v6704 = convert(TensorFlow.Tensor{Any}, v6704) 
                            begin  
                            end
                        end
                        begin  
                            v6705 = convert(TensorFlow.Tensor{Any}, v6705) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6703)
                        end
                        begin  
                            tf.add_input(desc, v6704)
                        end
                        begin  
                            tf.add_input(desc, v6705)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if element_shape !== nothing 
                                desc["element_shape"] = Base.identity(element_shape)
                            end
                        end
                    end
                end), name, "TensorArrayGatherV3") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     digamma(x)

Computes Psi, the derivative of Lgamma (the log of the absolute value of

`Gamma(x)`), element-wise.
"""
tf.@op function digamma(v6706; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Digamma") 
                    begin  
                        begin  
                            v6706 = convert(TensorFlow.Tensor{Any}, v6706) 
                            begin  
                            end
                        end
                        begin  
                            (v6706,) = tf.tf_promote(v6706)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6706)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Digamma") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     destroy_resource_op(resource; ignore_lookup_error=true)

Deletes the resource specified by the handle.

All subsequent operations using the resource will result in a NotFound
error status.
"""
tf.@op function destroy_resource_op(v6707; name=nothing, ignore_lookup_error=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DestroyResourceOp") 
                    begin  
                        begin  
                            v6707 = convert(TensorFlow.Tensor{Any}, v6707) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6707)
                        end
                    end 
                    begin  
                        begin  
                            if ignore_lookup_error !== nothing 
                                desc["ignore_lookup_error"] = Base.Bool(ignore_lookup_error)
                            end
                        end
                    end
                end), name, "DestroyResourceOp") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     text_line_reader(; skip_header_lines=0, container=, shared_name=)

A Reader that outputs the lines of a file delimited by '\n'.


"""
tf.@op function text_line_reader(; name=nothing, skip_header_lines=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TextLineReader") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if skip_header_lines !== nothing 
                                desc["skip_header_lines"] = Base.Int(skip_header_lines)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "TextLineReader") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     text_line_reader_v2(; skip_header_lines=0, container=, shared_name=)

A Reader that outputs the lines of a file delimited by '\n'.


"""
tf.@op function text_line_reader_v2(; name=nothing, skip_header_lines=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TextLineReaderV2") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if skip_header_lines !== nothing 
                                desc["skip_header_lines"] = Base.Int(skip_header_lines)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "TextLineReaderV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     betainc(a, b, x)

Compute the regularized incomplete beta integral \\(I_x(a, b)\\).

The regularized incomplete beta integral is defined as:

```
I_x(a, b) = \frac{B(x; a, b)}{B(a, b)}
```
where

```
B(x; a, b) = \int_0^x t^{a-1} (1 - t)^{b-1} dt
```

is the incomplete beta function and \\(B(a, b)\\) is the *complete*
beta function.
"""
tf.@op function betainc(v6708, v6709, v6710; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Betainc") 
                    begin  
                        begin  
                            v6708 = convert(TensorFlow.Tensor{Any}, v6708) 
                            begin  
                            end
                        end
                        begin  
                            v6709 = convert(TensorFlow.Tensor{Any}, v6709) 
                            begin  
                            end
                        end
                        begin  
                            v6710 = convert(TensorFlow.Tensor{Any}, v6710) 
                            begin  
                            end
                        end
                        begin  
                            (v6708, v6709, v6710) = tf.tf_promote(v6708, v6709, v6710)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6708)
                        end
                        begin  
                            tf.add_input(desc, v6709)
                        end
                        begin  
                            tf.add_input(desc, v6710)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Betainc") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     space_to_depth(input)

SpaceToDepth for tensors of type T.

Rearranges blocks of spatial data, into depth. More specifically,
this op outputs a copy of the input tensor where values from the `height`
and `width` dimensions are moved to the `depth` dimension.
The attr `block_size` indicates the input block size and how the data is moved.

  * Non-overlapping blocks of size `block_size x block size` are rearranged
    into depth at each location.
  * The depth of the output tensor is `input_depth * block_size * block_size`.
  * The input tensor's height and width must be divisible by block_size.

That is, assuming the input is in the shape:
`[batch, height, width, depth]`,
the shape of the output will be:
`[batch, height/block_size, width/block_size, depth*block_size*block_size]`

This operation requires that the input tensor be of rank 4, and that
`block_size` be >=1 and a divisor of both the input `height` and `width`.

This operation is useful for resizing the activations between convolutions
(but keeping all data), e.g. instead of pooling. It is also useful for training
purely convolutional models.

For example, given this input of shape `[1, 2, 2, 1]`, and block_size of 2:

```prettyprint
x = [[[[1], [2]],
      [[3], [4]]]]
```

This operation will output a tensor of shape `[1, 1, 1, 4]`:

```prettyprint
[[[[1, 2, 3, 4]]]]
```

Here, the input has a batch of 1 and each batch element has shape `[2, 2, 1]`,
the corresponding output will have a single element (i.e. width and height are
both 1) and will have a depth of 4 channels (1 * block_size * block_size).
The output element shape is `[1, 1, 4]`.

For an input tensor with larger depth, here of shape `[1, 2, 2, 3]`, e.g.

```prettyprint
x = [[[[1, 2, 3], [4, 5, 6]],
      [[7, 8, 9], [10, 11, 12]]]]
```

This operation, for block_size of 2, will return the following tensor of shape
`[1, 1, 1, 12]`

```prettyprint
[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]]]
```

Similarly, for the following input of shape `[1 4 4 1]`, and a block size of 2:

```prettyprint
x = [[[[1],   [2],  [5],  [6]],
      [[3],   [4],  [7],  [8]],
      [[9],  [10], [13],  [14]],
      [[11], [12], [15],  [16]]]]
```

the operator will return the following tensor of shape `[1 2 2 4]`:

```prettyprint
x = [[[[1, 2, 3, 4],
       [5, 6, 7, 8]],
      [[9, 10, 11, 12],
       [13, 14, 15, 16]]]]
```
"""
tf.@op function space_to_depth(v6711; name=nothing, T=nothing, block_size=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SpaceToDepth") 
                    begin  
                        begin  
                            v6711 = convert(TensorFlow.Tensor{Any}, v6711) 
                            begin  
                            end
                        end
                        begin  
                            (v6711,) = tf.tf_promote(v6711)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6711)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if block_size !== nothing 
                                desc["block_size"] = Base.Int(block_size)
                            end
                        end
                    end
                end), name, "SpaceToDepth") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sqrt_grad(x, y)

Computes the gradient for the sqrt of `x` wrt its input.

Specifically, `grad = dy * 0.5 / y`, where `y = sqrt(x)`, and `dy`
is the corresponding input gradient.
"""
tf.@op function sqrt_grad(v6712, v6713; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SqrtGrad") 
                    begin  
                        begin  
                            v6712 = convert(TensorFlow.Tensor{Any}, v6712) 
                            begin  
                            end
                        end
                        begin  
                            v6713 = convert(TensorFlow.Tensor{Any}, v6713) 
                            begin  
                            end
                        end
                        begin  
                            (v6712, v6713) = tf.tf_promote(v6712, v6713)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6712)
                        end
                        begin  
                            tf.add_input(desc, v6713)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SqrtGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_scatter_v3(handle, indices, value, flow_in)

Scatter the data from the input value into specific TensorArray elements.

`indices` must be a vector, its length must match the first dim of `value`.
"""
tf.@op function tensor_array_scatter_v3(v6714, v6715, v6716, v6717; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayScatterV3") 
                    begin  
                        begin  
                            v6714 = convert(TensorFlow.Tensor{Any}, v6714) 
                            begin  
                            end
                        end
                        begin  
                            v6715 = convert(TensorFlow.Tensor{Any}, v6715) 
                            begin  
                            end
                        end
                        begin  
                            v6716 = convert(TensorFlow.Tensor{Any}, v6716) 
                            begin  
                            end
                        end
                        begin  
                            v6717 = convert(TensorFlow.Tensor{Any}, v6717) 
                            begin  
                            end
                        end
                        begin  
                            (v6716,) = tf.tf_promote(v6716)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6714)
                        end
                        begin  
                            tf.add_input(desc, v6715)
                        end
                        begin  
                            tf.add_input(desc, v6716)
                        end
                        begin  
                            tf.add_input(desc, v6717)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TensorArrayScatterV3") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resize_nearest_neighbor_grad(grads, size; align_corners=false)

Computes the gradient of nearest neighbor interpolation.


"""
tf.@op function resize_nearest_neighbor_grad(v6718, v6719; name=nothing, T=nothing, align_corners=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResizeNearestNeighborGrad") 
                    begin  
                        begin  
                            v6718 = convert(TensorFlow.Tensor{Any}, v6718) 
                            begin  
                            end
                        end
                        begin  
                            v6719 = convert(TensorFlow.Tensor{Any}, v6719) 
                            begin  
                            end
                        end
                        begin  
                            (v6718,) = tf.tf_promote(v6718)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6718)
                        end
                        begin  
                            tf.add_input(desc, v6719)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if align_corners !== nothing 
                                desc["align_corners"] = Base.Bool(align_corners)
                            end
                        end
                    end
                end), name, "ResizeNearestNeighborGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     qr(input; full_matrices=false)

Computes the QR decompositions of one or more matrices.

Computes the QR decomposition of each inner matrix in `tensor` such that
`tensor[..., :, :] = q[..., :, :] * r[..., :,:])`

```prettyprint
# a is a tensor.
# q is a tensor of orthonormal matrices.
# r is a tensor of upper triangular matrices.
q, r = qr(a)
q_full, r_full = qr(a, full_matrices=True)
```
"""
tf.@op function qr(v6720; name=nothing, full_matrices=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Qr") 
                    begin  
                        begin  
                            v6720 = convert(TensorFlow.Tensor{Any}, v6720) 
                            begin  
                            end
                        end
                        begin  
                            (v6720,) = tf.tf_promote(v6720)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6720)
                        end
                    end 
                    begin  
                        begin  
                            if full_matrices !== nothing 
                                desc["full_matrices"] = Base.Bool(full_matrices)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Qr") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     tanh_grad(x, y)

Computes the gradient for the tanh of `x` wrt its input.

Specifically, `grad = dy * (1 - y*y)`, where `y = tanh(x)`, and `dy`
is the corresponding input gradient.
"""
tf.@op function tanh_grad(v6721, v6722; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TanhGrad") 
                    begin  
                        begin  
                            v6721 = convert(TensorFlow.Tensor{Any}, v6721) 
                            begin  
                            end
                        end
                        begin  
                            v6722 = convert(TensorFlow.Tensor{Any}, v6722) 
                            begin  
                            end
                        end
                        begin  
                            (v6721, v6722) = tf.tf_promote(v6721, v6722)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6721)
                        end
                        begin  
                            tf.add_input(desc, v6722)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TanhGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     decode_base_64(input)

Decode web-safe base64-encoded strings.

Input may or may not have padding at the end. See EncodeBase64 for padding.
Web-safe means that input must use - and _ instead of + and /.
"""
tf.@op function decode_base_64(v6723; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DecodeBase64") 
                    begin  
                        begin  
                            v6723 = convert(TensorFlow.Tensor{Any}, v6723) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6723)
                        end
                    end 
                    begin  
                    end
                end), name, "DecodeBase64") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     audio_summary_v2(tag, tensor, sample_rate; max_outputs=3)

Outputs a `Summary` protocol buffer with audio.

The summary has up to `max_outputs` summary values containing audio. The
audio is built from `tensor` which must be 3-D with shape `[batch_size,
frames, channels]` or 2-D with shape `[batch_size, frames]`. The values are
assumed to be in the range of `[-1.0, 1.0]` with a sample rate of `sample_rate`.

The `tag` argument is a scalar `Tensor` of type `string`.  It is used to
build the `tag` of the summary values:

*  If `max_outputs` is 1, the summary value tag is '*tag*/audio'.
*  If `max_outputs` is greater than 1, the summary value tags are
   generated sequentially as '*tag*/audio/0', '*tag*/audio/1', etc.
"""
tf.@op function audio_summary_v2(v6724, v6725, v6726; name=nothing, max_outputs=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AudioSummaryV2") 
                    begin  
                        begin  
                            v6724 = convert(TensorFlow.Tensor{Any}, v6724) 
                            begin  
                            end
                        end
                        begin  
                            v6725 = convert(TensorFlow.Tensor{Any}, v6725) 
                            begin  
                            end
                        end
                        begin  
                            v6726 = convert(TensorFlow.Tensor{Any}, v6726) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6724)
                        end
                        begin  
                            tf.add_input(desc, v6725)
                        end
                        begin  
                            tf.add_input(desc, v6726)
                        end
                    end 
                    begin  
                        begin  
                            if max_outputs !== nothing 
                                desc["max_outputs"] = Base.Int(max_outputs)
                            end
                        end
                    end
                end), name, "AudioSummaryV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     mirror_pad(input, paddings; Tpaddings=Int32)

Pads a tensor with mirrored values.

This operation pads a `input` with mirrored values according to the `paddings`
you specify. `paddings` is an integer tensor with shape `[n, 2]`, where n is
the rank of `input`. For each dimension D of `input`, `paddings[D, 0]` indicates
how many values to add before the contents of `input` in that dimension, and
`paddings[D, 1]` indicates how many values to add after the contents of `input`
in that dimension. Both `paddings[D, 0]` and `paddings[D, 1]` must be no greater
than `input.dim_size(D)` (or `input.dim_size(D) - 1`) if `copy_border` is true
(if false, respectively).

The padded size of each dimension D of the output is:

`paddings(D, 0) + input.dim_size(D) + paddings(D, 1)`

For example:

```prettyprint
# 't' is [[1, 2, 3], [4, 5, 6]].
# 'paddings' is [[1, 1]], [2, 2]].
# 'mode' is SYMMETRIC.
# rank of 't' is 2.
pad(t, paddings) ==> [[2, 1, 1, 2, 3, 3, 2]
                      [2, 1, 1, 2, 3, 3, 2]
                      [5, 4, 4, 5, 6, 6, 5]
                      [5, 4, 4, 5, 6, 6, 5]]
```
"""
tf.@op function mirror_pad(v6727, v6728; name=nothing, T=nothing, Tpaddings=nothing, mode=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MirrorPad") 
                    begin  
                        begin  
                            v6727 = convert(TensorFlow.Tensor{Any}, v6727) 
                            begin  
                            end
                        end
                        begin  
                            v6728 = convert(TensorFlow.Tensor{Int32}, v6728) 
                            begin  
                            end
                        end
                        begin  
                            (v6727,) = tf.tf_promote(v6727)
                        end
                        begin  
                            (v6728,) = tf.tf_promote(v6728)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6727)
                        end
                        begin  
                            tf.add_input(desc, v6728)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tpaddings !== nothing 
                                desc["Tpaddings"] = Base.identity(Tpaddings)
                            end
                        end
                        begin  
                            if mode !== nothing 
                                desc["mode"] = Base.String(mode)
                            end
                        end
                    end
                end), name, "MirrorPad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     logical_not(x)

Returns the truth value of NOT x element-wise.


"""
tf.@op function logical_not(v6729; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LogicalNot") 
                    begin  
                        begin  
                            v6729 = convert(TensorFlow.Tensor{Any}, v6729) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6729)
                        end
                    end 
                    begin  
                    end
                end), name, "LogicalNot") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     log_softmax(logits)

Computes log softmax activations.

For each batch `i` and class `j` we have

    logsoftmax[i, j] = logits[i, j] - log(sum(exp(logits[i])))
"""
tf.@op function log_softmax(v6730; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LogSoftmax") 
                    begin  
                        begin  
                            v6730 = convert(TensorFlow.Tensor{Any}, v6730) 
                            begin  
                            end
                        end
                        begin  
                            (v6730,) = tf.tf_promote(v6730)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6730)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "LogSoftmax") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_ifft(input)




"""
tf.@op function batch_ifft(v6731; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchIFFT") 
                    begin  
                        begin  
                            v6731 = convert(TensorFlow.Tensor{Any}, v6731) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6731)
                        end
                    end 
                    begin  
                    end
                end), name, "BatchIFFT") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fake_quant_with_min_max_args_gradient(gradients, inputs; min=nothing, max=nothing)

Compute gradients for a FakeQuantWithMinMaxArgs operation.


"""
tf.@op function fake_quant_with_min_max_args_gradient(v6732, v6733; name=nothing, min=nothing, max=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FakeQuantWithMinMaxArgsGradient") 
                    begin  
                        begin  
                            v6732 = convert(TensorFlow.Tensor{Any}, v6732) 
                            begin  
                            end
                        end
                        begin  
                            v6733 = convert(TensorFlow.Tensor{Any}, v6733) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6732)
                        end
                        begin  
                            tf.add_input(desc, v6733)
                        end
                    end 
                    begin  
                        begin  
                            if min !== nothing 
                                desc["min"] = Base.identity(min)
                            end
                        end
                        begin  
                            if max !== nothing 
                                desc["max"] = Base.identity(max)
                            end
                        end
                    end
                end), name, "FakeQuantWithMinMaxArgsGradient") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     random_uniform(shape; seed=0, seed2=0)

Outputs random values from a uniform distribution.

The generated values follow a uniform distribution in the range `[0, 1)`. The
lower bound 0 is included in the range, while the upper bound 1 is excluded.
"""
tf.@op function random_uniform(v6734; name=nothing, seed=nothing, seed2=nothing, dtype=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RandomUniform") 
                    begin  
                        begin  
                            v6734 = convert(TensorFlow.Tensor{Any}, v6734) 
                            begin  
                            end
                        end
                        begin  
                            (v6734,) = tf.tf_promote(v6734)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6734)
                        end
                    end 
                    begin  
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "RandomUniform") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_svd(input; compute_uv=true, full_matrices=false)




"""
tf.@op function batch_svd(v6735; name=nothing, compute_uv=nothing, full_matrices=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchSvd") 
                    begin  
                        begin  
                            v6735 = convert(TensorFlow.Tensor{Any}, v6735) 
                            begin  
                            end
                        end
                        begin  
                            (v6735,) = tf.tf_promote(v6735)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6735)
                        end
                    end 
                    begin  
                        begin  
                            if compute_uv !== nothing 
                                desc["compute_uv"] = Base.Bool(compute_uv)
                            end
                        end
                        begin  
                            if full_matrices !== nothing 
                                desc["full_matrices"] = Base.Bool(full_matrices)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchSvd") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     resource_sparse_apply_ftrl(var, accum, linear, grad, indices, lr, l1, l2, lr_power; use_locking=false)

Update relevant entries in '*var' according to the Ftrl-proximal scheme.

That is for rows we have grad for, we update var, accum and linear as follows:
accum_new = accum + grad * grad
linear += grad + (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
var = (sign(linear) * l1 - linear) / quadratic if |linear| > l1 else 0.0
accum = accum_new
"""
tf.@op function resource_sparse_apply_ftrl(v6736, v6737, v6738, v6739, v6740, v6741, v6742, v6743, v6744; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceSparseApplyFtrl") 
                    begin  
                        begin  
                            v6736 = convert(TensorFlow.Tensor{Any}, v6736) 
                            begin  
                            end
                        end
                        begin  
                            v6737 = convert(TensorFlow.Tensor{Any}, v6737) 
                            begin  
                            end
                        end
                        begin  
                            v6738 = convert(TensorFlow.Tensor{Any}, v6738) 
                            begin  
                            end
                        end
                        begin  
                            v6739 = convert(TensorFlow.Tensor{Any}, v6739) 
                            begin  
                            end
                        end
                        begin  
                            v6740 = convert(TensorFlow.Tensor{Any}, v6740) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6741 = convert(TensorFlow.Tensor{Any}, v6741) 
                            begin  
                            end
                        end
                        begin  
                            v6742 = convert(TensorFlow.Tensor{Any}, v6742) 
                            begin  
                            end
                        end
                        begin  
                            v6743 = convert(TensorFlow.Tensor{Any}, v6743) 
                            begin  
                            end
                        end
                        begin  
                            v6744 = convert(TensorFlow.Tensor{Any}, v6744) 
                            begin  
                            end
                        end
                        begin  
                            (v6739, v6741, v6742, v6743, v6744) = tf.tf_promote(v6739, v6741, v6742, v6743, v6744)
                        end
                        begin  
                            (v6740,) = tf.tf_promote(v6740)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6736)
                        end
                        begin  
                            tf.add_input(desc, v6737)
                        end
                        begin  
                            tf.add_input(desc, v6738)
                        end
                        begin  
                            tf.add_input(desc, v6739)
                        end
                        begin  
                            tf.add_input(desc, v6740)
                        end
                        begin  
                            tf.add_input(desc, v6741)
                        end
                        begin  
                            tf.add_input(desc, v6742)
                        end
                        begin  
                            tf.add_input(desc, v6743)
                        end
                        begin  
                            tf.add_input(desc, v6744)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceSparseApplyFtrl") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     reader_reset(reader_handle)

Restore a Reader to its initial clean state.


"""
tf.@op function reader_reset(v6745; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderReset") 
                    begin  
                        begin  
                            v6745 = convert(TensorFlow.Tensor{Any}, v6745) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6745)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderReset") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     resize_nearest_neighbor(images, size; align_corners=false)

Resize `images` to `size` using nearest neighbor interpolation.


"""
tf.@op function resize_nearest_neighbor(v6746, v6747; name=nothing, T=nothing, align_corners=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResizeNearestNeighbor") 
                    begin  
                        begin  
                            v6746 = convert(TensorFlow.Tensor{Any}, v6746) 
                            begin  
                            end
                        end
                        begin  
                            v6747 = convert(TensorFlow.Tensor{Any}, v6747) 
                            begin  
                            end
                        end
                        begin  
                            (v6746,) = tf.tf_promote(v6746)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6746)
                        end
                        begin  
                            tf.add_input(desc, v6747)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if align_corners !== nothing 
                                desc["align_corners"] = Base.Bool(align_corners)
                            end
                        end
                    end
                end), name, "ResizeNearestNeighbor") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     size(input; out_type=Int32)

Returns the size of a tensor.

This operation returns an integer representing the number of elements in
`input`.

For example:

```prettyprint
# 't' is [[[1, 1,, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]]
size(t) ==> 12
```
"""
tf.@op function size(v6748; name=nothing, T=nothing, out_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Size") 
                    begin  
                        begin  
                            v6748 = convert(TensorFlow.Tensor{Any}, v6748) 
                            begin  
                            end
                        end
                        begin  
                            (v6748,) = tf.tf_promote(v6748)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6748)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                    end
                end), name, "Size") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     add_n(inputs)

Add all input tensors element wise.


"""
tf.@op function add_n(v6749; name=nothing, N=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AddN") 
                    begin  
                        begin  
                            v6749 = convert.(TensorFlow.Tensor{Any}, v6749) 
                            begin  
                            end
                        end
                        begin  
                            (v6749,) = tf.tf_promote(v6749)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6749)
                        end
                    end 
                    begin  
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "AddN") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_segment_sum(data, indices, segment_ids; Tidx=Int32)

Computes the sum along sparse segments of a tensor.

Read [the section on
Segmentation](../../api_docs/python/math_ops.md#segmentation) for an explanation
of segments.

Like `SegmentSum`, but `segment_ids` can have rank less than `data`'s first
dimension, selecting a subset of dimension 0, specified by `indices`.

For example:

```prettyprint
c = tf.constant([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]])

# Select two rows, one segment.
tf.sparse_segment_sum(c, tf.constant([0, 1]), tf.constant([0, 0]))
  ==> [[0 0 0 0]]

# Select two rows, two segment.
tf.sparse_segment_sum(c, tf.constant([0, 1]), tf.constant([0, 1]))
  ==> [[ 1  2  3  4]
       [-1 -2 -3 -4]]

# Select all rows, two segments.
tf.sparse_segment_sum(c, tf.constant([0, 1, 2]), tf.constant([0, 0, 1]))
  ==> [[0 0 0 0]
       [5 6 7 8]]

# Which is equivalent to:
tf.segment_sum(c, tf.constant([0, 0, 1]))
```
"""
tf.@op function sparse_segment_sum(v6750, v6751, v6752; name=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseSegmentSum") 
                    begin  
                        begin  
                            v6750 = convert(TensorFlow.Tensor{Any}, v6750) 
                            begin  
                            end
                        end
                        begin  
                            v6751 = convert(TensorFlow.Tensor{Int32}, v6751) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6752 = convert(TensorFlow.Tensor{Any}, v6752) 
                            begin  
                            end
                        end
                        begin  
                            (v6750,) = tf.tf_promote(v6750)
                        end
                        begin  
                            (v6751,) = tf.tf_promote(v6751)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6750)
                        end
                        begin  
                            tf.add_input(desc, v6751)
                        end
                        begin  
                            tf.add_input(desc, v6752)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "SparseSegmentSum") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_matrix_determinant(input)




"""
tf.@op function batch_matrix_determinant(v6753; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchMatrixDeterminant") 
                    begin  
                        begin  
                            v6753 = convert(TensorFlow.Tensor{Any}, v6753) 
                            begin  
                            end
                        end
                        begin  
                            (v6753,) = tf.tf_promote(v6753)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6753)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchMatrixDeterminant") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_matrix_diag(diagonal)




"""
tf.@op function batch_matrix_diag(v6754; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchMatrixDiag") 
                    begin  
                        begin  
                            v6754 = convert(TensorFlow.Tensor{Any}, v6754) 
                            begin  
                            end
                        end
                        begin  
                            (v6754,) = tf.tf_promote(v6754)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6754)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchMatrixDiag") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sum(input, reduction_indices; keep_dims=false, Tidx=Int32)

Computes the sum of elements across dimensions of a tensor.

Reduces `input` along the dimensions given in `reduction_indices`. Unless
`keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
`reduction_indices`. If `keep_dims` is true, the reduced dimensions are
retained with length 1.
"""
tf.@op function sum(v6755, v6756; name=nothing, keep_dims=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Sum") 
                    begin  
                        begin  
                            v6755 = convert(TensorFlow.Tensor{Any}, v6755) 
                            begin  
                            end
                        end
                        begin  
                            v6756 = convert(TensorFlow.Tensor{Int32}, v6756) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6755,) = tf.tf_promote(v6755)
                        end
                        begin  
                            (v6756,) = tf.tf_promote(v6756)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6755)
                        end
                        begin  
                            tf.add_input(desc, v6756)
                        end
                    end 
                    begin  
                        begin  
                            if keep_dims !== nothing 
                                desc["keep_dims"] = Base.Bool(keep_dims)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "Sum") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     less_equal(x, y)

Returns the truth value of (x <= y) element-wise.

*NOTE*: `LessEqual` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function less_equal(v6757, v6758; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LessEqual") 
                    begin  
                        begin  
                            v6757 = convert(TensorFlow.Tensor{Any}, v6757) 
                            begin  
                            end
                        end
                        begin  
                            v6758 = convert(TensorFlow.Tensor{Any}, v6758) 
                            begin  
                            end
                        end
                        begin  
                            (v6757, v6758) = tf.tf_promote(v6757, v6758)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6757)
                        end
                        begin  
                            tf.add_input(desc, v6758)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "LessEqual") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     is_inf(x)

Returns which elements of x are Inf.

@compatibility(numpy)
Equivalent to np.isinf
@end_compatibility
"""
tf.@op function is_inf(v6759; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("IsInf") 
                    begin  
                        begin  
                            v6759 = convert(TensorFlow.Tensor{Any}, v6759) 
                            begin  
                            end
                        end
                        begin  
                            (v6759,) = tf.tf_promote(v6759)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6759)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "IsInf") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_concat_v2(handle, flow_in; element_shape_except0=TensorShape[unknown])

Deprecated. Use TensorArrayConcatV3


"""
tf.@op function tensor_array_concat_v2(v6760, v6761; name=nothing, dtype=nothing, element_shape_except0=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayConcatV2") 
                    begin  
                        begin  
                            v6760 = convert(TensorFlow.Tensor{Any}, v6760) 
                            begin  
                            end
                        end
                        begin  
                            v6761 = convert(TensorFlow.Tensor{Any}, v6761) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6760)
                        end
                        begin  
                            tf.add_input(desc, v6761)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if element_shape_except0 !== nothing 
                                desc["element_shape_except0"] = Base.identity(element_shape_except0)
                            end
                        end
                    end
                end), name, "TensorArrayConcatV2") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     apply_gradient_descent(var, alpha, delta; use_locking=false)

Update '*var' by subtracting 'alpha' * 'delta' from it.


"""
tf.@op function apply_gradient_descent(v6762, v6763, v6764; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ApplyGradientDescent") 
                    begin  
                        begin  
                            v6762 = convert(TensorFlow.Tensor{Any}, v6762) 
                            begin  
                            end
                        end
                        begin  
                            v6763 = convert(TensorFlow.Tensor{Any}, v6763) 
                            begin  
                            end
                        end
                        begin  
                            v6764 = convert(TensorFlow.Tensor{Any}, v6764) 
                            begin  
                            end
                        end
                        begin  
                            (v6762, v6763, v6764) = tf.tf_promote(v6762, v6763, v6764)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6762)
                        end
                        begin  
                            tf.add_input(desc, v6763)
                        end
                        begin  
                            tf.add_input(desc, v6764)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ApplyGradientDescent") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_sparse_apply_adagrad(var, accum, lr, grad, indices; use_locking=false)

Update relevant entries in '*var' and '*accum' according to the adagrad scheme.

That is for rows we have grad for, we update var and accum as follows:
accum += grad * grad
var -= lr * grad * (1 / sqrt(accum))
"""
tf.@op function resource_sparse_apply_adagrad(v6765, v6766, v6767, v6768, v6769; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceSparseApplyAdagrad") 
                    begin  
                        begin  
                            v6765 = convert(TensorFlow.Tensor{Any}, v6765) 
                            begin  
                            end
                        end
                        begin  
                            v6766 = convert(TensorFlow.Tensor{Any}, v6766) 
                            begin  
                            end
                        end
                        begin  
                            v6767 = convert(TensorFlow.Tensor{Any}, v6767) 
                            begin  
                            end
                        end
                        begin  
                            v6768 = convert(TensorFlow.Tensor{Any}, v6768) 
                            begin  
                            end
                        end
                        begin  
                            v6769 = convert(TensorFlow.Tensor{Any}, v6769) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6767, v6768) = tf.tf_promote(v6767, v6768)
                        end
                        begin  
                            (v6769,) = tf.tf_promote(v6769)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6765)
                        end
                        begin  
                            tf.add_input(desc, v6766)
                        end
                        begin  
                            tf.add_input(desc, v6767)
                        end
                        begin  
                            tf.add_input(desc, v6768)
                        end
                        begin  
                            tf.add_input(desc, v6769)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceSparseApplyAdagrad") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     sparse_segment_sqrt_n(data, indices, segment_ids; Tidx=Int32)

Computes the sum along sparse segments of a tensor divided by the sqrt of N.

N is the size of the segment being reduced.

Read [the section on
Segmentation](../../api_docs/python/math_ops.md#segmentation) for an explanation
of segments.
"""
tf.@op function sparse_segment_sqrt_n(v6770, v6771, v6772; name=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseSegmentSqrtN") 
                    begin  
                        begin  
                            v6770 = convert(TensorFlow.Tensor{Any}, v6770) 
                            begin  
                            end
                        end
                        begin  
                            v6771 = convert(TensorFlow.Tensor{Int32}, v6771) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6772 = convert(TensorFlow.Tensor{Any}, v6772) 
                            begin  
                            end
                        end
                        begin  
                            (v6770,) = tf.tf_promote(v6770)
                        end
                        begin  
                            (v6771,) = tf.tf_promote(v6771)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6770)
                        end
                        begin  
                            tf.add_input(desc, v6771)
                        end
                        begin  
                            tf.add_input(desc, v6772)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "SparseSegmentSqrtN") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fixed_unigram_candidate_sampler(true_classes; vocab_file=, distortion=nothing, num_reserved_ids=0, num_shards=1, shard=0, unigrams=Int64[], seed=0, seed2=0)

Generates labels for candidate sampling with a learned unigram distribution.

A unigram sampler could use a fixed unigram distribution read from a
file or passed in as an in-memory array instead of building up the distribution
from data on the fly. There is also an option to skew the distribution by
applying a distortion power to the weights.

The vocabulary file should be in CSV-like format, with the last field
being the weight associated with the word.

For each batch, this op picks a single set of sampled candidate labels.

The advantages of sampling candidates per-batch are simplicity and the
possibility of efficient dense matrix multiplication. The disadvantage is that
the sampled candidates must be chosen independently of the context and of the
true labels.
"""
tf.@op function fixed_unigram_candidate_sampler(v6773; name=nothing, num_true=nothing, num_sampled=nothing, unique=nothing, range_max=nothing, vocab_file=nothing, distortion=nothing, num_reserved_ids=nothing, num_shards=nothing, shard=nothing, unigrams=nothing, seed=nothing, seed2=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FixedUnigramCandidateSampler") 
                    begin  
                        begin  
                            v6773 = convert(TensorFlow.Tensor{Any}, v6773) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6773)
                        end
                    end 
                    begin  
                        begin  
                            if num_true !== nothing 
                                desc["num_true"] = Base.Int(num_true)
                            end
                        end
                        begin  
                            if num_sampled !== nothing 
                                desc["num_sampled"] = Base.Int(num_sampled)
                            end
                        end
                        begin  
                            if unique !== nothing 
                                desc["unique"] = Base.Bool(unique)
                            end
                        end
                        begin  
                            if range_max !== nothing 
                                desc["range_max"] = Base.Int(range_max)
                            end
                        end
                        begin  
                            if vocab_file !== nothing 
                                desc["vocab_file"] = Base.String(vocab_file)
                            end
                        end
                        begin  
                            if distortion !== nothing 
                                desc["distortion"] = Base.identity(distortion)
                            end
                        end
                        begin  
                            if num_reserved_ids !== nothing 
                                desc["num_reserved_ids"] = Base.Int(num_reserved_ids)
                            end
                        end
                        begin  
                            if num_shards !== nothing 
                                desc["num_shards"] = Base.Int(num_shards)
                            end
                        end
                        begin  
                            if shard !== nothing 
                                desc["shard"] = Base.Int(shard)
                            end
                        end
                        begin  
                            if unigrams !== nothing 
                                desc["unigrams"] = Base.identity.unigrams
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                    end
                end), name, "FixedUnigramCandidateSampler") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     record_input(; file_random_seed=301, file_shuffle_shift_ratio=nothing, file_buffer_size=10000, file_parallelism=16, batch_size=32)

Emits randomized records.


"""
tf.@op function record_input(; name=nothing, file_pattern=nothing, file_random_seed=nothing, file_shuffle_shift_ratio=nothing, file_buffer_size=nothing, file_parallelism=nothing, batch_size=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RecordInput") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if file_pattern !== nothing 
                                desc["file_pattern"] = Base.String(file_pattern)
                            end
                        end
                        begin  
                            if file_random_seed !== nothing 
                                desc["file_random_seed"] = Base.Int(file_random_seed)
                            end
                        end
                        begin  
                            if file_shuffle_shift_ratio !== nothing 
                                desc["file_shuffle_shift_ratio"] = Base.identity(file_shuffle_shift_ratio)
                            end
                        end
                        begin  
                            if file_buffer_size !== nothing 
                                desc["file_buffer_size"] = Base.Int(file_buffer_size)
                            end
                        end
                        begin  
                            if file_parallelism !== nothing 
                                desc["file_parallelism"] = Base.Int(file_parallelism)
                            end
                        end
                        begin  
                            if batch_size !== nothing 
                                desc["batch_size"] = Base.Int(batch_size)
                            end
                        end
                    end
                end), name, "RecordInput") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     max(input, reduction_indices; keep_dims=false, Tidx=Int32)

Computes the maximum of elements across dimensions of a tensor.

Reduces `input` along the dimensions given in `reduction_indices`. Unless
`keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
`reduction_indices`. If `keep_dims` is true, the reduced dimensions are
retained with length 1.
"""
tf.@op function max(v6774, v6775; name=nothing, keep_dims=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Max") 
                    begin  
                        begin  
                            v6774 = convert(TensorFlow.Tensor{Any}, v6774) 
                            begin  
                            end
                        end
                        begin  
                            v6775 = convert(TensorFlow.Tensor{Int32}, v6775) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6774,) = tf.tf_promote(v6774)
                        end
                        begin  
                            (v6775,) = tf.tf_promote(v6775)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6774)
                        end
                        begin  
                            tf.add_input(desc, v6775)
                        end
                    end 
                    begin  
                        begin  
                            if keep_dims !== nothing 
                                desc["keep_dims"] = Base.Bool(keep_dims)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "Max") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     queue_dequeue_up_to_v2(handle, n; timeout_ms=-1)

Dequeues n tuples of one or more tensors from the given queue.

This operation is not supported by all queues.  If a queue does not support
DequeueUpTo, then an Unimplemented error is returned.

If the queue is closed and there are more than 0 but less than n elements
remaining, then instead of returning an OutOfRange error like
QueueDequeueMany, less than `n` elements are returned immediately.  If the queue
is closed and there are 0 elements left in the queue, then an OutOfRange
error is returned just like in QueueDequeueMany.  Otherwise the behavior
is identical to QueueDequeueMany:

This operation concatenates queue-element component tensors along the
0th dimension to make a single component tensor.  All of the components
in the dequeued tuple will have size n in the 0th dimension.

This operation has k outputs, where k is the number of components in
the tuples stored in the given queue, and output i is the ith
component of the dequeued tuple.
"""
tf.@op function queue_dequeue_up_to_v2(v6776, v6777; name=nothing, component_types=nothing, timeout_ms=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueDequeueUpToV2") 
                    begin  
                        begin  
                            v6776 = convert(TensorFlow.Tensor{Any}, v6776) 
                            begin  
                            end
                        end
                        begin  
                            v6777 = convert(TensorFlow.Tensor{Any}, v6777) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6776)
                        end
                        begin  
                            tf.add_input(desc, v6777)
                        end
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if timeout_ms !== nothing 
                                desc["timeout_ms"] = Base.Int(timeout_ms)
                            end
                        end
                    end
                end), name, "QueueDequeueUpToV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     ifft_2d(input)

Compute the inverse 2-dimensional discrete Fourier Transform over the inner-most

2 dimensions of `input`.
"""
tf.@op function ifft_2d(v6778; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("IFFT2D") 
                    begin  
                        begin  
                            v6778 = convert(TensorFlow.Tensor{Any}, v6778) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6778)
                        end
                    end 
                    begin  
                    end
                end), name, "IFFT2D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_mul(ref, indices, updates; use_locking=false)

Multiplies sparse updates into a variable reference.

This operation computes

    # Scalar indices
    ref[indices, ...] *= updates[...]

    # Vector indices (for each i)
    ref[indices[i], ...] *= updates[i, ...]

    # High rank indices (for each i, ..., j)
    ref[indices[i, ..., j], ...] *= updates[i, ..., j, ...]

This operation outputs `ref` after the update is done.
This makes it easier to chain operations that need to use the reset value.

Duplicate entries are handled correctly: if multiple `indices` reference
the same location, their contributions multiply.

Requires `updates.shape = indices.shape + ref.shape[1:]`.
"""
tf.@op function scatter_mul(v6779, v6780, v6781; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ScatterMul") 
                    begin  
                        begin  
                            v6779 = convert(TensorFlow.Tensor{Any}, v6779) 
                            begin  
                            end
                        end
                        begin  
                            v6780 = convert(TensorFlow.Tensor{Any}, v6780) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6781 = convert(TensorFlow.Tensor{Any}, v6781) 
                            begin  
                            end
                        end
                        begin  
                            (v6779, v6781) = tf.tf_promote(v6779, v6781)
                        end
                        begin  
                            (v6780,) = tf.tf_promote(v6780)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6779)
                        end
                        begin  
                            tf.add_input(desc, v6780)
                        end
                        begin  
                            tf.add_input(desc, v6781)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ScatterMul") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_concat(indices, values, shapes)

Concatenates a list of `SparseTensor` along the specified dimension.

Concatenation is with respect to the dense versions of these sparse tensors.
It is assumed that each input is a `SparseTensor` whose elements are ordered
along increasing dimension number.

All inputs' shapes must match, except for the concat dimension.  The
`indices`, `values`, and `shapes` lists must have the same length.

The output shape is identical to the inputs', except along the concat
dimension, where it is the sum of the inputs' sizes along that dimension.

The output elements will be resorted to preserve the sort order along
increasing dimension number.

This op runs in `O(M log M)` time, where `M` is the total number of non-empty
values across all inputs. This is due to the need for an internal sort in
order to concatenate efficiently across an arbitrary dimension.

For example, if `concat_dim = 1` and the inputs are

    sp_inputs[0]: shape = [2, 3]
    [0, 2]: "a"
    [1, 0]: "b"
    [1, 1]: "c"

    sp_inputs[1]: shape = [2, 4]
    [0, 1]: "d"
    [0, 2]: "e"

then the output will be

    shape = [2, 7]
    [0, 2]: "a"
    [0, 4]: "d"
    [0, 5]: "e"
    [1, 0]: "b"
    [1, 1]: "c"

Graphically this is equivalent to doing

    [    a] concat [  d e  ] = [    a   d e  ]
    [b c  ]        [       ]   [b c          ]
"""
tf.@op function sparse_concat(v6782, v6783, v6784; name=nothing, concat_dim=nothing, N=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseConcat") 
                    begin  
                        begin  
                            v6782 = convert.(TensorFlow.Tensor{Any}, v6782) 
                            begin  
                            end
                        end
                        begin  
                            v6783 = convert.(TensorFlow.Tensor{Any}, v6783) 
                            begin  
                            end
                        end
                        begin  
                            v6784 = convert.(TensorFlow.Tensor{Any}, v6784) 
                            begin  
                            end
                        end
                        begin  
                            (v6783,) = tf.tf_promote(v6783)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6782)
                        end
                        begin  
                            tf.add_input(desc, v6783)
                        end
                        begin  
                            tf.add_input(desc, v6784)
                        end
                    end 
                    begin  
                        begin  
                            if concat_dim !== nothing 
                                desc["concat_dim"] = Base.Int(concat_dim)
                            end
                        end
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseConcat") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     decode_jpeg(contents; channels=0, ratio=1, fancy_upscaling=true, try_recover_truncated=false, acceptable_fraction=nothing, dct_method=)

Decode a JPEG-encoded image to a uint8 tensor.

The attr `channels` indicates the desired number of color channels for the
decoded image.

Accepted values are:

*   0: Use the number of channels in the JPEG-encoded image.
*   1: output a grayscale image.
*   3: output an RGB image.

If needed, the JPEG-encoded image is transformed to match the requested number
of color channels.

The attr `ratio` allows downscaling the image by an integer factor during
decoding.  Allowed values are: 1, 2, 4, and 8.  This is much faster than
downscaling the image later.
"""
tf.@op function decode_jpeg(v6785; name=nothing, channels=nothing, ratio=nothing, fancy_upscaling=nothing, try_recover_truncated=nothing, acceptable_fraction=nothing, dct_method=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DecodeJpeg") 
                    begin  
                        begin  
                            v6785 = convert(TensorFlow.Tensor{Any}, v6785) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6785)
                        end
                    end 
                    begin  
                        begin  
                            if channels !== nothing 
                                desc["channels"] = Base.Int(channels)
                            end
                        end
                        begin  
                            if ratio !== nothing 
                                desc["ratio"] = Base.Int(ratio)
                            end
                        end
                        begin  
                            if fancy_upscaling !== nothing 
                                desc["fancy_upscaling"] = Base.Bool(fancy_upscaling)
                            end
                        end
                        begin  
                            if try_recover_truncated !== nothing 
                                desc["try_recover_truncated"] = Base.Bool(try_recover_truncated)
                            end
                        end
                        begin  
                            if acceptable_fraction !== nothing 
                                desc["acceptable_fraction"] = Base.identity(acceptable_fraction)
                            end
                        end
                        begin  
                            if dct_method !== nothing 
                                desc["dct_method"] = Base.String(dct_method)
                            end
                        end
                    end
                end), name, "DecodeJpeg") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     histogram_summary(tag, values; T=Float32)

Outputs a `Summary` protocol buffer with a histogram.

The generated
[`Summary`](https://www.tensorflow.org/code/tensorflow/core/framework/summary.proto)
has one summary value containing a histogram for `values`.

This op reports an `InvalidArgument` error if any value is not finite.
"""
tf.@op function histogram_summary(v6786, v6787; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("HistogramSummary") 
                    begin  
                        begin  
                            v6786 = convert(TensorFlow.Tensor{Any}, v6786) 
                            begin  
                            end
                        end
                        begin  
                            v6787 = convert(TensorFlow.Tensor{Float32}, v6787) 
                            begin  
                            end
                        end
                        begin  
                            (v6787,) = tf.tf_promote(v6787)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6786)
                        end
                        begin  
                            tf.add_input(desc, v6787)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "HistogramSummary") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     random_shuffle_queue_v2(; shapes=Int64[], capacity=-1, min_after_dequeue=0, seed=0, seed2=0, container=, shared_name=)

A queue that randomizes the order of elements.


"""
tf.@op function random_shuffle_queue_v2(; name=nothing, component_types=nothing, shapes=nothing, capacity=nothing, min_after_dequeue=nothing, seed=nothing, seed2=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RandomShuffleQueueV2") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if shapes !== nothing 
                                desc["shapes"] = Base.identity.shapes
                            end
                        end
                        begin  
                            if capacity !== nothing 
                                desc["capacity"] = Base.Int(capacity)
                            end
                        end
                        begin  
                            if min_after_dequeue !== nothing 
                                desc["min_after_dequeue"] = Base.Int(min_after_dequeue)
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "RandomShuffleQueueV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     pad(input, paddings; Tpaddings=Int32)

Pads a tensor with zeros.

This operation pads a `input` with zeros according to the `paddings` you
specify. `paddings` is an integer tensor with shape `[Dn, 2]`, where n is the
rank of `input`. For each dimension D of `input`, `paddings[D, 0]` indicates
how many zeros to add before the contents of `input` in that dimension, and
`paddings[D, 1]` indicates how many zeros to add after the contents of `input`
in that dimension.

The padded size of each dimension D of the output is:

`paddings(D, 0) + input.dim_size(D) + paddings(D, 1)`

For example:

```prettyprint
# 't' is [[1, 1], [2, 2]]
# 'paddings' is [[1, 1], [2, 2]]
# rank of 't' is 2
pad(t, paddings) ==> [[0, 0, 0, 0, 0, 0]
                      [0, 0, 1, 1, 0, 0]
                      [0, 0, 2, 2, 0, 0]
                      [0, 0, 0, 0, 0, 0]]
```
"""
tf.@op function pad(v6788, v6789; name=nothing, T=nothing, Tpaddings=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Pad") 
                    begin  
                        begin  
                            v6788 = convert(TensorFlow.Tensor{Any}, v6788) 
                            begin  
                            end
                        end
                        begin  
                            v6789 = convert(TensorFlow.Tensor{Int32}, v6789) 
                            begin  
                            end
                        end
                        begin  
                            (v6788,) = tf.tf_promote(v6788)
                        end
                        begin  
                            (v6789,) = tf.tf_promote(v6789)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6788)
                        end
                        begin  
                            tf.add_input(desc, v6789)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tpaddings !== nothing 
                                desc["Tpaddings"] = Base.identity(Tpaddings)
                            end
                        end
                    end
                end), name, "Pad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     add_many_sparse_to_tensors_map(sparse_indices, sparse_values, sparse_shape; container=, shared_name=)

Add an `N`-minibatch `SparseTensor` to a `SparseTensorsMap`, return `N` handles.

A `SparseTensor` of rank `R` is represented by three tensors: `sparse_indices`,
`sparse_values`, and `sparse_shape`, where

```sparse_indices.shape[1] == sparse_shape.shape[0] == R```

An `N`-minibatch of `SparseTensor` objects is represented as a `SparseTensor`
having a first `sparse_indices` column taking values between `[0, N)`, where
the minibatch size `N == sparse_shape[0]`.

The input `SparseTensor` must have rank `R` greater than 1, and the first
dimension is treated as the minibatch dimension.  Elements of the `SparseTensor`
must be sorted in increasing order of this first dimension.  The stored
`SparseTensor` objects pointed to by each row of the output `sparse_handles`
will have rank `R-1`.

The `SparseTensor` values can then be read out as part of a minibatch by passing
the given keys as vector elements to `TakeManySparseFromTensorsMap`.  To ensure
the correct `SparseTensorsMap` is accessed, ensure that the same
`container` and `shared_name` are passed to that Op.  If no `shared_name`
is provided here, instead use the *name* of the Operation created by calling
`AddManySparseToTensorsMap` as the `shared_name` passed to
`TakeManySparseFromTensorsMap`.  Ensure the Operations are colocated.
"""
tf.@op function add_many_sparse_to_tensors_map(v6790, v6791, v6792; name=nothing, T=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AddManySparseToTensorsMap") 
                    begin  
                        begin  
                            v6790 = convert(TensorFlow.Tensor{Any}, v6790) 
                            begin  
                            end
                        end
                        begin  
                            v6791 = convert(TensorFlow.Tensor{Any}, v6791) 
                            begin  
                            end
                        end
                        begin  
                            v6792 = convert(TensorFlow.Tensor{Any}, v6792) 
                            begin  
                            end
                        end
                        begin  
                            (v6791,) = tf.tf_promote(v6791)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6790)
                        end
                        begin  
                            tf.add_input(desc, v6791)
                        end
                        begin  
                            tf.add_input(desc, v6792)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "AddManySparseToTensorsMap") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_reorder(input_indices, input_values, input_shape)

Reorders a SparseTensor into the canonical, row-major ordering.

Note that by convention, all sparse ops preserve the canonical ordering along
increasing dimension number. The only time ordering can be violated is during
manual manipulation of the indices and values vectors to add entries.

Reordering does not affect the shape of the SparseTensor.

If the tensor has rank `R` and `N` non-empty values, `input_indices` has
shape `[N, R]`, input_values has length `N`, and input_shape has length `R`.
"""
tf.@op function sparse_reorder(v6793, v6794, v6795; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseReorder") 
                    begin  
                        begin  
                            v6793 = convert(TensorFlow.Tensor{Any}, v6793) 
                            begin  
                            end
                        end
                        begin  
                            v6794 = convert(TensorFlow.Tensor{Any}, v6794) 
                            begin  
                            end
                        end
                        begin  
                            v6795 = convert(TensorFlow.Tensor{Any}, v6795) 
                            begin  
                            end
                        end
                        begin  
                            (v6794,) = tf.tf_promote(v6794)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6793)
                        end
                        begin  
                            tf.add_input(desc, v6794)
                        end
                        begin  
                            tf.add_input(desc, v6795)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseReorder") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     mul(x, y)

Returns x * y element-wise.

*NOTE*: `Mul` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function mul(v6796, v6797; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Mul") 
                    begin  
                        begin  
                            v6796 = convert(TensorFlow.Tensor{Any}, v6796) 
                            begin  
                            end
                        end
                        begin  
                            v6797 = convert(TensorFlow.Tensor{Any}, v6797) 
                            begin  
                            end
                        end
                        begin  
                            (v6796, v6797) = tf.tf_promote(v6796, v6797)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6796)
                        end
                        begin  
                            tf.add_input(desc, v6797)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Mul") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     segment_sum(data, segment_ids)

Computes the sum along segments of a tensor.

Read [the section on Segmentation](../../api_docs/python/math_ops.md#segmentation)
for an explanation of segments.

Computes a tensor such that
\\(output_i = \sum_j data_j\\) where sum is over `j` such
that `segment_ids[j] == i`.

If the sum is empty for a given segment ID `i`, `output[i] = 0`.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/SegmentSum.png" alt>
</div>
"""
tf.@op function segment_sum(v6798, v6799; name=nothing, T=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SegmentSum") 
                    begin  
                        begin  
                            v6798 = convert(TensorFlow.Tensor{Any}, v6798) 
                            begin  
                            end
                        end
                        begin  
                            v6799 = convert(TensorFlow.Tensor{Any}, v6799) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6798,) = tf.tf_promote(v6798)
                        end
                        begin  
                            (v6799,) = tf.tf_promote(v6799)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6798)
                        end
                        begin  
                            tf.add_input(desc, v6799)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "SegmentSum") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     exp(x)

Computes exponential of x element-wise.  \\(y = e^x\\).


"""
tf.@op function exp(v6800; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Exp") 
                    begin  
                        begin  
                            v6800 = convert(TensorFlow.Tensor{Any}, v6800) 
                            begin  
                            end
                        end
                        begin  
                            (v6800,) = tf.tf_promote(v6800)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6800)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Exp") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     softmax_cross_entropy_with_logits(features, labels)

Computes softmax cross entropy cost and gradients to backpropagate.

Inputs are the logits, not probabilities.
"""
tf.@op function softmax_cross_entropy_with_logits(v6801, v6802; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SoftmaxCrossEntropyWithLogits") 
                    begin  
                        begin  
                            v6801 = convert(TensorFlow.Tensor{Any}, v6801) 
                            begin  
                            end
                        end
                        begin  
                            v6802 = convert(TensorFlow.Tensor{Any}, v6802) 
                            begin  
                            end
                        end
                        begin  
                            (v6801, v6802) = tf.tf_promote(v6801, v6802)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6801)
                        end
                        begin  
                            tf.add_input(desc, v6802)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SoftmaxCrossEntropyWithLogits") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     queue_enqueue_many_v2(handle, components; timeout_ms=-1)

Enqueues zero or more tuples of one or more tensors in the given queue.

This operation slices each component tensor along the 0th dimension to
make multiple queue elements. All of the tuple components must have the
same size in the 0th dimension.

The components input has k elements, which correspond to the components of
tuples stored in the given queue.

N.B. If the queue is full, this operation will block until the given
elements have been enqueued (or 'timeout_ms' elapses, if specified).
"""
tf.@op function queue_enqueue_many_v2(v6803, v6804; name=nothing, Tcomponents=nothing, timeout_ms=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueEnqueueManyV2") 
                    begin  
                        begin  
                            v6803 = convert(TensorFlow.Tensor{Any}, v6803) 
                            begin  
                            end
                        end
                        begin  
                            v6804 = convert.(TensorFlow.Tensor{Any}, v6804) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6803)
                        end
                        begin  
                            tf.add_input(desc, v6804)
                        end
                    end 
                    begin  
                        begin  
                            if Tcomponents !== nothing 
                                desc["Tcomponents"] = Base.identity.Tcomponents
                            end
                        end
                        begin  
                            if timeout_ms !== nothing 
                                desc["timeout_ms"] = Base.Int(timeout_ms)
                            end
                        end
                    end
                end), name, "QueueEnqueueManyV2") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     batch_matrix_set_diag(input, diagonal)




"""
tf.@op function batch_matrix_set_diag(v6805, v6806; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchMatrixSetDiag") 
                    begin  
                        begin  
                            v6805 = convert(TensorFlow.Tensor{Any}, v6805) 
                            begin  
                            end
                        end
                        begin  
                            v6806 = convert(TensorFlow.Tensor{Any}, v6806) 
                            begin  
                            end
                        end
                        begin  
                            (v6805, v6806) = tf.tf_promote(v6805, v6806)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6805)
                        end
                        begin  
                            tf.add_input(desc, v6806)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchMatrixSetDiag") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     get_session_handle_v2(value)

Store the input tensor in the state of the current session.


"""
tf.@op function get_session_handle_v2(v6807; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("GetSessionHandleV2") 
                    begin  
                        begin  
                            v6807 = convert(TensorFlow.Tensor{Any}, v6807) 
                            begin  
                            end
                        end
                        begin  
                            (v6807,) = tf.tf_promote(v6807)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6807)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "GetSessionHandleV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_sparse_apply_centered_rmsp(var, mg, ms, mom, lr, rho, momentum, epsilon, grad, indices; use_locking=false)

Update '*var' according to the centered RMSProp algorithm.

The centered RMSProp algorithm uses an estimate of the centered second moment
(i.e., the variance) for normalization, as opposed to regular RMSProp, which
uses the (uncentered) second moment. This often helps with training, but is
slightly more expensive in terms of computation and memory.

Note that in dense implementation of this algorithm, mg, ms, and mom will
update even if the grad is zero, but in this sparse implementation, mg, ms,
and mom will not update in iterations during which the grad is zero.

mean_square = decay * mean_square + (1-decay) * gradient ** 2
mean_grad = decay * mean_grad + (1-decay) * gradient
Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)

ms <- rho * ms_{t-1} + (1-rho) * grad * grad
mom <- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
var <- var - mom
"""
tf.@op function resource_sparse_apply_centered_rmsp(v6808, v6809, v6810, v6811, v6812, v6813, v6814, v6815, v6816, v6817; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceSparseApplyCenteredRMSProp") 
                    begin  
                        begin  
                            v6808 = convert(TensorFlow.Tensor{Any}, v6808) 
                            begin  
                            end
                        end
                        begin  
                            v6809 = convert(TensorFlow.Tensor{Any}, v6809) 
                            begin  
                            end
                        end
                        begin  
                            v6810 = convert(TensorFlow.Tensor{Any}, v6810) 
                            begin  
                            end
                        end
                        begin  
                            v6811 = convert(TensorFlow.Tensor{Any}, v6811) 
                            begin  
                            end
                        end
                        begin  
                            v6812 = convert(TensorFlow.Tensor{Any}, v6812) 
                            begin  
                            end
                        end
                        begin  
                            v6813 = convert(TensorFlow.Tensor{Any}, v6813) 
                            begin  
                            end
                        end
                        begin  
                            v6814 = convert(TensorFlow.Tensor{Any}, v6814) 
                            begin  
                            end
                        end
                        begin  
                            v6815 = convert(TensorFlow.Tensor{Any}, v6815) 
                            begin  
                            end
                        end
                        begin  
                            v6816 = convert(TensorFlow.Tensor{Any}, v6816) 
                            begin  
                            end
                        end
                        begin  
                            v6817 = convert(TensorFlow.Tensor{Any}, v6817) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6812, v6813, v6814, v6815, v6816) = tf.tf_promote(v6812, v6813, v6814, v6815, v6816)
                        end
                        begin  
                            (v6817,) = tf.tf_promote(v6817)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6808)
                        end
                        begin  
                            tf.add_input(desc, v6809)
                        end
                        begin  
                            tf.add_input(desc, v6810)
                        end
                        begin  
                            tf.add_input(desc, v6811)
                        end
                        begin  
                            tf.add_input(desc, v6812)
                        end
                        begin  
                            tf.add_input(desc, v6813)
                        end
                        begin  
                            tf.add_input(desc, v6814)
                        end
                        begin  
                            tf.add_input(desc, v6815)
                        end
                        begin  
                            tf.add_input(desc, v6816)
                        end
                        begin  
                            tf.add_input(desc, v6817)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceSparseApplyCenteredRMSProp") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     stack_pop(handle)

Pop the element at the top of the stack.


"""
tf.@op function stack_pop(v6818; name=nothing, elem_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StackPop") 
                    begin  
                        begin  
                            v6818 = convert(TensorFlow.Tensor{Any}, v6818) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6818)
                        end
                    end 
                    begin  
                        begin  
                            if elem_type !== nothing 
                                desc["elem_type"] = Base.identity(elem_type)
                            end
                        end
                    end
                end), name, "StackPop") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     relu_grad(gradients, features)

Computes rectified linear gradients for a Relu operation.


"""
tf.@op function relu_grad(v6819, v6820; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReluGrad") 
                    begin  
                        begin  
                            v6819 = convert(TensorFlow.Tensor{Any}, v6819) 
                            begin  
                            end
                        end
                        begin  
                            v6820 = convert(TensorFlow.Tensor{Any}, v6820) 
                            begin  
                            end
                        end
                        begin  
                            (v6819, v6820) = tf.tf_promote(v6819, v6820)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6819)
                        end
                        begin  
                            tf.add_input(desc, v6820)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "ReluGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_sparse_apply_rmsp(var, ms, mom, lr, rho, momentum, epsilon, grad, indices; use_locking=false)

Update '*var' according to the RMSProp algorithm.

Note that in dense implementation of this algorithm, ms and mom will
update even if the grad is zero, but in this sparse implementation, ms
and mom will not update in iterations during which the grad is zero.

mean_square = decay * mean_square + (1-decay) * gradient ** 2
Delta = learning_rate * gradient / sqrt(mean_square + epsilon)

ms <- rho * ms_{t-1} + (1-rho) * grad * grad
mom <- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
var <- var - mom
"""
tf.@op function resource_sparse_apply_rmsp(v6821, v6822, v6823, v6824, v6825, v6826, v6827, v6828, v6829; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceSparseApplyRMSProp") 
                    begin  
                        begin  
                            v6821 = convert(TensorFlow.Tensor{Any}, v6821) 
                            begin  
                            end
                        end
                        begin  
                            v6822 = convert(TensorFlow.Tensor{Any}, v6822) 
                            begin  
                            end
                        end
                        begin  
                            v6823 = convert(TensorFlow.Tensor{Any}, v6823) 
                            begin  
                            end
                        end
                        begin  
                            v6824 = convert(TensorFlow.Tensor{Any}, v6824) 
                            begin  
                            end
                        end
                        begin  
                            v6825 = convert(TensorFlow.Tensor{Any}, v6825) 
                            begin  
                            end
                        end
                        begin  
                            v6826 = convert(TensorFlow.Tensor{Any}, v6826) 
                            begin  
                            end
                        end
                        begin  
                            v6827 = convert(TensorFlow.Tensor{Any}, v6827) 
                            begin  
                            end
                        end
                        begin  
                            v6828 = convert(TensorFlow.Tensor{Any}, v6828) 
                            begin  
                            end
                        end
                        begin  
                            v6829 = convert(TensorFlow.Tensor{Any}, v6829) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6824, v6825, v6826, v6827, v6828) = tf.tf_promote(v6824, v6825, v6826, v6827, v6828)
                        end
                        begin  
                            (v6829,) = tf.tf_promote(v6829)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6821)
                        end
                        begin  
                            tf.add_input(desc, v6822)
                        end
                        begin  
                            tf.add_input(desc, v6823)
                        end
                        begin  
                            tf.add_input(desc, v6824)
                        end
                        begin  
                            tf.add_input(desc, v6825)
                        end
                        begin  
                            tf.add_input(desc, v6826)
                        end
                        begin  
                            tf.add_input(desc, v6827)
                        end
                        begin  
                            tf.add_input(desc, v6828)
                        end
                        begin  
                            tf.add_input(desc, v6829)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceSparseApplyRMSProp") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     parse_example(serialized, names, sparse_keys, dense_keys, dense_defaults)

Transforms a vector of brain.Example protos (as strings) into typed tensors.


"""
tf.@op function parse_example(v6830, v6831, v6832, v6833, v6834; name=nothing, Nsparse=nothing, Ndense=nothing, sparse_types=nothing, Tdense=nothing, dense_shapes=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ParseExample") 
                    begin  
                        begin  
                            v6830 = convert(TensorFlow.Tensor{Any}, v6830) 
                            begin  
                            end
                        end
                        begin  
                            v6831 = convert(TensorFlow.Tensor{Any}, v6831) 
                            begin  
                            end
                        end
                        begin  
                            v6832 = convert.(TensorFlow.Tensor{Any}, v6832) 
                            begin  
                            end
                        end
                        begin  
                            v6833 = convert.(TensorFlow.Tensor{Any}, v6833) 
                            begin  
                            end
                        end
                        begin  
                            v6834 = convert.(TensorFlow.Tensor{Any}, v6834) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6830)
                        end
                        begin  
                            tf.add_input(desc, v6831)
                        end
                        begin  
                            tf.add_input(desc, v6832)
                        end
                        begin  
                            tf.add_input(desc, v6833)
                        end
                        begin  
                            tf.add_input(desc, v6834)
                        end
                    end 
                    begin  
                        begin  
                            if Nsparse !== nothing 
                                desc["Nsparse"] = Base.Int(Nsparse)
                            end
                        end
                        begin  
                            if Ndense !== nothing 
                                desc["Ndense"] = Base.Int(Ndense)
                            end
                        end
                        begin  
                            if sparse_types !== nothing 
                                desc["sparse_types"] = Base.identity.sparse_types
                            end
                        end
                        begin  
                            if Tdense !== nothing 
                                desc["Tdense"] = Base.identity.Tdense
                            end
                        end
                        begin  
                            if dense_shapes !== nothing 
                                desc["dense_shapes"] = Base.identity.dense_shapes
                            end
                        end
                    end
                end), name, "ParseExample") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3), tf.Tensor(op, 4))
        end
    end

"""
     random_crop(image, size; seed=0, seed2=0)

Randomly crop `image`.

`size` is a 1-D int64 tensor with 2 elements representing the crop height and
width.  The values must be non negative.

This Op picks a random location in `image` and crops a `height` by `width`
rectangle from that location.  The random location is picked so the cropped
area will fit inside the original image.
"""
tf.@op function random_crop(v6835, v6836; name=nothing, T=nothing, seed=nothing, seed2=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RandomCrop") 
                    begin  
                        begin  
                            v6835 = convert(TensorFlow.Tensor{Any}, v6835) 
                            begin  
                            end
                        end
                        begin  
                            v6836 = convert(TensorFlow.Tensor{Any}, v6836) 
                            begin  
                            end
                        end
                        begin  
                            (v6835,) = tf.tf_promote(v6835)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6835)
                        end
                        begin  
                            tf.add_input(desc, v6836)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                    end
                end), name, "RandomCrop") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_apply_proximal_gradient_descent(var, alpha, l1, l2, grad, indices; use_locking=false)

Sparse update '*var' as FOBOS algorithm with fixed learning rate.

That is for rows we have grad for, we update var as follows:
prox_v = var - alpha * grad
var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}
"""
tf.@op function sparse_apply_proximal_gradient_descent(v6837, v6838, v6839, v6840, v6841, v6842; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseApplyProximalGradientDescent") 
                    begin  
                        begin  
                            v6837 = convert(TensorFlow.Tensor{Any}, v6837) 
                            begin  
                            end
                        end
                        begin  
                            v6838 = convert(TensorFlow.Tensor{Any}, v6838) 
                            begin  
                            end
                        end
                        begin  
                            v6839 = convert(TensorFlow.Tensor{Any}, v6839) 
                            begin  
                            end
                        end
                        begin  
                            v6840 = convert(TensorFlow.Tensor{Any}, v6840) 
                            begin  
                            end
                        end
                        begin  
                            v6841 = convert(TensorFlow.Tensor{Any}, v6841) 
                            begin  
                            end
                        end
                        begin  
                            v6842 = convert(TensorFlow.Tensor{Any}, v6842) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6837, v6838, v6839, v6840, v6841) = tf.tf_promote(v6837, v6838, v6839, v6840, v6841)
                        end
                        begin  
                            (v6842,) = tf.tf_promote(v6842)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6837)
                        end
                        begin  
                            tf.add_input(desc, v6838)
                        end
                        begin  
                            tf.add_input(desc, v6839)
                        end
                        begin  
                            tf.add_input(desc, v6840)
                        end
                        begin  
                            tf.add_input(desc, v6841)
                        end
                        begin  
                            tf.add_input(desc, v6842)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "SparseApplyProximalGradientDescent") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     queue_enqueue_v2(handle, components; timeout_ms=-1)

Enqueues a tuple of one or more tensors in the given queue.

The components input has k elements, which correspond to the components of
tuples stored in the given queue.

N.B. If the queue is full, this operation will block until the given
element has been enqueued (or 'timeout_ms' elapses, if specified).
"""
tf.@op function queue_enqueue_v2(v6843, v6844; name=nothing, Tcomponents=nothing, timeout_ms=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueEnqueueV2") 
                    begin  
                        begin  
                            v6843 = convert(TensorFlow.Tensor{Any}, v6843) 
                            begin  
                            end
                        end
                        begin  
                            v6844 = convert.(TensorFlow.Tensor{Any}, v6844) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6843)
                        end
                        begin  
                            tf.add_input(desc, v6844)
                        end
                    end 
                    begin  
                        begin  
                            if Tcomponents !== nothing 
                                desc["Tcomponents"] = Base.identity.Tcomponents
                            end
                        end
                        begin  
                            if timeout_ms !== nothing 
                                desc["timeout_ms"] = Base.Int(timeout_ms)
                            end
                        end
                    end
                end), name, "QueueEnqueueV2") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     where(input)

Returns locations of true values in a boolean tensor.

This operation returns the coordinates of true elements in `input`. The
coordinates are returned in a 2-D tensor where the first dimension (rows)
represents the number of true elements, and the second dimension (columns)
represents the coordinates of the true elements. Keep in mind, the shape of
the output tensor can vary depending on how many true values there are in
`input`. Indices are output in row-major order.

For example:

```prettyprint
# 'input' tensor is [[True, False]
#                    [True, False]]
# 'input' has two true values, so output has two coordinates.
# 'input' has rank of 2, so coordinates have two indices.
where(input) ==> [[0, 0],
                  [1, 0]]

# `input` tensor is [[[True, False]
#                     [True, False]]
#                    [[False, True]
#                     [False, True]]
#                    [[False, False]
#                     [False, True]]]
# 'input' has 5 true values, so output has 5 coordinates.
# 'input' has rank of 3, so coordinates have three indices.
where(input) ==> [[0, 0, 0],
                  [0, 1, 0],
                  [1, 0, 1],
                  [1, 1, 1],
                  [2, 1, 1]]
```
"""
tf.@op function where(v6845; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Where") 
                    begin  
                        begin  
                            v6845 = convert(TensorFlow.Tensor{Any}, v6845) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6845)
                        end
                    end 
                    begin  
                    end
                end), name, "Where") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_split(handle, value, lengths, flow_in)




"""
tf.@op function tensor_array_split(v6846, v6847, v6848, v6849; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArraySplit") 
                    begin  
                        begin  
                            v6846 = convert(TensorFlow.Tensor{Any}, v6846) 
                            begin  
                            end
                        end
                        begin  
                            v6847 = convert(TensorFlow.Tensor{Any}, v6847) 
                            begin  
                            end
                        end
                        begin  
                            v6848 = convert(TensorFlow.Tensor{Any}, v6848) 
                            begin  
                            end
                        end
                        begin  
                            v6849 = convert(TensorFlow.Tensor{Any}, v6849) 
                            begin  
                            end
                        end
                        begin  
                            (v6847,) = tf.tf_promote(v6847)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6846)
                        end
                        begin  
                            tf.add_input(desc, v6847)
                        end
                        begin  
                            tf.add_input(desc, v6848)
                        end
                        begin  
                            tf.add_input(desc, v6849)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TensorArraySplit") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     check_numerics(tensor)

Checks a tensor for NaN and Inf values.

When run, reports an `InvalidArgument` error if `tensor` has any values
that are not a number (NaN) or infinity (Inf). Otherwise, passes `tensor` as-is.
"""
tf.@op function check_numerics(v6850; name=nothing, T=nothing, message=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("CheckNumerics") 
                    begin  
                        begin  
                            v6850 = convert(TensorFlow.Tensor{Any}, v6850) 
                            begin  
                            end
                        end
                        begin  
                            (v6850,) = tf.tf_promote(v6850)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6850)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if message !== nothing 
                                desc["message"] = Base.String(message)
                            end
                        end
                    end
                end), name, "CheckNumerics") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_size_v3(handle, flow_in)

Get the current size of the TensorArray.


"""
tf.@op function tensor_array_size_v3(v6851, v6852; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArraySizeV3") 
                    begin  
                        begin  
                            v6851 = convert(TensorFlow.Tensor{Any}, v6851) 
                            begin  
                            end
                        end
                        begin  
                            v6852 = convert(TensorFlow.Tensor{Any}, v6852) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6851)
                        end
                        begin  
                            tf.add_input(desc, v6852)
                        end
                    end 
                    begin  
                    end
                end), name, "TensorArraySizeV3") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_nd_add(ref, indices, updates; use_locking=false)

Applies sparse addition between `updates` and individual values or slices

within a given variable according to `indices`.

`ref` is a `Tensor` with rank `P` and `indices` is a `Tensor` of rank `Q`.

`indices` must be integer tensor, containing indices into `ref`.
It must be shape `[d_0, ..., d_{Q-2}, K]` where `0 < K <= P`.

The innermost dimension of `indices` (with length `K`) corresponds to
indices into elements (if `K = P`) or slices (if `K < P`) along the `K`th
dimension of `ref`.

`updates` is `Tensor` of rank `Q-1+P-K` with shape:

```
[d_0, ..., d_{Q-2}, ref.shape[K], ..., ref.shape[P-1]].
```

For example, say we want to add 4 scattered elements to a rank-1 tensor to 8
elements. In Python, that addition would look like this:

    ref = tf.Variable([1, 2, 3, 4, 5, 6, 7, 8])
    indices = tf.constant([[4], [3], [1], [7]])
    updates = tf.constant([9, 10, 11, 12])
    add = tf.scatter_nd_add(ref, indices, updates)
    with tf.Session() as sess:
      print sess.run(add)

The resulting update to ref would look like this:

    [1, 13, 3, 14, 14, 6, 7, 20]

See [tf.scatter_nd](#scatter_nd) for more details about how to make updates to
slices.
"""
tf.@op function scatter_nd_add(v6853, v6854, v6855; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ScatterNdAdd") 
                    begin  
                        begin  
                            v6853 = convert(TensorFlow.Tensor{Any}, v6853) 
                            begin  
                            end
                        end
                        begin  
                            v6854 = convert(TensorFlow.Tensor{Any}, v6854) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6855 = convert(TensorFlow.Tensor{Any}, v6855) 
                            begin  
                            end
                        end
                        begin  
                            (v6853, v6855) = tf.tf_promote(v6853, v6855)
                        end
                        begin  
                            (v6854,) = tf.tf_promote(v6854)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6853)
                        end
                        begin  
                            tf.add_input(desc, v6854)
                        end
                        begin  
                            tf.add_input(desc, v6855)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ScatterNdAdd") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     conv_2d_backprop_filter(input, filter_sizes, out_backprop; use_cudnn_on_gpu=true, data_format=NHWC)

Computes the gradients of convolution with respect to the filter.


"""
tf.@op function conv_2d_backprop_filter(v6856, v6857, v6858; name=nothing, T=nothing, strides=nothing, use_cudnn_on_gpu=nothing, padding=nothing, data_format=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Conv2DBackpropFilter") 
                    begin  
                        begin  
                            v6856 = convert(TensorFlow.Tensor{Any}, v6856) 
                            begin  
                            end
                        end
                        begin  
                            v6857 = convert(TensorFlow.Tensor{Any}, v6857) 
                            begin  
                            end
                        end
                        begin  
                            v6858 = convert(TensorFlow.Tensor{Any}, v6858) 
                            begin  
                            end
                        end
                        begin  
                            (v6856, v6858) = tf.tf_promote(v6856, v6858)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6856)
                        end
                        begin  
                            tf.add_input(desc, v6857)
                        end
                        begin  
                            tf.add_input(desc, v6858)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if use_cudnn_on_gpu !== nothing 
                                desc["use_cudnn_on_gpu"] = Base.Bool(use_cudnn_on_gpu)
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                    end
                end), name, "Conv2DBackpropFilter") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     ctcl(inputs, labels_indices, labels_values, sequence_length; preprocess_collapse_repeated=false, ctc_merge_repeated=true)

Calculates the CTC Loss (log probability) for each batch entry.  Also calculates

the gradient.  This class performs the softmax operation for you, so inputs
should be e.g. linear projections of outputs by an LSTM.
"""
tf.@op function ctcl(v6859, v6860, v6861, v6862; name=nothing, preprocess_collapse_repeated=nothing, ctc_merge_repeated=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("CTCLoss") 
                    begin  
                        begin  
                            v6859 = convert(TensorFlow.Tensor{Any}, v6859) 
                            begin  
                            end
                        end
                        begin  
                            v6860 = convert(TensorFlow.Tensor{Any}, v6860) 
                            begin  
                            end
                        end
                        begin  
                            v6861 = convert(TensorFlow.Tensor{Any}, v6861) 
                            begin  
                            end
                        end
                        begin  
                            v6862 = convert(TensorFlow.Tensor{Any}, v6862) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6859)
                        end
                        begin  
                            tf.add_input(desc, v6860)
                        end
                        begin  
                            tf.add_input(desc, v6861)
                        end
                        begin  
                            tf.add_input(desc, v6862)
                        end
                    end 
                    begin  
                        begin  
                            if preprocess_collapse_repeated !== nothing 
                                desc["preprocess_collapse_repeated"] = Base.Bool(preprocess_collapse_repeated)
                            end
                        end
                        begin  
                            if ctc_merge_repeated !== nothing 
                                desc["ctc_merge_repeated"] = Base.Bool(ctc_merge_repeated)
                            end
                        end
                    end
                end), name, "CTCLoss") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     quantized_reshape(tensor, shape, input_min, input_max; Tshape=Int32)

Reshapes a quantized tensor as per the Reshape op.

```
"""
tf.@op function quantized_reshape(v6863, v6864, v6865, v6866; name=nothing, T=nothing, Tshape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedReshape") 
                    begin  
                        begin  
                            v6863 = convert(TensorFlow.Tensor{Any}, v6863) 
                            begin  
                            end
                        end
                        begin  
                            v6864 = convert(TensorFlow.Tensor{Int32}, v6864) 
                            begin  
                            end
                        end
                        begin  
                            v6865 = convert(TensorFlow.Tensor{Any}, v6865) 
                            begin  
                            end
                        end
                        begin  
                            v6866 = convert(TensorFlow.Tensor{Any}, v6866) 
                            begin  
                            end
                        end
                        begin  
                            (v6863,) = tf.tf_promote(v6863)
                        end
                        begin  
                            (v6864,) = tf.tf_promote(v6864)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6863)
                        end
                        begin  
                            tf.add_input(desc, v6864)
                        end
                        begin  
                            tf.add_input(desc, v6865)
                        end
                        begin  
                            tf.add_input(desc, v6866)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tshape !== nothing 
                                desc["Tshape"] = Base.identity(Tshape)
                            end
                        end
                    end
                end), name, "QuantizedReshape") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     floor_div(x, y)

Returns x // y element-wise.

*NOTE*: `FloorDiv` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function floor_div(v6867, v6868; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FloorDiv") 
                    begin  
                        begin  
                            v6867 = convert(TensorFlow.Tensor{Any}, v6867) 
                            begin  
                            end
                        end
                        begin  
                            v6868 = convert(TensorFlow.Tensor{Any}, v6868) 
                            begin  
                            end
                        end
                        begin  
                            (v6867, v6868) = tf.tf_promote(v6867, v6868)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6867)
                        end
                        begin  
                            tf.add_input(desc, v6868)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "FloorDiv") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     max_pool_grad(orig_input, orig_output, grad; data_format=NHWC, T=Float32)

Computes gradients of the maxpooling function.


"""
tf.@op function max_pool_grad(v6869, v6870, v6871; name=nothing, ksize=nothing, strides=nothing, padding=nothing, data_format=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MaxPoolGrad") 
                    begin  
                        begin  
                            v6869 = convert(TensorFlow.Tensor{Float32}, v6869) 
                            begin  
                            end
                        end
                        begin  
                            v6870 = convert(TensorFlow.Tensor{Float32}, v6870) 
                            begin  
                            end
                        end
                        begin  
                            v6871 = convert(TensorFlow.Tensor{Float32}, v6871) 
                            begin  
                            end
                        end
                        begin  
                            (v6869, v6870, v6871) = tf.tf_promote(v6869, v6870, v6871)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6869)
                        end
                        begin  
                            tf.add_input(desc, v6870)
                        end
                        begin  
                            tf.add_input(desc, v6871)
                        end
                    end 
                    begin  
                        begin  
                            if ksize !== nothing 
                                desc["ksize"] = Base.identity.ksize
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MaxPoolGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_v2(size; element_shape=TensorShape[unknown], dynamic_size=false, clear_after_read=true, tensor_array_name=)

Deprecated. Use TensorArrayV3


"""
tf.@op function tensor_array_v2(v6872; name=nothing, dtype=nothing, element_shape=nothing, dynamic_size=nothing, clear_after_read=nothing, tensor_array_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayV2") 
                    begin  
                        begin  
                            v6872 = convert(TensorFlow.Tensor{Any}, v6872) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6872)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if element_shape !== nothing 
                                desc["element_shape"] = Base.identity(element_shape)
                            end
                        end
                        begin  
                            if dynamic_size !== nothing 
                                desc["dynamic_size"] = Base.Bool(dynamic_size)
                            end
                        end
                        begin  
                            if clear_after_read !== nothing 
                                desc["clear_after_read"] = Base.Bool(clear_after_read)
                            end
                        end
                        begin  
                            if tensor_array_name !== nothing 
                                desc["tensor_array_name"] = Base.String(tensor_array_name)
                            end
                        end
                    end
                end), name, "TensorArrayV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_segment_mean_grad(grad, indices, segment_ids, output_dim0; Tidx=Int32)

Computes gradients for SparseSegmentMean.

Returns tensor "output" with same shape as grad, except for dimension 0 whose
value is output_dim0.
"""
tf.@op function sparse_segment_mean_grad(v6873, v6874, v6875, v6876; name=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseSegmentMeanGrad") 
                    begin  
                        begin  
                            v6873 = convert(TensorFlow.Tensor{Any}, v6873) 
                            begin  
                            end
                        end
                        begin  
                            v6874 = convert(TensorFlow.Tensor{Int32}, v6874) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6875 = convert(TensorFlow.Tensor{Any}, v6875) 
                            begin  
                            end
                        end
                        begin  
                            v6876 = convert(TensorFlow.Tensor{Any}, v6876) 
                            begin  
                            end
                        end
                        begin  
                            (v6873,) = tf.tf_promote(v6873)
                        end
                        begin  
                            (v6874,) = tf.tf_promote(v6874)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6873)
                        end
                        begin  
                            tf.add_input(desc, v6874)
                        end
                        begin  
                            tf.add_input(desc, v6875)
                        end
                        begin  
                            tf.add_input(desc, v6876)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "SparseSegmentMeanGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reader_num_records_produced_v2(reader_handle)

Returns the number of records this Reader has produced.

This is the same as the number of ReaderRead executions that have
succeeded.
"""
tf.@op function reader_num_records_produced_v2(v6877; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderNumRecordsProducedV2") 
                    begin  
                        begin  
                            v6877 = convert(TensorFlow.Tensor{Any}, v6877) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6877)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderNumRecordsProducedV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     barrier_close(handle; cancel_pending_enqueues=false)

Closes the given barrier.

This operation signals that no more new elements will be inserted in the
given barrier. Subsequent InsertMany that try to introduce a new key will fail.
Subsequent InsertMany operations that just add missing components to already
existing elements will continue to succeed. Subsequent TakeMany operations will
continue to succeed if sufficient completed elements remain in the barrier.
Subsequent TakeMany operations that would block will fail immediately.
"""
tf.@op function barrier_close(v6878; name=nothing, cancel_pending_enqueues=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BarrierClose") 
                    begin  
                        begin  
                            v6878 = convert(TensorFlow.Tensor{Any}, v6878) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6878)
                        end
                    end 
                    begin  
                        begin  
                            if cancel_pending_enqueues !== nothing 
                                desc["cancel_pending_enqueues"] = Base.Bool(cancel_pending_enqueues)
                            end
                        end
                    end
                end), name, "BarrierClose") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     assign_sub(ref, value; use_locking=false)

Update 'ref' by subtracting 'value' from it.

This operation outputs "ref" after the update is done.
This makes it easier to chain operations that need to use the reset value.
"""
tf.@op function assign_sub(v6879, v6880; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AssignSub") 
                    begin  
                        begin  
                            v6879 = convert(TensorFlow.Tensor{Any}, v6879) 
                            begin  
                            end
                        end
                        begin  
                            v6880 = convert(TensorFlow.Tensor{Any}, v6880) 
                            begin  
                            end
                        end
                        begin  
                            (v6879, v6880) = tf.tf_promote(v6879, v6880)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6879)
                        end
                        begin  
                            tf.add_input(desc, v6880)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "AssignSub") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     read_variable_op(resource)

Reads the value of a variable.

The tensor returned by this operation is immutable.

The value returned by this operation is guaranteed to be influenced by all the
writes on which this operation depends directly or indirectly, and to not be
influenced by any of the writes which depend directly or indirectly on this
operation.
"""
tf.@op function read_variable_op(v6881; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReadVariableOp") 
                    begin  
                        begin  
                            v6881 = convert(TensorFlow.Tensor{Any}, v6881) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6881)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "ReadVariableOp") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     unsorted_segment_sum(data, segment_ids, num_segments)

Computes the sum along segments of a tensor.

Read [the section on
Segmentation](../../api_docs/python/math_ops.md#segmentation) for an explanation
of segments.

Computes a tensor such that
`(output[i] = sum_{j...} data[j...]` where the sum is over tuples `j...` such
that `segment_ids[j...] == i`.  Unlike `SegmentSum`, `segment_ids`
need not be sorted and need not cover all values in the full
range of valid values.

If the sum is empty for a given segment ID `i`, `output[i] = 0`.

`num_segments` should equal the number of distinct segment IDs.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/UnsortedSegmentSum.png" alt>
</div>
"""
tf.@op function unsorted_segment_sum(v6882, v6883, v6884; name=nothing, T=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("UnsortedSegmentSum") 
                    begin  
                        begin  
                            v6882 = convert(TensorFlow.Tensor{Any}, v6882) 
                            begin  
                            end
                        end
                        begin  
                            v6883 = convert(TensorFlow.Tensor{Any}, v6883) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6884 = convert(TensorFlow.Tensor{Any}, v6884) 
                            begin  
                            end
                        end
                        begin  
                            (v6882,) = tf.tf_promote(v6882)
                        end
                        begin  
                            (v6883,) = tf.tf_promote(v6883)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6882)
                        end
                        begin  
                            tf.add_input(desc, v6883)
                        end
                        begin  
                            tf.add_input(desc, v6884)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "UnsortedSegmentSum") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fused_batch_norm_grad(y_backprop, x, scale, reserve_space_1, reserve_space_2; epsilon=nothing, data_format=NHWC, is_training=true)

Gradient for batch normalization.

Note that the size of 4D Tensors are defined by either "NHWC" or "NCHW".
The size of 1D Tensors matches the dimension C of the 4D Tensors.
"""
tf.@op function fused_batch_norm_grad(v6885, v6886, v6887, v6888, v6889; name=nothing, T=nothing, epsilon=nothing, data_format=nothing, is_training=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FusedBatchNormGrad") 
                    begin  
                        begin  
                            v6885 = convert(TensorFlow.Tensor{Any}, v6885) 
                            begin  
                            end
                        end
                        begin  
                            v6886 = convert(TensorFlow.Tensor{Any}, v6886) 
                            begin  
                            end
                        end
                        begin  
                            v6887 = convert(TensorFlow.Tensor{Any}, v6887) 
                            begin  
                            end
                        end
                        begin  
                            v6888 = convert(TensorFlow.Tensor{Any}, v6888) 
                            begin  
                            end
                        end
                        begin  
                            v6889 = convert(TensorFlow.Tensor{Any}, v6889) 
                            begin  
                            end
                        end
                        begin  
                            (v6885, v6886, v6887, v6888, v6889) = tf.tf_promote(v6885, v6886, v6887, v6888, v6889)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6885)
                        end
                        begin  
                            tf.add_input(desc, v6886)
                        end
                        begin  
                            tf.add_input(desc, v6887)
                        end
                        begin  
                            tf.add_input(desc, v6888)
                        end
                        begin  
                            tf.add_input(desc, v6889)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if epsilon !== nothing 
                                desc["epsilon"] = Base.identity(epsilon)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                        begin  
                            if is_training !== nothing 
                                desc["is_training"] = Base.Bool(is_training)
                            end
                        end
                    end
                end), name, "FusedBatchNormGrad") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3), tf.Tensor(op, 4), tf.Tensor(op, 5))
        end
    end

"""
     lookup_table_insert(table_handle, keys, values)

Updates the table to associates keys with values.

The tensor `keys` must be of the same type as the keys of the table.
The tensor `values` must be of the type of the table values.
"""
tf.@op function lookup_table_insert(v6890, v6891, v6892; name=nothing, Tin=nothing, Tout=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LookupTableInsert") 
                    begin  
                        begin  
                            v6890 = convert(TensorFlow.Tensor{Any}, v6890) 
                            begin  
                            end
                        end
                        begin  
                            v6891 = convert(TensorFlow.Tensor{Any}, v6891) 
                            begin  
                            end
                        end
                        begin  
                            v6892 = convert(TensorFlow.Tensor{Any}, v6892) 
                            begin  
                            end
                        end
                        begin  
                            (v6891,) = tf.tf_promote(v6891)
                        end
                        begin  
                            (v6892,) = tf.tf_promote(v6892)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6890)
                        end
                        begin  
                            tf.add_input(desc, v6891)
                        end
                        begin  
                            tf.add_input(desc, v6892)
                        end
                    end 
                    begin  
                        begin  
                            if Tin !== nothing 
                                desc["Tin"] = Base.identity(Tin)
                            end
                        end
                        begin  
                            if Tout !== nothing 
                                desc["Tout"] = Base.identity(Tout)
                            end
                        end
                    end
                end), name, "LookupTableInsert") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     quantized_mul(x, y, min_x, max_x, min_y, max_y; Toutput=?)

Returns x * y element-wise, working on quantized buffers.


"""
tf.@op function quantized_mul(v6893, v6894, v6895, v6896, v6897, v6898; name=nothing, T1=nothing, T2=nothing, Toutput=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedMul") 
                    begin  
                        begin  
                            v6893 = convert(TensorFlow.Tensor{Any}, v6893) 
                            begin  
                            end
                        end
                        begin  
                            v6894 = convert(TensorFlow.Tensor{Any}, v6894) 
                            begin  
                            end
                        end
                        begin  
                            v6895 = convert(TensorFlow.Tensor{Any}, v6895) 
                            begin  
                            end
                        end
                        begin  
                            v6896 = convert(TensorFlow.Tensor{Any}, v6896) 
                            begin  
                            end
                        end
                        begin  
                            v6897 = convert(TensorFlow.Tensor{Any}, v6897) 
                            begin  
                            end
                        end
                        begin  
                            v6898 = convert(TensorFlow.Tensor{Any}, v6898) 
                            begin  
                            end
                        end
                        begin  
                            (v6893,) = tf.tf_promote(v6893)
                        end
                        begin  
                            (v6894,) = tf.tf_promote(v6894)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6893)
                        end
                        begin  
                            tf.add_input(desc, v6894)
                        end
                        begin  
                            tf.add_input(desc, v6895)
                        end
                        begin  
                            tf.add_input(desc, v6896)
                        end
                        begin  
                            tf.add_input(desc, v6897)
                        end
                        begin  
                            tf.add_input(desc, v6898)
                        end
                    end 
                    begin  
                        begin  
                            if T1 !== nothing 
                                desc["T1"] = Base.identity(T1)
                            end
                        end
                        begin  
                            if T2 !== nothing 
                                desc["T2"] = Base.identity(T2)
                            end
                        end
                        begin  
                            if Toutput !== nothing 
                                desc["Toutput"] = Base.identity(Toutput)
                            end
                        end
                    end
                end), name, "QuantizedMul") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     batch_matrix_triangular_solve(matrix, rhs; lower=true, adjoint=false)




"""
tf.@op function batch_matrix_triangular_solve(v6899, v6900; name=nothing, lower=nothing, adjoint=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchMatrixTriangularSolve") 
                    begin  
                        begin  
                            v6899 = convert(TensorFlow.Tensor{Any}, v6899) 
                            begin  
                            end
                        end
                        begin  
                            v6900 = convert(TensorFlow.Tensor{Any}, v6900) 
                            begin  
                            end
                        end
                        begin  
                            (v6899, v6900) = tf.tf_promote(v6899, v6900)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6899)
                        end
                        begin  
                            tf.add_input(desc, v6900)
                        end
                    end 
                    begin  
                        begin  
                            if lower !== nothing 
                                desc["lower"] = Base.Bool(lower)
                            end
                        end
                        begin  
                            if adjoint !== nothing 
                                desc["adjoint"] = Base.Bool(adjoint)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchMatrixTriangularSolve") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     retval(input)

A graph node which represents a return value of a function.


"""
tf.@op function retval(v6901; name=nothing, T=nothing, index=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("_Retval") 
                    begin  
                        begin  
                            v6901 = convert(TensorFlow.Tensor{Any}, v6901) 
                            begin  
                            end
                        end
                        begin  
                            (v6901,) = tf.tf_promote(v6901)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6901)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if index !== nothing 
                                desc["index"] = Base.Int(index)
                            end
                        end
                    end
                end), name, "_Retval") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     parallel_concat_start()

Creates an empty Tensor with shape `shape` and type `dtype`.

The memory can optionally be initialized. This is usually useful in
conjunction with inplace operations.
"""
tf.@op function parallel_concat_start(; name=nothing, shape=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("_ParallelConcatStart") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if shape !== nothing 
                                desc["shape"] = Base.identity(shape)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "_ParallelConcatStart") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     complex_abs(x; T=Complex{Float32}, Tout=Float32)

Computes the complex absolute value of a tensor.

Given a tensor `x` of complex numbers, this operation returns a tensor of type
`float` or `double` that is the absolute value of each element in `x`. All
elements in `x` must be complex numbers of the form \\(a + bj\\). The absolute
value is computed as \\( \sqrt{a^2 + b^2}\\).
"""
tf.@op function complex_abs(v6902; name=nothing, T=nothing, Tout=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ComplexAbs") 
                    begin  
                        begin  
                            v6902 = convert(TensorFlow.Tensor{Complex{Float32}}, v6902) 
                            begin  
                            end
                        end
                        begin  
                            (v6902,) = tf.tf_promote(v6902)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6902)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tout !== nothing 
                                desc["Tout"] = Base.identity(Tout)
                            end
                        end
                    end
                end), name, "ComplexAbs") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     lookup_table_import(table_handle, keys, values)

Replaces the contents of the table with the specified keys and values.

The tensor `keys` must be of the same type as the keys of the table.
The tensor `values` must be of the type of the table values.
"""
tf.@op function lookup_table_import(v6903, v6904, v6905; name=nothing, Tin=nothing, Tout=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LookupTableImport") 
                    begin  
                        begin  
                            v6903 = convert(TensorFlow.Tensor{Any}, v6903) 
                            begin  
                            end
                        end
                        begin  
                            v6904 = convert(TensorFlow.Tensor{Any}, v6904) 
                            begin  
                            end
                        end
                        begin  
                            v6905 = convert(TensorFlow.Tensor{Any}, v6905) 
                            begin  
                            end
                        end
                        begin  
                            (v6904,) = tf.tf_promote(v6904)
                        end
                        begin  
                            (v6905,) = tf.tf_promote(v6905)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6903)
                        end
                        begin  
                            tf.add_input(desc, v6904)
                        end
                        begin  
                            tf.add_input(desc, v6905)
                        end
                    end 
                    begin  
                        begin  
                            if Tin !== nothing 
                                desc["Tin"] = Base.identity(Tin)
                            end
                        end
                        begin  
                            if Tout !== nothing 
                                desc["Tout"] = Base.identity(Tout)
                            end
                        end
                    end
                end), name, "LookupTableImport") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     unique_with_counts(x; out_idx=Int32)

Finds unique elements in a 1-D tensor.

This operation returns a tensor `y` containing all of the unique elements of `x`
sorted in the same order that they occur in `x`. This operation also returns a
tensor `idx` the same size as `x` that contains the index of each value of `x`
in the unique output `y`. Finally, it returns a third tensor `count` that
contains the count of each element of `y` in `x`. In other words:

`y[idx[i]] = x[i] for i in [0, 1,...,rank(x) - 1]`

For example:

```prettyprint
# tensor 'x' is [1, 1, 2, 4, 4, 4, 7, 8, 8]
y, idx, count = unique_with_counts(x)
y ==> [1, 2, 4, 7, 8]
idx ==> [0, 0, 1, 2, 2, 2, 3, 4, 4]
count ==> [2, 1, 3, 1, 2]
```
"""
tf.@op function unique_with_counts(v6906; name=nothing, T=nothing, out_idx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("UniqueWithCounts") 
                    begin  
                        begin  
                            v6906 = convert(TensorFlow.Tensor{Any}, v6906) 
                            begin  
                            end
                        end
                        begin  
                            (v6906,) = tf.tf_promote(v6906)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6906)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if out_idx !== nothing 
                                desc["out_idx"] = Base.identity(out_idx)
                            end
                        end
                    end
                end), name, "UniqueWithCounts") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     abs(x)

Computes the absolute value of a tensor.

Given a tensor `x`, this operation returns a tensor containing the absolute
value of each element in `x`. For example, if x is an input element and y is
an output element, this operation computes \\(y = |x|\\).
"""
tf.@op function abs(v6907; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Abs") 
                    begin  
                        begin  
                            v6907 = convert(TensorFlow.Tensor{Any}, v6907) 
                            begin  
                            end
                        end
                        begin  
                            (v6907,) = tf.tf_promote(v6907)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6907)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Abs") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_apply_adam(var, m, v, beta1_power, beta2_power, lr, beta1, beta2, epsilon, grad; use_locking=false)

Update '*var' according to the Adam algorithm.

lr_t <- learning_rate * sqrt(1 - beta2^t) / (1 - beta1^t)
m_t <- beta1 * m_{t-1} + (1 - beta1) * g_t
v_t <- beta2 * v_{t-1} + (1 - beta2) * g_t * g_t
variable <- variable - lr_t * m_t / (sqrt(v_t) + epsilon)
"""
tf.@op function resource_apply_adam(v6908, v6909, v6910, v6911, v6912, v6913, v6914, v6915, v6916, v6917; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceApplyAdam") 
                    begin  
                        begin  
                            v6908 = convert(TensorFlow.Tensor{Any}, v6908) 
                            begin  
                            end
                        end
                        begin  
                            v6909 = convert(TensorFlow.Tensor{Any}, v6909) 
                            begin  
                            end
                        end
                        begin  
                            v6910 = convert(TensorFlow.Tensor{Any}, v6910) 
                            begin  
                            end
                        end
                        begin  
                            v6911 = convert(TensorFlow.Tensor{Any}, v6911) 
                            begin  
                            end
                        end
                        begin  
                            v6912 = convert(TensorFlow.Tensor{Any}, v6912) 
                            begin  
                            end
                        end
                        begin  
                            v6913 = convert(TensorFlow.Tensor{Any}, v6913) 
                            begin  
                            end
                        end
                        begin  
                            v6914 = convert(TensorFlow.Tensor{Any}, v6914) 
                            begin  
                            end
                        end
                        begin  
                            v6915 = convert(TensorFlow.Tensor{Any}, v6915) 
                            begin  
                            end
                        end
                        begin  
                            v6916 = convert(TensorFlow.Tensor{Any}, v6916) 
                            begin  
                            end
                        end
                        begin  
                            v6917 = convert(TensorFlow.Tensor{Any}, v6917) 
                            begin  
                            end
                        end
                        begin  
                            (v6911, v6912, v6913, v6914, v6915, v6916, v6917) = tf.tf_promote(v6911, v6912, v6913, v6914, v6915, v6916, v6917)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6908)
                        end
                        begin  
                            tf.add_input(desc, v6909)
                        end
                        begin  
                            tf.add_input(desc, v6910)
                        end
                        begin  
                            tf.add_input(desc, v6911)
                        end
                        begin  
                            tf.add_input(desc, v6912)
                        end
                        begin  
                            tf.add_input(desc, v6913)
                        end
                        begin  
                            tf.add_input(desc, v6914)
                        end
                        begin  
                            tf.add_input(desc, v6915)
                        end
                        begin  
                            tf.add_input(desc, v6916)
                        end
                        begin  
                            tf.add_input(desc, v6917)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceApplyAdam") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     add(x, y)

Returns x + y element-wise.

*NOTE*: `Add` supports broadcasting. `AddN` does not. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function add(v6918, v6919; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Add") 
                    begin  
                        begin  
                            v6918 = convert(TensorFlow.Tensor{Any}, v6918) 
                            begin  
                            end
                        end
                        begin  
                            v6919 = convert(TensorFlow.Tensor{Any}, v6919) 
                            begin  
                            end
                        end
                        begin  
                            (v6918, v6919) = tf.tf_promote(v6918, v6919)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6918)
                        end
                        begin  
                            tf.add_input(desc, v6919)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Add") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     host_send(tensor; client_terminated=false)

Sends the named tensor from send_device to recv_device.

_HostSend requires its input on host memory whereas _Send requires its
input on device memory.
"""
tf.@op function host_send(v6920; name=nothing, T=nothing, tensor_name=nothing, send_device=nothing, send_device_incarnation=nothing, recv_device=nothing, client_terminated=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("_HostSend") 
                    begin  
                        begin  
                            v6920 = convert(TensorFlow.Tensor{Any}, v6920) 
                            begin  
                            end
                        end
                        begin  
                            (v6920,) = tf.tf_promote(v6920)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6920)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if tensor_name !== nothing 
                                desc["tensor_name"] = Base.String(tensor_name)
                            end
                        end
                        begin  
                            if send_device !== nothing 
                                desc["send_device"] = Base.String(send_device)
                            end
                        end
                        begin  
                            if send_device_incarnation !== nothing 
                                desc["send_device_incarnation"] = Base.Int(send_device_incarnation)
                            end
                        end
                        begin  
                            if recv_device !== nothing 
                                desc["recv_device"] = Base.String(recv_device)
                            end
                        end
                        begin  
                            if client_terminated !== nothing 
                                desc["client_terminated"] = Base.Bool(client_terminated)
                            end
                        end
                    end
                end), name, "_HostSend") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     skipgram(; window_size=5, min_count=5, subsample=nothing)

Parses a text file and creates a batch of examples.


"""
tf.@op function skipgram(; name=nothing, filename=nothing, batch_size=nothing, window_size=nothing, min_count=nothing, subsample=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Skipgram") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if filename !== nothing 
                                desc["filename"] = Base.String(filename)
                            end
                        end
                        begin  
                            if batch_size !== nothing 
                                desc["batch_size"] = Base.Int(batch_size)
                            end
                        end
                        begin  
                            if window_size !== nothing 
                                desc["window_size"] = Base.Int(window_size)
                            end
                        end
                        begin  
                            if min_count !== nothing 
                                desc["min_count"] = Base.Int(min_count)
                            end
                        end
                        begin  
                            if subsample !== nothing 
                                desc["subsample"] = Base.identity(subsample)
                            end
                        end
                    end
                end), name, "Skipgram") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3), tf.Tensor(op, 4), tf.Tensor(op, 5), tf.Tensor(op, 6), tf.Tensor(op, 7))
        end
    end

"""
     arg_min(input, dimension; Tidx=Int32)

Returns the index with the smallest value across dimensions of a tensor.


"""
tf.@op function arg_min(v6921, v6922; name=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ArgMin") 
                    begin  
                        begin  
                            v6921 = convert(TensorFlow.Tensor{Any}, v6921) 
                            begin  
                            end
                        end
                        begin  
                            v6922 = convert(TensorFlow.Tensor{Int32}, v6922) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6921,) = tf.tf_promote(v6921)
                        end
                        begin  
                            (v6922,) = tf.tf_promote(v6922)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6921)
                        end
                        begin  
                            tf.add_input(desc, v6922)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "ArgMin") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     greater(x, y)

Returns the truth value of (x > y) element-wise.

*NOTE*: `Greater` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function greater(v6923, v6924; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Greater") 
                    begin  
                        begin  
                            v6923 = convert(TensorFlow.Tensor{Any}, v6923) 
                            begin  
                            end
                        end
                        begin  
                            v6924 = convert(TensorFlow.Tensor{Any}, v6924) 
                            begin  
                            end
                        end
                        begin  
                            (v6923, v6924) = tf.tf_promote(v6923, v6924)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6923)
                        end
                        begin  
                            tf.add_input(desc, v6924)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Greater") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_solve(matrix, rhs; adjoint=false)

Solves systems of linear equations.

`Matrix` is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions
form square matrices. `Rhs` is a tensor of shape `[..., M, K]`. The `output` is
a tensor shape `[..., M, K]`.  If `adjoint` is `False` then each output matrix
satisfies `matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]`.
If `adjoint` is `True` then each output matrix satisfies
`adjoint(matrix[..., :, :]) * output[..., :, :] = rhs[..., :, :]`.
"""
tf.@op function matrix_solve(v6925, v6926; name=nothing, adjoint=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MatrixSolve") 
                    begin  
                        begin  
                            v6925 = convert(TensorFlow.Tensor{Any}, v6925) 
                            begin  
                            end
                        end
                        begin  
                            v6926 = convert(TensorFlow.Tensor{Any}, v6926) 
                            begin  
                            end
                        end
                        begin  
                            (v6925, v6926) = tf.tf_promote(v6925, v6926)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6925)
                        end
                        begin  
                            tf.add_input(desc, v6926)
                        end
                    end 
                    begin  
                        begin  
                            if adjoint !== nothing 
                                desc["adjoint"] = Base.Bool(adjoint)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MatrixSolve") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     queue_dequeue_many(handle, n; timeout_ms=-1)

Dequeues n tuples of one or more tensors from the given queue.

If the queue is closed and there are fewer than n elements, then an
OutOfRange error is returned.

This operation concatenates queue-element component tensors along the
0th dimension to make a single component tensor.  All of the components
in the dequeued tuple will have size n in the 0th dimension.

This operation has k outputs, where k is the number of components in
the tuples stored in the given queue, and output i is the ith
component of the dequeued tuple.

N.B. If the queue is empty, this operation will block until n elements
have been dequeued (or 'timeout_ms' elapses, if specified).
"""
tf.@op function queue_dequeue_many(v6927, v6928; name=nothing, component_types=nothing, timeout_ms=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueDequeueMany") 
                    begin  
                        begin  
                            v6927 = convert(TensorFlow.Tensor{Any}, v6927) 
                            begin  
                            end
                        end
                        begin  
                            v6928 = convert(TensorFlow.Tensor{Any}, v6928) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6927)
                        end
                        begin  
                            tf.add_input(desc, v6928)
                        end
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if timeout_ms !== nothing 
                                desc["timeout_ms"] = Base.Int(timeout_ms)
                            end
                        end
                    end
                end), name, "QueueDequeueMany") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     assign_add_variable_op(resource, value)

Adds a value to the current value of a variable.

Any ReadVariableOp which depends directly or indirectly on this assign is
guaranteed to see the incremented value or a subsequent newer one.

Outputs the incremented value, which can be used to totally order the
increments to this variable.
"""
tf.@op function assign_add_variable_op(v6929, v6930; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AssignAddVariableOp") 
                    begin  
                        begin  
                            v6929 = convert(TensorFlow.Tensor{Any}, v6929) 
                            begin  
                            end
                        end
                        begin  
                            v6930 = convert(TensorFlow.Tensor{Any}, v6930) 
                            begin  
                            end
                        end
                        begin  
                            (v6930,) = tf.tf_promote(v6930)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6929)
                        end
                        begin  
                            tf.add_input(desc, v6930)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "AssignAddVariableOp") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     split_v(value, size_splits, split_dim; Tlen=Int64)

Splits a tensor into `num_split` tensors along one dimension.


"""
tf.@op function split_v(v6931, v6932, v6933; name=nothing, num_split=nothing, T=nothing, Tlen=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SplitV") 
                    begin  
                        begin  
                            v6931 = convert(TensorFlow.Tensor{Any}, v6931) 
                            begin  
                            end
                        end
                        begin  
                            v6932 = convert(TensorFlow.Tensor{Int64}, v6932) 
                            begin  
                            end
                        end
                        begin  
                            v6933 = convert(TensorFlow.Tensor{Any}, v6933) 
                            begin  
                            end
                        end
                        begin  
                            (v6931,) = tf.tf_promote(v6931)
                        end
                        begin  
                            (v6932,) = tf.tf_promote(v6932)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6931)
                        end
                        begin  
                            tf.add_input(desc, v6932)
                        end
                        begin  
                            tf.add_input(desc, v6933)
                        end
                    end 
                    begin  
                        begin  
                            if num_split !== nothing 
                                desc["num_split"] = Base.Int(num_split)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tlen !== nothing 
                                desc["Tlen"] = Base.identity(Tlen)
                            end
                        end
                    end
                end), name, "SplitV") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     assign(ref, value; validate_shape=true, use_locking=true)

Update 'ref' by assigning 'value' to it.

This operation outputs "ref" after the assignment is done.
This makes it easier to chain operations that need to use the reset value.
"""
tf.@op function assign(v6934, v6935; name=nothing, T=nothing, validate_shape=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Assign") 
                    begin  
                        begin  
                            v6934 = convert(TensorFlow.Tensor{Any}, v6934) 
                            begin  
                            end
                        end
                        begin  
                            v6935 = convert(TensorFlow.Tensor{Any}, v6935) 
                            begin  
                            end
                        end
                        begin  
                            (v6934, v6935) = tf.tf_promote(v6934, v6935)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6934)
                        end
                        begin  
                            tf.add_input(desc, v6935)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if validate_shape !== nothing 
                                desc["validate_shape"] = Base.Bool(validate_shape)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "Assign") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     adjust_contrastv_2(images, contrast_factor)

Adjust the contrast of one or more images.

`images` is a tensor of at least 3 dimensions.  The last 3 dimensions are
interpreted as `[height, width, channels]`.  The other dimensions only
represent a collection of images, such as `[batch, height, width, channels].`

Contrast is adjusted independently for each channel of each image.

For each channel, the Op first computes the mean of the image pixels in the
channel and then adjusts each component of each pixel to
`(x - mean) * contrast_factor + mean`.
"""
tf.@op function adjust_contrastv_2(v6936, v6937; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AdjustContrastv2") 
                    begin  
                        begin  
                            v6936 = convert(TensorFlow.Tensor{Any}, v6936) 
                            begin  
                            end
                        end
                        begin  
                            v6937 = convert(TensorFlow.Tensor{Any}, v6937) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6936)
                        end
                        begin  
                            tf.add_input(desc, v6937)
                        end
                    end 
                    begin  
                    end
                end), name, "AdjustContrastv2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     minimum(x, y)

Returns the min of x and y (i.e. x < y ? x : y) element-wise.

*NOTE*: `Minimum` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function minimum(v6938, v6939; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Minimum") 
                    begin  
                        begin  
                            v6938 = convert(TensorFlow.Tensor{Any}, v6938) 
                            begin  
                            end
                        end
                        begin  
                            v6939 = convert(TensorFlow.Tensor{Any}, v6939) 
                            begin  
                            end
                        end
                        begin  
                            (v6938, v6939) = tf.tf_promote(v6938, v6939)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6938)
                        end
                        begin  
                            tf.add_input(desc, v6939)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Minimum") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     max_pool_with_argmax(input; Targmax=Int64, T=Float32)

Performs max pooling on the input and outputs both max values and indices.

The indices in `argmax` are flattened, so that a maximum value at position
`[b, y, x, c]` becomes flattened index
`((b * height + y) * width + x) * channels + c`.
"""
tf.@op function max_pool_with_argmax(v6940; name=nothing, ksize=nothing, strides=nothing, Targmax=nothing, padding=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MaxPoolWithArgmax") 
                    begin  
                        begin  
                            v6940 = convert(TensorFlow.Tensor{Float32}, v6940) 
                            begin  
                            end
                        end
                        begin  
                            (v6940,) = tf.tf_promote(v6940)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6940)
                        end
                    end 
                    begin  
                        begin  
                            if ksize !== nothing 
                                desc["ksize"] = Base.identity.ksize
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if Targmax !== nothing 
                                desc["Targmax"] = Base.identity(Targmax)
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MaxPoolWithArgmax") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     substr(input, pos, len)

Return substrings from `Tensor` of strings.

For each string in the input `Tensor`, creates a substring starting at index
`pos` with a total length of `len`.

If `len` defines a substring that would extend beyond the length of the input
string, then as many characters as possible are used.

If `pos` is negative or specifies a character index larger than any of the input
strings, then an `InvalidArgumentError` is thrown.

`pos` and `len` must have the same shape, otherwise a `ValueError` is thrown on
Op creation.

*NOTE*: `Substr` supports broadcasting up to two dimensions. More about
broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)

---

Examples

Using scalar `pos` and `len`:

```
input = [b'Hello', b'World']
position = 1
length = 3

output = [b'ell', b'orl']
```

Using `pos` and `len` with same shape as `input`:

```
input = [[b'ten', b'eleven', b'twelve'],
         [b'thirteen', b'fourteen', b'fifteen'],
         [b'sixteen', b'seventeen', b'eighteen']]
position = [[1, 2, 3],
            [1, 2, 3],
            [1, 2, 3]]
length =   [[2, 3, 4],
            [4, 3, 2],
            [5, 5, 5]]

output = [[b'en', b'eve', b'lve'],
          [b'hirt', b'urt', b'te'],
          [b'ixtee', b'vente', b'hteen']]
```

Broadcasting `pos` and `len` onto `input`:

```
input = [[b'ten', b'eleven', b'twelve'],
         [b'thirteen', b'fourteen', b'fifteen'],
         [b'sixteen', b'seventeen', b'eighteen'],
         [b'nineteen', b'twenty', b'twentyone']]
position = [1, 2, 3]
length =   [1, 2, 3]

output = [[b'e', b'ev', b'lve'],
          [b'h', b'ur', b'tee'],
          [b'i', b've', b'hte'],
          [b'i', b'en', b'nty']]
```

Broadcasting `input` onto `pos` and `len`:

```
input = b'thirteen'
position = [1, 5, 7]
length =   [3, 2, 1]

output = [b'hir', b'ee', b'n"]
```
"""
tf.@op function substr(v6941, v6942, v6943; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Substr") 
                    begin  
                        begin  
                            v6941 = convert(TensorFlow.Tensor{Any}, v6941) 
                            begin  
                            end
                        end
                        begin  
                            v6942 = convert(TensorFlow.Tensor{Any}, v6942) 
                            begin  
                            end
                        end
                        begin  
                            v6943 = convert(TensorFlow.Tensor{Any}, v6943) 
                            begin  
                            end
                        end
                        begin  
                            (v6942, v6943) = tf.tf_promote(v6942, v6943)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6941)
                        end
                        begin  
                            tf.add_input(desc, v6942)
                        end
                        begin  
                            tf.add_input(desc, v6943)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Substr") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     slice(input, begin, size)

Return a slice from 'input'.

The output tensor is a tensor with dimensions described by 'size'
whose values are extracted from 'input' starting at the offsets in
'begin'.

*Requirements*:
  0 <= begin[i] <= begin[i] + size[i] <= Di  for i in [0, n)
"""
tf.@op function slice(v6944, v6945, v6946; name=nothing, T=nothing, Index=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Slice") 
                    begin  
                        begin  
                            v6944 = convert(TensorFlow.Tensor{Any}, v6944) 
                            begin  
                            end
                        end
                        begin  
                            v6945 = convert(TensorFlow.Tensor{Any}, v6945) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6946 = convert(TensorFlow.Tensor{Any}, v6946) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6944,) = tf.tf_promote(v6944)
                        end
                        begin  
                            (v6945, v6946) = tf.tf_promote(v6945, v6946)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6944)
                        end
                        begin  
                            tf.add_input(desc, v6945)
                        end
                        begin  
                            tf.add_input(desc, v6946)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Index !== nothing 
                                desc["Index"] = Base.identity(Index)
                            end
                        end
                    end
                end), name, "Slice") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     queue_size(handle)

Computes the number of elements in the given queue.


"""
tf.@op function queue_size(v6947; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueSize") 
                    begin  
                        begin  
                            v6947 = convert(TensorFlow.Tensor{Any}, v6947) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6947)
                        end
                    end 
                    begin  
                    end
                end), name, "QueueSize") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_ifft_3d(input)




"""
tf.@op function batch_ifft_3d(v6948; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchIFFT3D") 
                    begin  
                        begin  
                            v6948 = convert(TensorFlow.Tensor{Any}, v6948) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6948)
                        end
                    end 
                    begin  
                    end
                end), name, "BatchIFFT3D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     quantized_relu_x(features, max_value, min_features, max_features; out_type=?)

Computes Quantized Rectified Linear X: `min(max(features, 0), max_value)`


"""
tf.@op function quantized_relu_x(v6949, v6950, v6951, v6952; name=nothing, Tinput=nothing, out_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedReluX") 
                    begin  
                        begin  
                            v6949 = convert(TensorFlow.Tensor{Any}, v6949) 
                            begin  
                            end
                        end
                        begin  
                            v6950 = convert(TensorFlow.Tensor{Any}, v6950) 
                            begin  
                            end
                        end
                        begin  
                            v6951 = convert(TensorFlow.Tensor{Any}, v6951) 
                            begin  
                            end
                        end
                        begin  
                            v6952 = convert(TensorFlow.Tensor{Any}, v6952) 
                            begin  
                            end
                        end
                        begin  
                            (v6949,) = tf.tf_promote(v6949)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6949)
                        end
                        begin  
                            tf.add_input(desc, v6950)
                        end
                        begin  
                            tf.add_input(desc, v6951)
                        end
                        begin  
                            tf.add_input(desc, v6952)
                        end
                    end 
                    begin  
                        begin  
                            if Tinput !== nothing 
                                desc["Tinput"] = Base.identity(Tinput)
                            end
                        end
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                    end
                end), name, "QuantizedReluX") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     sparse_segment_mean(data, indices, segment_ids; Tidx=Int32)

Computes the mean along sparse segments of a tensor.

Read [the section on
Segmentation](../../api_docs/python/math_ops.md#segmentation) for an explanation
of segments.

Like `SegmentMean`, but `segment_ids` can have rank less than `data`'s first
dimension, selecting a subset of dimension 0, specified by `indices`.
"""
tf.@op function sparse_segment_mean(v6953, v6954, v6955; name=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseSegmentMean") 
                    begin  
                        begin  
                            v6953 = convert(TensorFlow.Tensor{Any}, v6953) 
                            begin  
                            end
                        end
                        begin  
                            v6954 = convert(TensorFlow.Tensor{Int32}, v6954) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6955 = convert(TensorFlow.Tensor{Any}, v6955) 
                            begin  
                            end
                        end
                        begin  
                            (v6953,) = tf.tf_promote(v6953)
                        end
                        begin  
                            (v6954,) = tf.tf_promote(v6954)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6953)
                        end
                        begin  
                            tf.add_input(desc, v6954)
                        end
                        begin  
                            tf.add_input(desc, v6955)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "SparseSegmentMean") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fft_2d(input)

Compute the 2-dimensional discrete Fourier Transform over the inner-most

2 dimensions of `input`.
"""
tf.@op function fft_2d(v6956; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FFT2D") 
                    begin  
                        begin  
                            v6956 = convert(TensorFlow.Tensor{Any}, v6956) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6956)
                        end
                    end 
                    begin  
                    end
                end), name, "FFT2D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     random_shuffle_queue(; shapes=Int64[], capacity=-1, min_after_dequeue=0, seed=0, seed2=0, container=, shared_name=)

A queue that randomizes the order of elements.


"""
tf.@op function random_shuffle_queue(; name=nothing, component_types=nothing, shapes=nothing, capacity=nothing, min_after_dequeue=nothing, seed=nothing, seed2=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RandomShuffleQueue") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if shapes !== nothing 
                                desc["shapes"] = Base.identity.shapes
                            end
                        end
                        begin  
                            if capacity !== nothing 
                                desc["capacity"] = Base.Int(capacity)
                            end
                        end
                        begin  
                            if min_after_dequeue !== nothing 
                                desc["min_after_dequeue"] = Base.Int(min_after_dequeue)
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "RandomShuffleQueue") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_segment_sqrt_ng(grad, indices, segment_ids, output_dim0; Tidx=Int32)

Computes gradients for SparseSegmentSqrtN.

Returns tensor "output" with same shape as grad, except for dimension 0 whose
value is output_dim0.
"""
tf.@op function sparse_segment_sqrt_ng(v6957, v6958, v6959, v6960; name=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseSegmentSqrtNGrad") 
                    begin  
                        begin  
                            v6957 = convert(TensorFlow.Tensor{Any}, v6957) 
                            begin  
                            end
                        end
                        begin  
                            v6958 = convert(TensorFlow.Tensor{Int32}, v6958) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v6959 = convert(TensorFlow.Tensor{Any}, v6959) 
                            begin  
                            end
                        end
                        begin  
                            v6960 = convert(TensorFlow.Tensor{Any}, v6960) 
                            begin  
                            end
                        end
                        begin  
                            (v6957,) = tf.tf_promote(v6957)
                        end
                        begin  
                            (v6958,) = tf.tf_promote(v6958)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6957)
                        end
                        begin  
                            tf.add_input(desc, v6958)
                        end
                        begin  
                            tf.add_input(desc, v6959)
                        end
                        begin  
                            tf.add_input(desc, v6960)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "SparseSegmentSqrtNGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     segment_mean(data, segment_ids)

Computes the mean along segments of a tensor.

Read [the section on
Segmentation](../../api_docs/python/math_ops.md#segmentation) for an explanation
of segments.

Computes a tensor such that
\\(output_i = \frac{\sum_j data_j}{N}\\) where `mean` is
over `j` such that `segment_ids[j] == i` and `N` is the total number of
values summed.

If the mean is empty for a given segment ID `i`, `output[i] = 0`.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/SegmentMean.png" alt>
</div>
"""
tf.@op function segment_mean(v6961, v6962; name=nothing, T=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SegmentMean") 
                    begin  
                        begin  
                            v6961 = convert(TensorFlow.Tensor{Any}, v6961) 
                            begin  
                            end
                        end
                        begin  
                            v6962 = convert(TensorFlow.Tensor{Any}, v6962) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6961,) = tf.tf_promote(v6961)
                        end
                        begin  
                            (v6962,) = tf.tf_promote(v6962)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6961)
                        end
                        begin  
                            tf.add_input(desc, v6962)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "SegmentMean") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     real(input; T=Complex{Float32}, Tout=Float32)

Returns the real part of a complex number.

Given a tensor `input` of complex numbers, this operation returns a tensor of
type `float` that is the real part of each element in `input`. All elements in
`input` must be complex numbers of the form \\(a + bj\\), where *a* is the real
 part returned by this operation and *b* is the imaginary part.

For example:

```
# tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]
tf.real(input) ==> [-2.25, 3.25]
```
"""
tf.@op function real(v6963; name=nothing, T=nothing, Tout=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Real") 
                    begin  
                        begin  
                            v6963 = convert(TensorFlow.Tensor{Complex{Float32}}, v6963) 
                            begin  
                            end
                        end
                        begin  
                            (v6963,) = tf.tf_promote(v6963)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6963)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tout !== nothing 
                                desc["Tout"] = Base.identity(Tout)
                            end
                        end
                    end
                end), name, "Real") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sigmoid(x)

Computes sigmoid of `x` element-wise.

Specifically, `y = 1 / (1 + exp(-x))`.
"""
tf.@op function sigmoid(v6964; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Sigmoid") 
                    begin  
                        begin  
                            v6964 = convert(TensorFlow.Tensor{Any}, v6964) 
                            begin  
                            end
                        end
                        begin  
                            (v6964,) = tf.tf_promote(v6964)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6964)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Sigmoid") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     all_candidate_sampler(true_classes; seed=0, seed2=0)

Generates labels for candidate sampling with a learned unigram distribution.

See explanations of candidate sampling and the data formats at
go/candidate-sampling.

For each batch, this op picks a single set of sampled candidate labels.

The advantages of sampling candidates per-batch are simplicity and the
possibility of efficient dense matrix multiplication. The disadvantage is that
the sampled candidates must be chosen independently of the context and of the
true labels.
"""
tf.@op function all_candidate_sampler(v6965; name=nothing, num_true=nothing, num_sampled=nothing, unique=nothing, seed=nothing, seed2=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AllCandidateSampler") 
                    begin  
                        begin  
                            v6965 = convert(TensorFlow.Tensor{Any}, v6965) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6965)
                        end
                    end 
                    begin  
                        begin  
                            if num_true !== nothing 
                                desc["num_true"] = Base.Int(num_true)
                            end
                        end
                        begin  
                            if num_sampled !== nothing 
                                desc["num_sampled"] = Base.Int(num_sampled)
                            end
                        end
                        begin  
                            if unique !== nothing 
                                desc["unique"] = Base.Bool(unique)
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                    end
                end), name, "AllCandidateSampler") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     conv_2d_backprop_input(input_sizes, filter, out_backprop; use_cudnn_on_gpu=true, data_format=NHWC)

Computes the gradients of convolution with respect to the input.


"""
tf.@op function conv_2d_backprop_input(v6966, v6967, v6968; name=nothing, T=nothing, strides=nothing, use_cudnn_on_gpu=nothing, padding=nothing, data_format=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Conv2DBackpropInput") 
                    begin  
                        begin  
                            v6966 = convert(TensorFlow.Tensor{Any}, v6966) 
                            begin  
                            end
                        end
                        begin  
                            v6967 = convert(TensorFlow.Tensor{Any}, v6967) 
                            begin  
                            end
                        end
                        begin  
                            v6968 = convert(TensorFlow.Tensor{Any}, v6968) 
                            begin  
                            end
                        end
                        begin  
                            (v6967, v6968) = tf.tf_promote(v6967, v6968)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6966)
                        end
                        begin  
                            tf.add_input(desc, v6967)
                        end
                        begin  
                            tf.add_input(desc, v6968)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if use_cudnn_on_gpu !== nothing 
                                desc["use_cudnn_on_gpu"] = Base.Bool(use_cudnn_on_gpu)
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                    end
                end), name, "Conv2DBackpropInput") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     rfft_2d(input, fft_length)

Compute the 2-dimensional discrete Fourier Transform of a real-valued signal

over the inner-most 2 dimensions of `input`.

Since the DFT of a real signal is Hermitian-symmetric, `RFFT2D` only returns the
`fft_length / 2 + 1` unique components of the FFT for the inner-most dimension
of `output`: the zero-frequency term, followed by the `fft_length / 2`
positive-frequency terms.
"""
tf.@op function rfft_2d(v6969, v6970; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RFFT2D") 
                    begin  
                        begin  
                            v6969 = convert(TensorFlow.Tensor{Any}, v6969) 
                            begin  
                            end
                        end
                        begin  
                            v6970 = convert(TensorFlow.Tensor{Any}, v6970) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6969)
                        end
                        begin  
                            tf.add_input(desc, v6970)
                        end
                    end 
                    begin  
                    end
                end), name, "RFFT2D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_size_v2(handle, flow_in)

Deprecated. Use TensorArraySizeV3


"""
tf.@op function tensor_array_size_v2(v6971, v6972; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArraySizeV2") 
                    begin  
                        begin  
                            v6971 = convert(TensorFlow.Tensor{Any}, v6971) 
                            begin  
                            end
                        end
                        begin  
                            v6972 = convert(TensorFlow.Tensor{Any}, v6972) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6971)
                        end
                        begin  
                            tf.add_input(desc, v6972)
                        end
                    end 
                    begin  
                    end
                end), name, "TensorArraySizeV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_apply_proximal_adagrad(var, accum, lr, l1, l2, grad; use_locking=false)

Update '*var' and '*accum' according to FOBOS with Adagrad learning rate.

accum += grad * grad
prox_v = var - lr * grad * (1 / sqrt(accum))
var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}
"""
tf.@op function resource_apply_proximal_adagrad(v6973, v6974, v6975, v6976, v6977, v6978; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceApplyProximalAdagrad") 
                    begin  
                        begin  
                            v6973 = convert(TensorFlow.Tensor{Any}, v6973) 
                            begin  
                            end
                        end
                        begin  
                            v6974 = convert(TensorFlow.Tensor{Any}, v6974) 
                            begin  
                            end
                        end
                        begin  
                            v6975 = convert(TensorFlow.Tensor{Any}, v6975) 
                            begin  
                            end
                        end
                        begin  
                            v6976 = convert(TensorFlow.Tensor{Any}, v6976) 
                            begin  
                            end
                        end
                        begin  
                            v6977 = convert(TensorFlow.Tensor{Any}, v6977) 
                            begin  
                            end
                        end
                        begin  
                            v6978 = convert(TensorFlow.Tensor{Any}, v6978) 
                            begin  
                            end
                        end
                        begin  
                            (v6975, v6976, v6977, v6978) = tf.tf_promote(v6975, v6976, v6977, v6978)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6973)
                        end
                        begin  
                            tf.add_input(desc, v6974)
                        end
                        begin  
                            tf.add_input(desc, v6975)
                        end
                        begin  
                            tf.add_input(desc, v6976)
                        end
                        begin  
                            tf.add_input(desc, v6977)
                        end
                        begin  
                            tf.add_input(desc, v6978)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceApplyProximalAdagrad") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     var_is_initialized_op(resource)

Checks whether a resource handle-based variable has been initialized.


"""
tf.@op function var_is_initialized_op(v6979; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("VarIsInitializedOp") 
                    begin  
                        begin  
                            v6979 = convert(TensorFlow.Tensor{Any}, v6979) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6979)
                        end
                    end 
                    begin  
                    end
                end), name, "VarIsInitializedOp") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     max_pool_3d(input)

Performs 3D max pooling on the input.


"""
tf.@op function max_pool_3d(v6980; name=nothing, ksize=nothing, strides=nothing, padding=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MaxPool3D") 
                    begin  
                        begin  
                            v6980 = convert(TensorFlow.Tensor{Any}, v6980) 
                            begin  
                            end
                        end
                        begin  
                            (v6980,) = tf.tf_promote(v6980)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6980)
                        end
                    end 
                    begin  
                        begin  
                            if ksize !== nothing 
                                desc["ksize"] = Base.identity.ksize
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MaxPool3D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fake_quant_with_min_max_vars_gradient(gradients, inputs, min, max)

Compute gradients for a FakeQuantWithMinMaxVars operation.


"""
tf.@op function fake_quant_with_min_max_vars_gradient(v6981, v6982, v6983, v6984; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FakeQuantWithMinMaxVarsGradient") 
                    begin  
                        begin  
                            v6981 = convert(TensorFlow.Tensor{Any}, v6981) 
                            begin  
                            end
                        end
                        begin  
                            v6982 = convert(TensorFlow.Tensor{Any}, v6982) 
                            begin  
                            end
                        end
                        begin  
                            v6983 = convert(TensorFlow.Tensor{Any}, v6983) 
                            begin  
                            end
                        end
                        begin  
                            v6984 = convert(TensorFlow.Tensor{Any}, v6984) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6981)
                        end
                        begin  
                            tf.add_input(desc, v6982)
                        end
                        begin  
                            tf.add_input(desc, v6983)
                        end
                        begin  
                            tf.add_input(desc, v6984)
                        end
                    end 
                    begin  
                    end
                end), name, "FakeQuantWithMinMaxVarsGradient") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     prod(input, reduction_indices; keep_dims=false, Tidx=Int32)

Computes the product of elements across dimensions of a tensor.

Reduces `input` along the dimensions given in `reduction_indices`. Unless
`keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
`reduction_indices`. If `keep_dims` is true, the reduced dimensions are
retained with length 1.
"""
tf.@op function prod(v6985, v6986; name=nothing, keep_dims=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Prod") 
                    begin  
                        begin  
                            v6985 = convert(TensorFlow.Tensor{Any}, v6985) 
                            begin  
                            end
                        end
                        begin  
                            v6986 = convert(TensorFlow.Tensor{Int32}, v6986) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v6985,) = tf.tf_promote(v6985)
                        end
                        begin  
                            (v6986,) = tf.tf_promote(v6986)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6985)
                        end
                        begin  
                            tf.add_input(desc, v6986)
                        end
                    end 
                    begin  
                        begin  
                            if keep_dims !== nothing 
                                desc["keep_dims"] = Base.Bool(keep_dims)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "Prod") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_gather_v2(handle, indices, flow_in; element_shape=TensorShape[unknown])

Deprecated. Use TensorArrayGatherV3


"""
tf.@op function tensor_array_gather_v2(v6987, v6988, v6989; name=nothing, dtype=nothing, element_shape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayGatherV2") 
                    begin  
                        begin  
                            v6987 = convert(TensorFlow.Tensor{Any}, v6987) 
                            begin  
                            end
                        end
                        begin  
                            v6988 = convert(TensorFlow.Tensor{Any}, v6988) 
                            begin  
                            end
                        end
                        begin  
                            v6989 = convert(TensorFlow.Tensor{Any}, v6989) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6987)
                        end
                        begin  
                            tf.add_input(desc, v6988)
                        end
                        begin  
                            tf.add_input(desc, v6989)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if element_shape !== nothing 
                                desc["element_shape"] = Base.identity(element_shape)
                            end
                        end
                    end
                end), name, "TensorArrayGatherV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fused_resize_and_pad_conv_2d(input, size, paddings, filter; resize_align_corners=false)

Performs a resize and padding as a preprocess during a convolution.

It's often possible to do spatial transformations more efficiently as part of
the packing stage of a convolution, so this op allows for an optimized
implementation where these stages are fused together. This prevents the need to
write out the intermediate results as whole tensors, reducing memory pressure,
and we can get some latency gains by merging the transformation calculations.
The data_format attribute for Conv2D isn't supported by this op, and defaults to
'NHWC' order.
Internally this op uses a single per-graph scratch buffer, which means that it
will block if multiple versions are being run in parallel. This is because this
operator is primarily an optimization to minimize memory usage.
"""
tf.@op function fused_resize_and_pad_conv_2d(v6990, v6991, v6992, v6993; name=nothing, T=nothing, resize_align_corners=nothing, mode=nothing, strides=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FusedResizeAndPadConv2D") 
                    begin  
                        begin  
                            v6990 = convert(TensorFlow.Tensor{Any}, v6990) 
                            begin  
                            end
                        end
                        begin  
                            v6991 = convert(TensorFlow.Tensor{Any}, v6991) 
                            begin  
                            end
                        end
                        begin  
                            v6992 = convert(TensorFlow.Tensor{Any}, v6992) 
                            begin  
                            end
                        end
                        begin  
                            v6993 = convert(TensorFlow.Tensor{Any}, v6993) 
                            begin  
                            end
                        end
                        begin  
                            (v6990, v6993) = tf.tf_promote(v6990, v6993)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6990)
                        end
                        begin  
                            tf.add_input(desc, v6991)
                        end
                        begin  
                            tf.add_input(desc, v6992)
                        end
                        begin  
                            tf.add_input(desc, v6993)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if resize_align_corners !== nothing 
                                desc["resize_align_corners"] = Base.Bool(resize_align_corners)
                            end
                        end
                        begin  
                            if mode !== nothing 
                                desc["mode"] = Base.String(mode)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "FusedResizeAndPadConv2D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     less(x, y)

Returns the truth value of (x < y) element-wise.

*NOTE*: `Less` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function less(v6994, v6995; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Less") 
                    begin  
                        begin  
                            v6994 = convert(TensorFlow.Tensor{Any}, v6994) 
                            begin  
                            end
                        end
                        begin  
                            v6995 = convert(TensorFlow.Tensor{Any}, v6995) 
                            begin  
                            end
                        end
                        begin  
                            (v6994, v6995) = tf.tf_promote(v6994, v6995)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6994)
                        end
                        begin  
                            tf.add_input(desc, v6995)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Less") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     self_adjoint_eig_v2(input; compute_v=true)

Computes the eigen decomposition of one or more square self-adjoint matrices.

Computes the eigenvalues and (optionally) eigenvectors of each inner matrix in
`input` such that `input[..., :, :] = v[..., :, :] * diag(e[..., :])`.

```prettyprint
# a is a tensor.
# e is a tensor of eigenvalues.
# v is a tensor of eigenvectors.
e, v = self_adjoint_eig(a)
e = self_adjoint_eig(a, compute_v=False)
```
"""
tf.@op function self_adjoint_eig_v2(v6996; name=nothing, compute_v=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SelfAdjointEigV2") 
                    begin  
                        begin  
                            v6996 = convert(TensorFlow.Tensor{Any}, v6996) 
                            begin  
                            end
                        end
                        begin  
                            (v6996,) = tf.tf_promote(v6996)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6996)
                        end
                    end 
                    begin  
                        begin  
                            if compute_v !== nothing 
                                desc["compute_v"] = Base.Bool(compute_v)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SelfAdjointEigV2") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     random_poisson(shape, rate; seed=0, seed2=0)

Outputs random values from the Poisson distribution(s) described by rate.

This op uses two algorithms, depending on rate. If rate >= 10, then
the algorithm by Hormann is used to acquire samples via
transformation-rejection.
See http://www.sciencedirect.com/science/article/pii/0167668793909974.

Otherwise, Knuth's algorithm is used to acquire samples via multiplying uniform
random variables.
See Donald E. Knuth (1969). Seminumerical Algorithms. The Art of Computer
Programming, Volume 2. Addison Wesley
"""
tf.@op function random_poisson(v6997, v6998; name=nothing, seed=nothing, seed2=nothing, S=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RandomPoisson") 
                    begin  
                        begin  
                            v6997 = convert(TensorFlow.Tensor{Any}, v6997) 
                            begin  
                            end
                        end
                        begin  
                            v6998 = convert(TensorFlow.Tensor{Any}, v6998) 
                            begin  
                            end
                        end
                        begin  
                            (v6998,) = tf.tf_promote(v6998)
                        end
                        begin  
                            (v6997,) = tf.tf_promote(v6997)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6997)
                        end
                        begin  
                            tf.add_input(desc, v6998)
                        end
                    end 
                    begin  
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if S !== nothing 
                                desc["S"] = Base.identity(S)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "RandomPoisson") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reverse_sequence(input, seq_lengths; batch_dim=0, Tlen=Int64)

Reverses variable length slices.

This op first slices `input` along the dimension `batch_dim`, and for each
slice `i`, reverses the first `seq_lengths[i]` elements along
the dimension `seq_dim`.

The elements of `seq_lengths` must obey `seq_lengths[i] <= input.dims[seq_dim]`,
and `seq_lengths` must be a vector of length `input.dims[batch_dim]`.

The output slice `i` along dimension `batch_dim` is then given by input
slice `i`, with the first `seq_lengths[i]` slices along dimension
`seq_dim` reversed.

For example:

```prettyprint
# Given this:
batch_dim = 0
seq_dim = 1
input.dims = (4, 8, ...)
seq_lengths = [7, 2, 3, 5]

# then slices of input are reversed on seq_dim, but only up to seq_lengths:
output[0, 0:7, :, ...] = input[0, 7:0:-1, :, ...]
output[1, 0:2, :, ...] = input[1, 2:0:-1, :, ...]
output[2, 0:3, :, ...] = input[2, 3:0:-1, :, ...]
output[3, 0:5, :, ...] = input[3, 5:0:-1, :, ...]

# while entries past seq_lens are copied through:
output[0, 7:, :, ...] = input[0, 7:, :, ...]
output[1, 2:, :, ...] = input[1, 2:, :, ...]
output[2, 3:, :, ...] = input[2, 3:, :, ...]
output[3, 2:, :, ...] = input[3, 2:, :, ...]
```

In contrast, if:

```prettyprint
# Given this:
batch_dim = 2
seq_dim = 0
input.dims = (8, ?, 4, ...)
seq_lengths = [7, 2, 3, 5]

# then slices of input are reversed on seq_dim, but only up to seq_lengths:
output[0:7, :, 0, :, ...] = input[7:0:-1, :, 0, :, ...]
output[0:2, :, 1, :, ...] = input[2:0:-1, :, 1, :, ...]
output[0:3, :, 2, :, ...] = input[3:0:-1, :, 2, :, ...]
output[0:5, :, 3, :, ...] = input[5:0:-1, :, 3, :, ...]

# while entries past seq_lens are copied through:
output[7:, :, 0, :, ...] = input[7:, :, 0, :, ...]
output[2:, :, 1, :, ...] = input[2:, :, 1, :, ...]
output[3:, :, 2, :, ...] = input[3:, :, 2, :, ...]
output[2:, :, 3, :, ...] = input[2:, :, 3, :, ...]
```
"""
tf.@op function reverse_sequence(v6999, v7000; name=nothing, seq_dim=nothing, batch_dim=nothing, T=nothing, Tlen=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReverseSequence") 
                    begin  
                        begin  
                            v6999 = convert(TensorFlow.Tensor{Any}, v6999) 
                            begin  
                            end
                        end
                        begin  
                            v7000 = convert(TensorFlow.Tensor{Int64}, v7000) 
                            begin  
                            end
                        end
                        begin  
                            (v6999,) = tf.tf_promote(v6999)
                        end
                        begin  
                            (v7000,) = tf.tf_promote(v7000)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v6999)
                        end
                        begin  
                            tf.add_input(desc, v7000)
                        end
                    end 
                    begin  
                        begin  
                            if seq_dim !== nothing 
                                desc["seq_dim"] = Base.Int(seq_dim)
                            end
                        end
                        begin  
                            if batch_dim !== nothing 
                                desc["batch_dim"] = Base.Int(batch_dim)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tlen !== nothing 
                                desc["Tlen"] = Base.identity(Tlen)
                            end
                        end
                    end
                end), name, "ReverseSequence") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_sparse_apply_adagrad_da(var, gradient_accumulator, gradient_squared_accumulator, grad, indices, lr, l1, l2, global_step; use_locking=false)

Update entries in '*var' and '*accum' according to the proximal adagrad scheme.


"""
tf.@op function resource_sparse_apply_adagrad_da(v7001, v7002, v7003, v7004, v7005, v7006, v7007, v7008, v7009; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceSparseApplyAdagradDA") 
                    begin  
                        begin  
                            v7001 = convert(TensorFlow.Tensor{Any}, v7001) 
                            begin  
                            end
                        end
                        begin  
                            v7002 = convert(TensorFlow.Tensor{Any}, v7002) 
                            begin  
                            end
                        end
                        begin  
                            v7003 = convert(TensorFlow.Tensor{Any}, v7003) 
                            begin  
                            end
                        end
                        begin  
                            v7004 = convert(TensorFlow.Tensor{Any}, v7004) 
                            begin  
                            end
                        end
                        begin  
                            v7005 = convert(TensorFlow.Tensor{Any}, v7005) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7006 = convert(TensorFlow.Tensor{Any}, v7006) 
                            begin  
                            end
                        end
                        begin  
                            v7007 = convert(TensorFlow.Tensor{Any}, v7007) 
                            begin  
                            end
                        end
                        begin  
                            v7008 = convert(TensorFlow.Tensor{Any}, v7008) 
                            begin  
                            end
                        end
                        begin  
                            v7009 = convert(TensorFlow.Tensor{Any}, v7009) 
                            begin  
                            end
                        end
                        begin  
                            (v7004, v7006, v7007, v7008) = tf.tf_promote(v7004, v7006, v7007, v7008)
                        end
                        begin  
                            (v7005,) = tf.tf_promote(v7005)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7001)
                        end
                        begin  
                            tf.add_input(desc, v7002)
                        end
                        begin  
                            tf.add_input(desc, v7003)
                        end
                        begin  
                            tf.add_input(desc, v7004)
                        end
                        begin  
                            tf.add_input(desc, v7005)
                        end
                        begin  
                            tf.add_input(desc, v7006)
                        end
                        begin  
                            tf.add_input(desc, v7007)
                        end
                        begin  
                            tf.add_input(desc, v7008)
                        end
                        begin  
                            tf.add_input(desc, v7009)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceSparseApplyAdagradDA") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     temporary_variable(; var_name=)

Returns a tensor that may be mutated, but only persists within a single step.

This is an experimental op for internal use only and it is possible to use this
op in unsafe ways.  DO NOT USE unless you fully understand the risks.

It is the caller's responsibility to ensure that 'ref' is eventually passed to a
matching 'DestroyTemporaryVariable' op after all other uses have completed.

Outputs a ref to the tensor state so it may be read or modified.

  E.g.
      var = state_ops._temporary_variable([1, 2], types.float_)
      var_name = var.op.name
      var = state_ops.assign(var, [[4.0, 5.0]])
      var = state_ops.assign_add(var, [[6.0, 7.0]])
      final = state_ops._destroy_temporary_variable(var, var_name=var_name)
"""
tf.@op function temporary_variable(; name=nothing, shape=nothing, dtype=nothing, var_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TemporaryVariable") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if shape !== nothing 
                                desc["shape"] = Base.identity(shape)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if var_name !== nothing 
                                desc["var_name"] = Base.String(var_name)
                            end
                        end
                    end
                end), name, "TemporaryVariable") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_to_space_nd(input, block_shape, crops; Tblock_shape=Int32, Tcrops=Int32)

BatchToSpace for N-D tensors of type T.

This operation reshapes the "batch" dimension 0 into `M + 1` dimensions of shape
`block_shape + [batch]`, interleaves these blocks back into the grid defined by
the spatial dimensions `[1, ..., M]`, to obtain a result with the same rank as
the input.  The spatial dimensions of this intermediate result are then
optionally cropped according to `crops` to produce the output.  This is the
reverse of SpaceToBatch.  See below for a precise description.
"""
tf.@op function batch_to_space_nd(v7010, v7011, v7012; name=nothing, T=nothing, Tblock_shape=nothing, Tcrops=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchToSpaceND") 
                    begin  
                        begin  
                            v7010 = convert(TensorFlow.Tensor{Any}, v7010) 
                            begin  
                            end
                        end
                        begin  
                            v7011 = convert(TensorFlow.Tensor{Int32}, v7011) 
                            begin  
                            end
                        end
                        begin  
                            v7012 = convert(TensorFlow.Tensor{Int32}, v7012) 
                            begin  
                            end
                        end
                        begin  
                            (v7012,) = tf.tf_promote(v7012)
                        end
                        begin  
                            (v7010,) = tf.tf_promote(v7010)
                        end
                        begin  
                            (v7011,) = tf.tf_promote(v7011)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7010)
                        end
                        begin  
                            tf.add_input(desc, v7011)
                        end
                        begin  
                            tf.add_input(desc, v7012)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tblock_shape !== nothing 
                                desc["Tblock_shape"] = Base.identity(Tblock_shape)
                            end
                        end
                        begin  
                            if Tcrops !== nothing 
                                desc["Tcrops"] = Base.identity(Tcrops)
                            end
                        end
                    end
                end), name, "BatchToSpaceND") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sub(x, y)

Returns x - y element-wise.

*NOTE*: `Sub` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function sub(v7013, v7014; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Sub") 
                    begin  
                        begin  
                            v7013 = convert(TensorFlow.Tensor{Any}, v7013) 
                            begin  
                            end
                        end
                        begin  
                            v7014 = convert(TensorFlow.Tensor{Any}, v7014) 
                            begin  
                            end
                        end
                        begin  
                            (v7013, v7014) = tf.tf_promote(v7013, v7014)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7013)
                        end
                        begin  
                            tf.add_input(desc, v7014)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Sub") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     quantized_bias_add(input, bias, min_input, max_input, min_bias, max_bias)

Adds Tensor 'bias' to Tensor 'input' for Quantized types.

Broadcasts the values of bias on dimensions 0..N-2 of 'input'.
"""
tf.@op function quantized_bias_add(v7015, v7016, v7017, v7018, v7019, v7020; name=nothing, T1=nothing, T2=nothing, out_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedBiasAdd") 
                    begin  
                        begin  
                            v7015 = convert(TensorFlow.Tensor{Any}, v7015) 
                            begin  
                            end
                        end
                        begin  
                            v7016 = convert(TensorFlow.Tensor{Any}, v7016) 
                            begin  
                            end
                        end
                        begin  
                            v7017 = convert(TensorFlow.Tensor{Any}, v7017) 
                            begin  
                            end
                        end
                        begin  
                            v7018 = convert(TensorFlow.Tensor{Any}, v7018) 
                            begin  
                            end
                        end
                        begin  
                            v7019 = convert(TensorFlow.Tensor{Any}, v7019) 
                            begin  
                            end
                        end
                        begin  
                            v7020 = convert(TensorFlow.Tensor{Any}, v7020) 
                            begin  
                            end
                        end
                        begin  
                            (v7015,) = tf.tf_promote(v7015)
                        end
                        begin  
                            (v7016,) = tf.tf_promote(v7016)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7015)
                        end
                        begin  
                            tf.add_input(desc, v7016)
                        end
                        begin  
                            tf.add_input(desc, v7017)
                        end
                        begin  
                            tf.add_input(desc, v7018)
                        end
                        begin  
                            tf.add_input(desc, v7019)
                        end
                        begin  
                            tf.add_input(desc, v7020)
                        end
                    end 
                    begin  
                        begin  
                            if T1 !== nothing 
                                desc["T1"] = Base.identity(T1)
                            end
                        end
                        begin  
                            if T2 !== nothing 
                                desc["T2"] = Base.identity(T2)
                            end
                        end
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                    end
                end), name, "QuantizedBiasAdd") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     string_split(input, delimiter)

Split elements of `input` based on `delimiter` into a `SparseTensor`.

Let N be the size of source (typically N will be the batch size). Split each
element of `input` based on `delimiter` and return a `SparseTensor`
containing the splitted tokens. Empty tokens are ignored.

`delimiter` can be empty, or a string of split characters. If `delimiter` is an
 empty string, each element of `input` is split into individual single-byte
 character strings, including splitting of UTF-8 multibyte sequences. Otherwise
 every character of `delimiter` is a potential split point.

For example:
  N = 2, input[0] is 'hello world' and input[1] is 'a b c', then the output
  will be

  indices = [0, 0;
             0, 1;
             1, 0;
             1, 1;
             1, 2]
  shape = [2, 3]
  values = ['hello', 'world', 'a', 'b', 'c']
"""
tf.@op function string_split(v7021, v7022; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StringSplit") 
                    begin  
                        begin  
                            v7021 = convert(TensorFlow.Tensor{Any}, v7021) 
                            begin  
                            end
                        end
                        begin  
                            v7022 = convert(TensorFlow.Tensor{Any}, v7022) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7021)
                        end
                        begin  
                            tf.add_input(desc, v7022)
                        end
                    end 
                    begin  
                    end
                end), name, "StringSplit") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     crop_and_resize(image, boxes, box_ind, crop_size; method=bilinear, extrapolation_value=nothing)

Extracts crops from the input image tensor and bilinearly resizes them (possibly

with aspect ratio change) to a common output size specified by `crop_size`. This
is more general than the `crop_to_bounding_box` op which extracts a fixed size
slice from the input image and does not allow resizing or aspect ratio change.

Returns a tensor with `crops` from the input `image` at positions defined at the
bounding box locations in `boxes`. The cropped boxes are all resized (with
bilinear interpolation) to a fixed `size = [crop_height, crop_width]`. The
result is a 4-D tensor `[num_boxes, crop_height, crop_width, depth]`.
"""
tf.@op function crop_and_resize(v7023, v7024, v7025, v7026; name=nothing, T=nothing, method=nothing, extrapolation_value=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("CropAndResize") 
                    begin  
                        begin  
                            v7023 = convert(TensorFlow.Tensor{Any}, v7023) 
                            begin  
                            end
                        end
                        begin  
                            v7024 = convert(TensorFlow.Tensor{Any}, v7024) 
                            begin  
                            end
                        end
                        begin  
                            v7025 = convert(TensorFlow.Tensor{Any}, v7025) 
                            begin  
                            end
                        end
                        begin  
                            v7026 = convert(TensorFlow.Tensor{Any}, v7026) 
                            begin  
                            end
                        end
                        begin  
                            (v7023,) = tf.tf_promote(v7023)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7023)
                        end
                        begin  
                            tf.add_input(desc, v7024)
                        end
                        begin  
                            tf.add_input(desc, v7025)
                        end
                        begin  
                            tf.add_input(desc, v7026)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if method !== nothing 
                                desc["method"] = Base.String(method)
                            end
                        end
                        begin  
                            if extrapolation_value !== nothing 
                                desc["extrapolation_value"] = Base.identity(extrapolation_value)
                            end
                        end
                    end
                end), name, "CropAndResize") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     cumprod(x, axis; exclusive=false, reverse=false, Tidx=Int32)

Compute the cumulative product of the tensor `x` along `axis`.

By default, this op performs an inclusive cumprod, which means that the first
element of the input is identical to the first element of the output:
```prettyprint
tf.cumprod([a, b, c]) ==> [a, a * b, a * b * c]
```

By setting the `exclusive` kwarg to `True`, an exclusive cumprod is
performed instead:
```prettyprint
tf.cumprod([a, b, c], exclusive=True) ==> [1, a, a * b]
```

By setting the `reverse` kwarg to `True`, the cumprod is performed in the
opposite direction:
```prettyprint
tf.cumprod([a, b, c], reverse=True) ==> [a * b * c, b * c, c]
```
This is more efficient than using separate `tf.reverse` ops.

The `reverse` and `exclusive` kwargs can also be combined:
```prettyprint
tf.cumprod([a, b, c], exclusive=True, reverse=True) ==> [b * c, c, 1]
```
"""
tf.@op function cumprod(v7027, v7028; name=nothing, exclusive=nothing, reverse=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Cumprod") 
                    begin  
                        begin  
                            v7027 = convert(TensorFlow.Tensor{Any}, v7027) 
                            begin  
                            end
                        end
                        begin  
                            v7028 = convert(TensorFlow.Tensor{Int32}, v7028) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7027,) = tf.tf_promote(v7027)
                        end
                        begin  
                            (v7028,) = tf.tf_promote(v7028)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7027)
                        end
                        begin  
                            tf.add_input(desc, v7028)
                        end
                    end 
                    begin  
                        begin  
                            if exclusive !== nothing 
                                desc["exclusive"] = Base.Bool(exclusive)
                            end
                        end
                        begin  
                            if reverse !== nothing 
                                desc["reverse"] = Base.Bool(reverse)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "Cumprod") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     is_variable_initialized(ref)

Checks whether a tensor has been initialized.

Outputs boolean scalar indicating whether the tensor has been initialized.
"""
tf.@op function is_variable_initialized(v7029; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("IsVariableInitialized") 
                    begin  
                        begin  
                            v7029 = convert(TensorFlow.Tensor{Any}, v7029) 
                            begin  
                            end
                        end
                        begin  
                            (v7029,) = tf.tf_promote(v7029)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7029)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "IsVariableInitialized") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_nd_sub(ref, indices, updates; use_locking=false)

Applies sparse subtraction between `updates` and individual values or slices

within a given variable according to `indices`.

`ref` is a `Tensor` with rank `P` and `indices` is a `Tensor` of rank `Q`.

`indices` must be integer tensor, containing indices into `ref`.
It must be shape `[d_0, ..., d_{Q-2}, K]` where `0 < K <= P`.

The innermost dimension of `indices` (with length `K`) corresponds to
indices into elements (if `K = P`) or slices (if `K < P`) along the `K`th
dimension of `ref`.

`updates` is `Tensor` of rank `Q-1+P-K` with shape:

```
[d_0, ..., d_{Q-2}, ref.shape[K], ..., ref.shape[P-1]].
```

For example, say we want to subtract 4 scattered elements from a rank-1 tensor
with 8 elements. In Python, that subtraction would look like this:

    ref = tf.Variable([1, 2, 3, 4, 5, 6, 7, 8])
    indices = tf.constant([[4], [3], [1], [7]])
    updates = tf.constant([9, 10, 11, 12])
    sub = tf.scatter_nd_sub(ref, indices, updates)
    with tf.Session() as sess:
      print sess.run(sub)

The resulting update to ref would look like this:

    [1, -9, 3, -6, -4, 6, 7, -4]

See [tf.scatter_nd](#scatter_nd) for more details about how to make updates to
slices.
"""
tf.@op function scatter_nd_sub(v7030, v7031, v7032; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ScatterNdSub") 
                    begin  
                        begin  
                            v7030 = convert(TensorFlow.Tensor{Any}, v7030) 
                            begin  
                            end
                        end
                        begin  
                            v7031 = convert(TensorFlow.Tensor{Any}, v7031) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7032 = convert(TensorFlow.Tensor{Any}, v7032) 
                            begin  
                            end
                        end
                        begin  
                            (v7030, v7032) = tf.tf_promote(v7030, v7032)
                        end
                        begin  
                            (v7031,) = tf.tf_promote(v7031)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7030)
                        end
                        begin  
                            tf.add_input(desc, v7031)
                        end
                        begin  
                            tf.add_input(desc, v7032)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ScatterNdSub") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     loop_cond(input)

Forwards the input to the output.

This operator represents the loop termination condition used by the
"pivot" switches of a loop.
"""
tf.@op function loop_cond(v7033; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LoopCond") 
                    begin  
                        begin  
                            v7033 = convert(TensorFlow.Tensor{Any}, v7033) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7033)
                        end
                    end 
                    begin  
                    end
                end), name, "LoopCond") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resize_bilinear(images, size; align_corners=false)

Resize `images` to `size` using bilinear interpolation.

Input images can be of different types but output images are always float.
"""
tf.@op function resize_bilinear(v7034, v7035; name=nothing, T=nothing, align_corners=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResizeBilinear") 
                    begin  
                        begin  
                            v7034 = convert(TensorFlow.Tensor{Any}, v7034) 
                            begin  
                            end
                        end
                        begin  
                            v7035 = convert(TensorFlow.Tensor{Any}, v7035) 
                            begin  
                            end
                        end
                        begin  
                            (v7034,) = tf.tf_promote(v7034)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7034)
                        end
                        begin  
                            tf.add_input(desc, v7035)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if align_corners !== nothing 
                                desc["align_corners"] = Base.Bool(align_corners)
                            end
                        end
                    end
                end), name, "ResizeBilinear") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     assign_add(ref, value; use_locking=false)

Update 'ref' by adding 'value' to it.

This operation outputs "ref" after the update is done.
This makes it easier to chain operations that need to use the reset value.
"""
tf.@op function assign_add(v7036, v7037; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AssignAdd") 
                    begin  
                        begin  
                            v7036 = convert(TensorFlow.Tensor{Any}, v7036) 
                            begin  
                            end
                        end
                        begin  
                            v7037 = convert(TensorFlow.Tensor{Any}, v7037) 
                            begin  
                            end
                        end
                        begin  
                            (v7036, v7037) = tf.tf_promote(v7036, v7037)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7036)
                        end
                        begin  
                            tf.add_input(desc, v7037)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "AssignAdd") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     depth_to_space(input)

DepthToSpace for tensors of type T.

Rearranges data from depth into blocks of spatial data.
This is the reverse transformation of SpaceToDepth. More specifically,
this op outputs a copy of the input tensor where values from the `depth`
dimension are moved in spatial blocks to the `height` and `width` dimensions.
The attr `block_size` indicates the input block size and how the data is moved.

  * Chunks of data of size `block_size * block_size` from depth are rearranged
    into non-overlapping blocks of size `block_size x block_size`
  * The width the output tensor is `input_depth * block_size`, whereas the
    height is `input_height * block_size`.
  * The depth of the input tensor must be divisible by
    `block_size * block_size`.

That is, assuming the input is in the shape:
`[batch, height, width, depth]`,
the shape of the output will be:
`[batch, height*block_size, width*block_size, depth/(block_size*block_size)]`

This operation requires that the input tensor be of rank 4, and that
`block_size` be >=1 and that `block_size * block_size` be a divisor of the
input depth.

This operation is useful for resizing the activations between convolutions
(but keeping all data), e.g. instead of pooling. It is also useful for training
purely convolutional models.

For example, given this input of shape `[1, 1, 1, 4]`, and a block size of 2:

```prettyprint
x = [[[[1, 2, 3, 4]]]]

```

This operation will output a tensor of shape `[1, 2, 2, 1]`:

```prettyprint
   [[[[1], [2]],
     [[3], [4]]]]
```

Here, the input has a batch of 1 and each batch element has shape `[1, 1, 4]`,
the corresponding output will have 2x2 elements and will have a depth of
1 channel (1 = `4 / (block_size * block_size)`).
The output element shape is `[2, 2, 1]`.

For an input tensor with larger depth, here of shape `[1, 1, 1, 12]`, e.g.

```prettyprint
x = [[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]]]
```

This operation, for block size of 2, will return the following tensor of shape
`[1, 2, 2, 3]`

```prettyprint
   [[[[1, 2, 3], [4, 5, 6]],
     [[7, 8, 9], [10, 11, 12]]]]

```

Similarly, for the following input of shape `[1 2 2 4]`, and a block size of 2:

```prettyprint
x =  [[[[1, 2, 3, 4],
       [5, 6, 7, 8]],
      [[9, 10, 11, 12],
       [13, 14, 15, 16]]]]
```

the operator will return the following tensor of shape `[1 4 4 1]`:

```prettyprint
x = [[ [1],   [2],  [5],  [6]],
     [ [3],   [4],  [7],  [8]],
     [ [9],  [10], [13],  [14]],
     [ [11], [12], [15],  [16]]]

```
"""
tf.@op function depth_to_space(v7038; name=nothing, T=nothing, block_size=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DepthToSpace") 
                    begin  
                        begin  
                            v7038 = convert(TensorFlow.Tensor{Any}, v7038) 
                            begin  
                            end
                        end
                        begin  
                            (v7038,) = tf.tf_promote(v7038)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7038)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if block_size !== nothing 
                                desc["block_size"] = Base.Int(block_size)
                            end
                        end
                    end
                end), name, "DepthToSpace") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     destroy_temporary_variable(ref)

Destroys the temporary variable and returns its final value.

Sets output to the value of the Tensor pointed to by 'ref', then destroys
the temporary variable called 'var_name'.
All other uses of 'ref' *must* have executed before this op.
This is typically achieved by chaining the ref through each assign op, or by
using control dependencies.

Outputs the final value of the tensor pointed to by 'ref'.
"""
tf.@op function destroy_temporary_variable(v7039; name=nothing, T=nothing, var_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DestroyTemporaryVariable") 
                    begin  
                        begin  
                            v7039 = convert(TensorFlow.Tensor{Any}, v7039) 
                            begin  
                            end
                        end
                        begin  
                            (v7039,) = tf.tf_promote(v7039)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7039)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if var_name !== nothing 
                                desc["var_name"] = Base.String(var_name)
                            end
                        end
                    end
                end), name, "DestroyTemporaryVariable") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fake_quant_with_min_max_vars(inputs, min, max)

Fake-quantize the 'inputs' tensor of type float via global float scalars `min`

and `max` to 'outputs' tensor of same shape as `inputs`.

[min; max] is the clamping range for the 'inputs' data.  Op divides this range
into 255 steps (total of 256 values), then replaces each 'inputs' value with the
closest of the quantized step values.

This operation has a gradient and thus allows for training `min` and `max` values.
"""
tf.@op function fake_quant_with_min_max_vars(v7040, v7041, v7042; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FakeQuantWithMinMaxVars") 
                    begin  
                        begin  
                            v7040 = convert(TensorFlow.Tensor{Any}, v7040) 
                            begin  
                            end
                        end
                        begin  
                            v7041 = convert(TensorFlow.Tensor{Any}, v7041) 
                            begin  
                            end
                        end
                        begin  
                            v7042 = convert(TensorFlow.Tensor{Any}, v7042) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7040)
                        end
                        begin  
                            tf.add_input(desc, v7041)
                        end
                        begin  
                            tf.add_input(desc, v7042)
                        end
                    end 
                    begin  
                    end
                end), name, "FakeQuantWithMinMaxVars") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array(size; dynamic_size=false, clear_after_read=true, tensor_array_name=, element_shape=TensorShape[unknown])




"""
tf.@op function tensor_array(v7043; name=nothing, dtype=nothing, dynamic_size=nothing, clear_after_read=nothing, tensor_array_name=nothing, element_shape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArray") 
                    begin  
                        begin  
                            v7043 = convert(TensorFlow.Tensor{Any}, v7043) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7043)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if dynamic_size !== nothing 
                                desc["dynamic_size"] = Base.Bool(dynamic_size)
                            end
                        end
                        begin  
                            if clear_after_read !== nothing 
                                desc["clear_after_read"] = Base.Bool(clear_after_read)
                            end
                        end
                        begin  
                            if tensor_array_name !== nothing 
                                desc["tensor_array_name"] = Base.String(tensor_array_name)
                            end
                        end
                        begin  
                            if element_shape !== nothing 
                                desc["element_shape"] = Base.identity(element_shape)
                            end
                        end
                    end
                end), name, "TensorArray") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reader_read_up_to_v2(reader_handle, queue_handle, num_records)

Returns up to `num_records` (key, value) pairs produced by a Reader.

Will dequeue from the input queue if necessary (e.g. when the
Reader needs to start reading from a new file since it has finished
with the previous file).
It may return less than `num_records` even before the last batch.
"""
tf.@op function reader_read_up_to_v2(v7044, v7045, v7046; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderReadUpToV2") 
                    begin  
                        begin  
                            v7044 = convert(TensorFlow.Tensor{Any}, v7044) 
                            begin  
                            end
                        end
                        begin  
                            v7045 = convert(TensorFlow.Tensor{Any}, v7045) 
                            begin  
                            end
                        end
                        begin  
                            v7046 = convert(TensorFlow.Tensor{Any}, v7046) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7044)
                        end
                        begin  
                            tf.add_input(desc, v7045)
                        end
                        begin  
                            tf.add_input(desc, v7046)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderReadUpToV2") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     ref_identity(input)

Return the same ref tensor as the input ref tensor.


"""
tf.@op function ref_identity(v7047; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RefIdentity") 
                    begin  
                        begin  
                            v7047 = convert(TensorFlow.Tensor{Any}, v7047) 
                            begin  
                            end
                        end
                        begin  
                            (v7047,) = tf.tf_promote(v7047)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7047)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "RefIdentity") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     complex(real, imag; T=Float32, Tout=Complex{Float32})

Converts two real numbers to a complex number.

Given a tensor `real` representing the real part of a complex number, and a
tensor `imag` representing the imaginary part of a complex number, this
operation returns complex numbers elementwise of the form \\(a + bj\\), where
*a* represents the `real` part and *b* represents the `imag` part.

The input tensors `real` and `imag` must have the same shape.

For example:

```
# tensor 'real' is [2.25, 3.25]
# tensor `imag` is [4.75, 5.75]
tf.complex(real, imag) ==> [[2.25 + 4.75j], [3.25 + 5.75j]]
```
"""
tf.@op function complex(v7048, v7049; name=nothing, T=nothing, Tout=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Complex") 
                    begin  
                        begin  
                            v7048 = convert(TensorFlow.Tensor{Float32}, v7048) 
                            begin  
                            end
                        end
                        begin  
                            v7049 = convert(TensorFlow.Tensor{Float32}, v7049) 
                            begin  
                            end
                        end
                        begin  
                            (v7048, v7049) = tf.tf_promote(v7048, v7049)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7048)
                        end
                        begin  
                            tf.add_input(desc, v7049)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tout !== nothing 
                                desc["Tout"] = Base.identity(Tout)
                            end
                        end
                    end
                end), name, "Complex") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     scalar_summary(tags, values)

Outputs a `Summary` protocol buffer with scalar values.

The input `tags` and `values` must have the same shape.  The generated summary
has a summary value for each tag-value pair in `tags` and `values`.
"""
tf.@op function scalar_summary(v7050, v7051; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ScalarSummary") 
                    begin  
                        begin  
                            v7050 = convert(TensorFlow.Tensor{Any}, v7050) 
                            begin  
                            end
                        end
                        begin  
                            v7051 = convert(TensorFlow.Tensor{Any}, v7051) 
                            begin  
                            end
                        end
                        begin  
                            (v7051,) = tf.tf_promote(v7051)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7050)
                        end
                        begin  
                            tf.add_input(desc, v7051)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "ScalarSummary") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     max_pool_3d_grad(orig_input, orig_output, grad)

Computes gradients of max pooling function.


"""
tf.@op function max_pool_3d_grad(v7052, v7053, v7054; name=nothing, ksize=nothing, strides=nothing, padding=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MaxPool3DGrad") 
                    begin  
                        begin  
                            v7052 = convert(TensorFlow.Tensor{Any}, v7052) 
                            begin  
                            end
                        end
                        begin  
                            v7053 = convert(TensorFlow.Tensor{Any}, v7053) 
                            begin  
                            end
                        end
                        begin  
                            v7054 = convert(TensorFlow.Tensor{Any}, v7054) 
                            begin  
                            end
                        end
                        begin  
                            (v7054,) = tf.tf_promote(v7054)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7052)
                        end
                        begin  
                            tf.add_input(desc, v7053)
                        end
                        begin  
                            tf.add_input(desc, v7054)
                        end
                    end 
                    begin  
                        begin  
                            if ksize !== nothing 
                                desc["ksize"] = Base.identity.ksize
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MaxPool3DGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     pow(x, y)

Computes the power of one value to another.

Given a tensor `x` and a tensor `y`, this operation computes \\(x^y\\) for
corresponding elements in `x` and `y`. For example:

```
# tensor 'x' is [[2, 2]], [3, 3]]
# tensor 'y' is [[8, 16], [2, 3]]
tf.pow(x, y) ==> [[256, 65536], [9, 27]]
```
"""
tf.@op function pow(v7055, v7056; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Pow") 
                    begin  
                        begin  
                            v7055 = convert(TensorFlow.Tensor{Any}, v7055) 
                            begin  
                            end
                        end
                        begin  
                            v7056 = convert(TensorFlow.Tensor{Any}, v7056) 
                            begin  
                            end
                        end
                        begin  
                            (v7055, v7056) = tf.tf_promote(v7055, v7056)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7055)
                        end
                        begin  
                            tf.add_input(desc, v7056)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Pow") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     bitcast(input)

Bitcasts a tensor from one type to another without copying data.

Given a tensor `input`, this operation returns a tensor that has the same buffer
data as `input` with datatype `type`.

If the input datatype `T` is larger than the output datatype `type` then the
shape changes from [...] to [..., sizeof(`T`)/sizeof(`type`)].

If `T` is smaller than `type`, the operator requires that the rightmost
dimension be equal to sizeof(`type`)/sizeof(`T`). The shape then goes from
[..., sizeof(`type`)/sizeof(`T`)] to [...].

*NOTE*: Bitcast is implemented as a low-level cast, so machines with different
endian orderings will give different results.
"""
tf.@op function bitcast(v7057; name=nothing, T=nothing, type_=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Bitcast") 
                    begin  
                        begin  
                            v7057 = convert(TensorFlow.Tensor{Any}, v7057) 
                            begin  
                            end
                        end
                        begin  
                            (v7057,) = tf.tf_promote(v7057)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7057)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if type_ !== nothing 
                                desc["type"] = Base.identity(type_)
                            end
                        end
                    end
                end), name, "Bitcast") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     ref_next_iteration(data)

Makes its input available to the next iteration.


"""
tf.@op function ref_next_iteration(v7058; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RefNextIteration") 
                    begin  
                        begin  
                            v7058 = convert(TensorFlow.Tensor{Any}, v7058) 
                            begin  
                            end
                        end
                        begin  
                            (v7058,) = tf.tf_promote(v7058)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7058)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "RefNextIteration") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_close_v3(handle)

Delete the TensorArray from its resource container.  This enables

the user to close and release the resource in the middle of a step/run.
"""
tf.@op function tensor_array_close_v3(v7059; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayCloseV3") 
                    begin  
                        begin  
                            v7059 = convert(TensorFlow.Tensor{Any}, v7059) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7059)
                        end
                    end 
                    begin  
                    end
                end), name, "TensorArrayCloseV3") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     padding_fifoq_v2(; shapes=Int64[], capacity=-1, container=, shared_name=)

A queue that produces elements in first-in first-out order.

Variable-size shapes are allowed by setting the corresponding shape dimensions
to 0 in the shape attr.  In this case DequeueMany will pad up to the maximum
size of any given element in the minibatch.  See below for details.
"""
tf.@op function padding_fifoq_v2(; name=nothing, component_types=nothing, shapes=nothing, capacity=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("PaddingFIFOQueueV2") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if shapes !== nothing 
                                desc["shapes"] = Base.identity.shapes
                            end
                        end
                        begin  
                            if capacity !== nothing 
                                desc["capacity"] = Base.Int(capacity)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "PaddingFIFOQueueV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     conv_3d_backprop_input(input, filter, out_backprop)

Computes the gradients of 3-D convolution with respect to the input.


"""
tf.@op function conv_3d_backprop_input(v7060, v7061, v7062; name=nothing, T=nothing, strides=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Conv3DBackpropInput") 
                    begin  
                        begin  
                            v7060 = convert(TensorFlow.Tensor{Any}, v7060) 
                            begin  
                            end
                        end
                        begin  
                            v7061 = convert(TensorFlow.Tensor{Any}, v7061) 
                            begin  
                            end
                        end
                        begin  
                            v7062 = convert(TensorFlow.Tensor{Any}, v7062) 
                            begin  
                            end
                        end
                        begin  
                            (v7060, v7061, v7062) = tf.tf_promote(v7060, v7061, v7062)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7060)
                        end
                        begin  
                            tf.add_input(desc, v7061)
                        end
                        begin  
                            tf.add_input(desc, v7062)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "Conv3DBackpropInput") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     pack(values; axis=0)

Packs a list of `N` rank-`R` tensors into one rank-`(R+1)` tensor.

Packs the `N` tensors in `values` into a tensor with rank one higher than each
tensor in `values`, by packing them along the `axis` dimension.
Given a list of tensors of shape `(A, B, C)`;

if `axis == 0` then the `output` tensor will have the shape `(N, A, B, C)`.
if `axis == 1` then the `output` tensor will have the shape `(A, N, B, C)`.
Etc.

For example:

```prettyprint
# 'x' is [1, 4]
# 'y' is [2, 5]
# 'z' is [3, 6]
pack([x, y, z]) => [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.
pack([x, y, z], axis=1) => [[1, 2, 3], [4, 5, 6]]
```

This is the opposite of `unpack`.
"""
tf.@op function pack(v7063; name=nothing, N=nothing, T=nothing, axis=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Pack") 
                    begin  
                        begin  
                            v7063 = convert.(TensorFlow.Tensor{Any}, v7063) 
                            begin  
                            end
                        end
                        begin  
                            (v7063,) = tf.tf_promote(v7063)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7063)
                        end
                    end 
                    begin  
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if axis !== nothing 
                                desc["axis"] = Base.Int(axis)
                            end
                        end
                    end
                end), name, "Pack") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     priority_queue(; component_types=Int64[], capacity=-1, container=, shared_name=)

A queue that produces elements sorted by the first component value.

Note that the PriorityQueue requires the first component of any element
to be a scalar int64, in addition to the other elements declared by
component_types.  Therefore calls to Enqueue and EnqueueMany (resp. Dequeue
and DequeueMany) on a PriorityQueue will all require (resp. output) one extra
entry in their input (resp. output) lists.
"""
tf.@op function priority_queue(; name=nothing, component_types=nothing, shapes=nothing, capacity=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("PriorityQueue") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if shapes !== nothing 
                                desc["shapes"] = Base.identity.shapes
                            end
                        end
                        begin  
                            if capacity !== nothing 
                                desc["capacity"] = Base.Int(capacity)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "PriorityQueue") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     quantized_batch_norm_with_global_normalization(t, t_min, t_max, m, m_min, m_max, v, v_min, v_max, beta, beta_min, beta_max, gamma, gamma_min, gamma_max)

Quantized Batch normalization.

This op is deprecated and will be removed in the future. Prefer
`tf.nn.batch_normalization`.
"""
tf.@op function quantized_batch_norm_with_global_normalization(v7064, v7065, v7066, v7067, v7068, v7069, v7070, v7071, v7072, v7073, v7074, v7075, v7076, v7077, v7078; name=nothing, Tinput=nothing, out_type=nothing, variance_epsilon=nothing, scale_after_normalization=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedBatchNormWithGlobalNormalization") 
                    begin  
                        begin  
                            v7064 = convert(TensorFlow.Tensor{Any}, v7064) 
                            begin  
                            end
                        end
                        begin  
                            v7065 = convert(TensorFlow.Tensor{Any}, v7065) 
                            begin  
                            end
                        end
                        begin  
                            v7066 = convert(TensorFlow.Tensor{Any}, v7066) 
                            begin  
                            end
                        end
                        begin  
                            v7067 = convert(TensorFlow.Tensor{Any}, v7067) 
                            begin  
                            end
                        end
                        begin  
                            v7068 = convert(TensorFlow.Tensor{Any}, v7068) 
                            begin  
                            end
                        end
                        begin  
                            v7069 = convert(TensorFlow.Tensor{Any}, v7069) 
                            begin  
                            end
                        end
                        begin  
                            v7070 = convert(TensorFlow.Tensor{Any}, v7070) 
                            begin  
                            end
                        end
                        begin  
                            v7071 = convert(TensorFlow.Tensor{Any}, v7071) 
                            begin  
                            end
                        end
                        begin  
                            v7072 = convert(TensorFlow.Tensor{Any}, v7072) 
                            begin  
                            end
                        end
                        begin  
                            v7073 = convert(TensorFlow.Tensor{Any}, v7073) 
                            begin  
                            end
                        end
                        begin  
                            v7074 = convert(TensorFlow.Tensor{Any}, v7074) 
                            begin  
                            end
                        end
                        begin  
                            v7075 = convert(TensorFlow.Tensor{Any}, v7075) 
                            begin  
                            end
                        end
                        begin  
                            v7076 = convert(TensorFlow.Tensor{Any}, v7076) 
                            begin  
                            end
                        end
                        begin  
                            v7077 = convert(TensorFlow.Tensor{Any}, v7077) 
                            begin  
                            end
                        end
                        begin  
                            v7078 = convert(TensorFlow.Tensor{Any}, v7078) 
                            begin  
                            end
                        end
                        begin  
                            (v7064, v7067, v7070, v7073, v7076) = tf.tf_promote(v7064, v7067, v7070, v7073, v7076)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7064)
                        end
                        begin  
                            tf.add_input(desc, v7065)
                        end
                        begin  
                            tf.add_input(desc, v7066)
                        end
                        begin  
                            tf.add_input(desc, v7067)
                        end
                        begin  
                            tf.add_input(desc, v7068)
                        end
                        begin  
                            tf.add_input(desc, v7069)
                        end
                        begin  
                            tf.add_input(desc, v7070)
                        end
                        begin  
                            tf.add_input(desc, v7071)
                        end
                        begin  
                            tf.add_input(desc, v7072)
                        end
                        begin  
                            tf.add_input(desc, v7073)
                        end
                        begin  
                            tf.add_input(desc, v7074)
                        end
                        begin  
                            tf.add_input(desc, v7075)
                        end
                        begin  
                            tf.add_input(desc, v7076)
                        end
                        begin  
                            tf.add_input(desc, v7077)
                        end
                        begin  
                            tf.add_input(desc, v7078)
                        end
                    end 
                    begin  
                        begin  
                            if Tinput !== nothing 
                                desc["Tinput"] = Base.identity(Tinput)
                            end
                        end
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                        begin  
                            if variance_epsilon !== nothing 
                                desc["variance_epsilon"] = Base.identity(variance_epsilon)
                            end
                        end
                        begin  
                            if scale_after_normalization !== nothing 
                                desc["scale_after_normalization"] = Base.Bool(scale_after_normalization)
                            end
                        end
                    end
                end), name, "QuantizedBatchNormWithGlobalNormalization") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     cos(x)

Computes cos of x element-wise.


"""
tf.@op function cos(v7079; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Cos") 
                    begin  
                        begin  
                            v7079 = convert(TensorFlow.Tensor{Any}, v7079) 
                            begin  
                            end
                        end
                        begin  
                            (v7079,) = tf.tf_promote(v7079)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7079)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Cos") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     unique(x; out_idx=Int32)

Finds unique elements in a 1-D tensor.

This operation returns a tensor `y` containing all of the unique elements of `x`
sorted in the same order that they occur in `x`. This operation also returns a
tensor `idx` the same size as `x` that contains the index of each value of `x`
in the unique output `y`. In other words:

`y[idx[i]] = x[i] for i in [0, 1,...,rank(x) - 1]`

For example:

```prettyprint
# tensor 'x' is [1, 1, 2, 4, 4, 4, 7, 8, 8]
y, idx = unique(x)
y ==> [1, 2, 4, 7, 8]
idx ==> [0, 0, 1, 2, 2, 2, 3, 4, 4]
```
"""
tf.@op function unique(v7080; name=nothing, T=nothing, out_idx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Unique") 
                    begin  
                        begin  
                            v7080 = convert(TensorFlow.Tensor{Any}, v7080) 
                            begin  
                            end
                        end
                        begin  
                            (v7080,) = tf.tf_promote(v7080)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7080)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if out_idx !== nothing 
                                desc["out_idx"] = Base.identity(out_idx)
                            end
                        end
                    end
                end), name, "Unique") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     quantize_down_and_shrink_range(input, input_min, input_max)

Convert the quantized 'input' tensor into a lower-precision 'output', using the

actual distribution of the values to maximize the usage of the lower bit depth
and adjusting the output min and max ranges accordingly.

[input_min, input_max] are scalar floats that specify the range for the float
interpretation of the 'input' data. For example, if input_min is -1.0f and
input_max is 1.0f, and we are dealing with quint16 quantized data, then a 0
value in the 16-bit data should be interpreted as -1.0f, and a 65535 means 1.0f.

This operator tries to squeeze as much precision as possible into an output with
a lower bit depth by calculating the actual min and max values found in the
data. For example, maybe that quint16 input has no values lower than 16,384 and
none higher than 49,152. That means only half the range is actually needed, all
the float interpretations are between -0.5f and 0.5f, so if we want to compress
the data into a quint8 output, we can use that range rather than the theoretical
-1.0f to 1.0f that is suggested by the input min and max.

In practice, this is most useful for taking output from operations like
QuantizedMatMul that can produce higher bit-depth outputs than their inputs and
may have large potential output ranges, but in practice have a distribution of
input values that only uses a small fraction of the possible range. By feeding
that output into this operator, we can reduce it from 32 bits down to 8 with
minimal loss of accuracy.
"""
tf.@op function quantize_down_and_shrink_range(v7081, v7082, v7083; name=nothing, Tinput=nothing, out_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizeDownAndShrinkRange") 
                    begin  
                        begin  
                            v7081 = convert(TensorFlow.Tensor{Any}, v7081) 
                            begin  
                            end
                        end
                        begin  
                            v7082 = convert(TensorFlow.Tensor{Any}, v7082) 
                            begin  
                            end
                        end
                        begin  
                            v7083 = convert(TensorFlow.Tensor{Any}, v7083) 
                            begin  
                            end
                        end
                        begin  
                            (v7081,) = tf.tf_promote(v7081)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7081)
                        end
                        begin  
                            tf.add_input(desc, v7082)
                        end
                        begin  
                            tf.add_input(desc, v7083)
                        end
                    end 
                    begin  
                        begin  
                            if Tinput !== nothing 
                                desc["Tinput"] = Base.identity(Tinput)
                            end
                        end
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                    end
                end), name, "QuantizeDownAndShrinkRange") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     tensor_array_grad_v2(handle, flow_in)

Deprecated. Use TensorArrayGradV3


"""
tf.@op function tensor_array_grad_v2(v7084, v7085; name=nothing, source=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayGradV2") 
                    begin  
                        begin  
                            v7084 = convert(TensorFlow.Tensor{Any}, v7084) 
                            begin  
                            end
                        end
                        begin  
                            v7085 = convert(TensorFlow.Tensor{Any}, v7085) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7084)
                        end
                        begin  
                            tf.add_input(desc, v7085)
                        end
                    end 
                    begin  
                        begin  
                            if source !== nothing 
                                desc["source"] = Base.String(source)
                            end
                        end
                    end
                end), name, "TensorArrayGradV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     whole_file_reader_v2(; container=, shared_name=)

A Reader that outputs the entire contents of a file as a value.

To use, enqueue filenames in a Queue.  The output of ReaderRead will
be a filename (key) and the contents of that file (value).
"""
tf.@op function whole_file_reader_v2(; name=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("WholeFileReaderV2") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "WholeFileReaderV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_fft_2d(input)




"""
tf.@op function batch_fft_2d(v7086; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchFFT2D") 
                    begin  
                        begin  
                            v7086 = convert(TensorFlow.Tensor{Any}, v7086) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7086)
                        end
                    end 
                    begin  
                    end
                end), name, "BatchFFT2D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     rank(input)

Returns the rank of a tensor.

This operation returns an integer representing the rank of `input`.

For example:

```prettyprint
# 't' is [[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]
# shape of tensor 't' is [2, 2, 3]
rank(t) ==> 3
```

**Note**: The rank of a tensor is not the same as the rank of a matrix. The rank
of a tensor is the number of indices required to uniquely select each element
of the tensor. Rank is also known as "order", "degree", or "ndims."
"""
tf.@op function rank(v7087; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Rank") 
                    begin  
                        begin  
                            v7087 = convert(TensorFlow.Tensor{Any}, v7087) 
                            begin  
                            end
                        end
                        begin  
                            (v7087,) = tf.tf_promote(v7087)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7087)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Rank") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     abort(; error_msg=, exit_without_error=false)

Raise a exception to abort the process when called. If exit_without_error is true, the process will exit normally, otherwise it will exit with a SIGABORT signal.

Returns nothing but an exception.
"""
tf.@op function abort(; name=nothing, error_msg=nothing, exit_without_error=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Abort") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if error_msg !== nothing 
                                desc["error_msg"] = Base.String(error_msg)
                            end
                        end
                        begin  
                            if exit_without_error !== nothing 
                                desc["exit_without_error"] = Base.Bool(exit_without_error)
                            end
                        end
                    end
                end), name, "Abort") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     fft_3d(input)

Compute the 3-dimensional discrete Fourier Transform over the inner-most 3

dimensions of `input`.
"""
tf.@op function fft_3d(v7088; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FFT3D") 
                    begin  
                        begin  
                            v7088 = convert(TensorFlow.Tensor{Any}, v7088) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7088)
                        end
                    end 
                    begin  
                    end
                end), name, "FFT3D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     apply_ftrl(var, accum, linear, grad, lr, l1, l2, lr_power; use_locking=false)

Update '*var' according to the Ftrl-proximal scheme.

accum_new = accum + grad * grad
linear += grad + (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
var = (sign(linear) * l1 - linear) / quadratic if |linear| > l1 else 0.0
accum = accum_new
"""
tf.@op function apply_ftrl(v7089, v7090, v7091, v7092, v7093, v7094, v7095, v7096; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ApplyFtrl") 
                    begin  
                        begin  
                            v7089 = convert(TensorFlow.Tensor{Any}, v7089) 
                            begin  
                            end
                        end
                        begin  
                            v7090 = convert(TensorFlow.Tensor{Any}, v7090) 
                            begin  
                            end
                        end
                        begin  
                            v7091 = convert(TensorFlow.Tensor{Any}, v7091) 
                            begin  
                            end
                        end
                        begin  
                            v7092 = convert(TensorFlow.Tensor{Any}, v7092) 
                            begin  
                            end
                        end
                        begin  
                            v7093 = convert(TensorFlow.Tensor{Any}, v7093) 
                            begin  
                            end
                        end
                        begin  
                            v7094 = convert(TensorFlow.Tensor{Any}, v7094) 
                            begin  
                            end
                        end
                        begin  
                            v7095 = convert(TensorFlow.Tensor{Any}, v7095) 
                            begin  
                            end
                        end
                        begin  
                            v7096 = convert(TensorFlow.Tensor{Any}, v7096) 
                            begin  
                            end
                        end
                        begin  
                            (v7089, v7090, v7091, v7092, v7093, v7094, v7095, v7096) = tf.tf_promote(v7089, v7090, v7091, v7092, v7093, v7094, v7095, v7096)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7089)
                        end
                        begin  
                            tf.add_input(desc, v7090)
                        end
                        begin  
                            tf.add_input(desc, v7091)
                        end
                        begin  
                            tf.add_input(desc, v7092)
                        end
                        begin  
                            tf.add_input(desc, v7093)
                        end
                        begin  
                            tf.add_input(desc, v7094)
                        end
                        begin  
                            tf.add_input(desc, v7095)
                        end
                        begin  
                            tf.add_input(desc, v7096)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ApplyFtrl") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     assign_sub_variable_op(resource, value)

Subtracts a value from the current value of a variable.

Any ReadVariableOp which depends directly or indirectly on this assign is
guaranteed to see the incremented value or a subsequent newer one.

Outputs the incremented value, which can be used to totally order the
increments to this variable.
"""
tf.@op function assign_sub_variable_op(v7097, v7098; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AssignSubVariableOp") 
                    begin  
                        begin  
                            v7097 = convert(TensorFlow.Tensor{Any}, v7097) 
                            begin  
                            end
                        end
                        begin  
                            v7098 = convert(TensorFlow.Tensor{Any}, v7098) 
                            begin  
                            end
                        end
                        begin  
                            (v7098,) = tf.tf_promote(v7098)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7097)
                        end
                        begin  
                            tf.add_input(desc, v7098)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "AssignSubVariableOp") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     next_iteration(data)

Makes its input available to the next iteration.


"""
tf.@op function next_iteration(v7099; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("NextIteration") 
                    begin  
                        begin  
                            v7099 = convert(TensorFlow.Tensor{Any}, v7099) 
                            begin  
                            end
                        end
                        begin  
                            (v7099,) = tf.tf_promote(v7099)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7099)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "NextIteration") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     ref_exit(data)

Exits the current frame to its parent frame.

Exit makes its input `data` available to the parent frame.
"""
tf.@op function ref_exit(v7100; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RefExit") 
                    begin  
                        begin  
                            v7100 = convert(TensorFlow.Tensor{Any}, v7100) 
                            begin  
                            end
                        end
                        begin  
                            (v7100,) = tf.tf_promote(v7100)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7100)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "RefExit") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sqrt(x)

Computes square root of x element-wise.

I.e., \\(y = \sqrt{x} = x^{1/2}\\).
"""
tf.@op function sqrt(v7101; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Sqrt") 
                    begin  
                        begin  
                            v7101 = convert(TensorFlow.Tensor{Any}, v7101) 
                            begin  
                            end
                        end
                        begin  
                            (v7101,) = tf.tf_promote(v7101)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7101)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Sqrt") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     accumulator_take_gradient(handle, num_required)

Extracts the average gradient in the given ConditionalAccumulator, provided

that sufficient (i.e., more than num_required) gradients have been accumulated.
The op blocks until sufficient gradients have been accumulated.
If the accumulator has already aggregated more than num_required gradients, it
returns the average of the accumulated gradients.
Also automatically increments the recorded global_step in the accumulator by 1,
and resets the aggregate to 0.
"""
tf.@op function accumulator_take_gradient(v7102, v7103; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AccumulatorTakeGradient") 
                    begin  
                        begin  
                            v7102 = convert(TensorFlow.Tensor{Any}, v7102) 
                            begin  
                            end
                        end
                        begin  
                            v7103 = convert(TensorFlow.Tensor{Any}, v7103) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7102)
                        end
                        begin  
                            tf.add_input(desc, v7103)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "AccumulatorTakeGradient") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reciprocal(x)

Computes the reciprocal of x element-wise.

I.e., \\(y = 1 / x\\).
"""
tf.@op function reciprocal(v7104; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Reciprocal") 
                    begin  
                        begin  
                            v7104 = convert(TensorFlow.Tensor{Any}, v7104) 
                            begin  
                            end
                        end
                        begin  
                            (v7104,) = tf.tf_promote(v7104)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7104)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Reciprocal") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_conditional_accumulator(; container=, shared_name=)

A conditional accumulator for aggregating sparse gradients. The accumulator

accepts gradients marked with local_step greater or equal to the most recent
global_step known to the accumulator. The average can be extracted from the
accumulator, provided sufficient gradients have been accumulated. Extracting the
average automatically resets the aggregate to 0, and increments the global_step
recorded by the accumulator.
"""
tf.@op function sparse_conditional_accumulator(; name=nothing, dtype=nothing, shape=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseConditionalAccumulator") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if shape !== nothing 
                                desc["shape"] = Base.identity(shape)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "SparseConditionalAccumulator") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     segment_min(data, segment_ids)

Computes the minimum along segments of a tensor.

Read [the section on
Segmentation](../../api_docs/python/math_ops.md#segmentation) for an explanation
of segments.

Computes a tensor such that
\\(output_i = \min_j(data_j)\\) where `min` is over `j` such
that `segment_ids[j] == i`.

If the min is empty for a given segment ID `i`, `output[i] = 0`.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/SegmentMin.png" alt>
</div>
"""
tf.@op function segment_min(v7105, v7106; name=nothing, T=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SegmentMin") 
                    begin  
                        begin  
                            v7105 = convert(TensorFlow.Tensor{Any}, v7105) 
                            begin  
                            end
                        end
                        begin  
                            v7106 = convert(TensorFlow.Tensor{Any}, v7106) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7105,) = tf.tf_promote(v7105)
                        end
                        begin  
                            (v7106,) = tf.tf_promote(v7106)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7105)
                        end
                        begin  
                            tf.add_input(desc, v7106)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "SegmentMin") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fifoq_v2(; shapes=Int64[], capacity=-1, container=, shared_name=)

A queue that produces elements in first-in first-out order.


"""
tf.@op function fifoq_v2(; name=nothing, component_types=nothing, shapes=nothing, capacity=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FIFOQueueV2") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if shapes !== nothing 
                                desc["shapes"] = Base.identity.shapes
                            end
                        end
                        begin  
                            if capacity !== nothing 
                                desc["capacity"] = Base.Int(capacity)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "FIFOQueueV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fake_quant_with_min_max_vars_per_channel(inputs, min, max)

Fake-quantize the 'inputs' tensor of type float and one of the shapes: `[d]`,

`[b, d]` `[b, h, w, d]` via per-channel floats `min` and `max` of shape `[d]`
to 'outputs' tensor of same shape as `inputs`.

[min; max] is the clamping range for the 'inputs' data in the corresponding
depth channel.  Op divides this range into 255 steps (total of 256 values), then
replaces each 'inputs' value with the closest of the quantized step values.

This operation has a gradient and thus allows for training `min` and `max` values.
"""
tf.@op function fake_quant_with_min_max_vars_per_channel(v7107, v7108, v7109; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FakeQuantWithMinMaxVarsPerChannel") 
                    begin  
                        begin  
                            v7107 = convert(TensorFlow.Tensor{Any}, v7107) 
                            begin  
                            end
                        end
                        begin  
                            v7108 = convert(TensorFlow.Tensor{Any}, v7108) 
                            begin  
                            end
                        end
                        begin  
                            v7109 = convert(TensorFlow.Tensor{Any}, v7109) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7107)
                        end
                        begin  
                            tf.add_input(desc, v7108)
                        end
                        begin  
                            tf.add_input(desc, v7109)
                        end
                    end 
                    begin  
                    end
                end), name, "FakeQuantWithMinMaxVarsPerChannel") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     barrier_ready_size(handle)

Computes the number of complete elements in the given barrier.


"""
tf.@op function barrier_ready_size(v7110; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BarrierReadySize") 
                    begin  
                        begin  
                            v7110 = convert(TensorFlow.Tensor{Any}, v7110) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7110)
                        end
                    end 
                    begin  
                    end
                end), name, "BarrierReadySize") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     variable(; container=, shared_name=)

Use VariableV2 instead.


"""
tf.@op function variable(; name=nothing, shape=nothing, dtype=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Variable") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if shape !== nothing 
                                desc["shape"] = Base.identity(shape)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "Variable") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     cholesky_grad(l, grad)

Computes the reverse mode backpropagated gradient of the Cholesky algorithm.

For an explanation see "Differentiation of the Cholesky algorithm" by
Iain Murray http://arxiv.org/abs/1602.07527.
"""
tf.@op function cholesky_grad(v7111, v7112; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("CholeskyGrad") 
                    begin  
                        begin  
                            v7111 = convert(TensorFlow.Tensor{Any}, v7111) 
                            begin  
                            end
                        end
                        begin  
                            v7112 = convert(TensorFlow.Tensor{Any}, v7112) 
                            begin  
                            end
                        end
                        begin  
                            (v7111, v7112) = tf.tf_promote(v7111, v7112)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7111)
                        end
                        begin  
                            tf.add_input(desc, v7112)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "CholeskyGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     log_uniform_candidate_sampler(true_classes; seed=0, seed2=0)

Generates labels for candidate sampling with a log-uniform distribution.

See explanations of candidate sampling and the data formats at
go/candidate-sampling.

For each batch, this op picks a single set of sampled candidate labels.

The advantages of sampling candidates per-batch are simplicity and the
possibility of efficient dense matrix multiplication. The disadvantage is that
the sampled candidates must be chosen independently of the context and of the
true labels.
"""
tf.@op function log_uniform_candidate_sampler(v7113; name=nothing, num_true=nothing, num_sampled=nothing, unique=nothing, range_max=nothing, seed=nothing, seed2=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LogUniformCandidateSampler") 
                    begin  
                        begin  
                            v7113 = convert(TensorFlow.Tensor{Any}, v7113) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7113)
                        end
                    end 
                    begin  
                        begin  
                            if num_true !== nothing 
                                desc["num_true"] = Base.Int(num_true)
                            end
                        end
                        begin  
                            if num_sampled !== nothing 
                                desc["num_sampled"] = Base.Int(num_sampled)
                            end
                        end
                        begin  
                            if unique !== nothing 
                                desc["unique"] = Base.Bool(unique)
                            end
                        end
                        begin  
                            if range_max !== nothing 
                                desc["range_max"] = Base.Int(range_max)
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                    end
                end), name, "LogUniformCandidateSampler") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     string_to_hash_bucket(string_tensor)

Converts each string in the input Tensor to its hash mod by a number of buckets.

The hash function is deterministic on the content of the string within the
process.

Note that the hash function may change from time to time.
This functionality will be deprecated and it's recommended to use
`tf.string_to_hash_bucket_fast()` or `tf.string_to_hash_bucket_strong()`.
"""
tf.@op function string_to_hash_bucket(v7114; name=nothing, num_buckets=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StringToHashBucket") 
                    begin  
                        begin  
                            v7114 = convert(TensorFlow.Tensor{Any}, v7114) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7114)
                        end
                    end 
                    begin  
                        begin  
                            if num_buckets !== nothing 
                                desc["num_buckets"] = Base.Int(num_buckets)
                            end
                        end
                    end
                end), name, "StringToHashBucket") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     max_pool_grad_with_argmax(input, grad, argmax; T=Float32)

Computes gradients of the maxpooling function.


"""
tf.@op function max_pool_grad_with_argmax(v7115, v7116, v7117; name=nothing, ksize=nothing, strides=nothing, padding=nothing, Targmax=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MaxPoolGradWithArgmax") 
                    begin  
                        begin  
                            v7115 = convert(TensorFlow.Tensor{Float32}, v7115) 
                            begin  
                            end
                        end
                        begin  
                            v7116 = convert(TensorFlow.Tensor{Float32}, v7116) 
                            begin  
                            end
                        end
                        begin  
                            v7117 = convert(TensorFlow.Tensor{Any}, v7117) 
                            begin  
                            end
                        end
                        begin  
                            (v7117,) = tf.tf_promote(v7117)
                        end
                        begin  
                            (v7115, v7116) = tf.tf_promote(v7115, v7116)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7115)
                        end
                        begin  
                            tf.add_input(desc, v7116)
                        end
                        begin  
                            tf.add_input(desc, v7117)
                        end
                    end 
                    begin  
                        begin  
                            if ksize !== nothing 
                                desc["ksize"] = Base.identity.ksize
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if Targmax !== nothing 
                                desc["Targmax"] = Base.identity(Targmax)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MaxPoolGradWithArgmax") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_concat(handle, flow_in; element_shape_except0=TensorShape[unknown])




"""
tf.@op function tensor_array_concat(v7118, v7119; name=nothing, dtype=nothing, element_shape_except0=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayConcat") 
                    begin  
                        begin  
                            v7118 = convert(TensorFlow.Tensor{Any}, v7118) 
                            begin  
                            end
                        end
                        begin  
                            v7119 = convert(TensorFlow.Tensor{Any}, v7119) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7118)
                        end
                        begin  
                            tf.add_input(desc, v7119)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if element_shape_except0 !== nothing 
                                desc["element_shape_except0"] = Base.identity(element_shape_except0)
                            end
                        end
                    end
                end), name, "TensorArrayConcat") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     serialize_sparse(sparse_indices, sparse_values, sparse_shape)

Serialize a `SparseTensor` into a string 3-vector (1-D `Tensor`) object.


"""
tf.@op function serialize_sparse(v7120, v7121, v7122; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SerializeSparse") 
                    begin  
                        begin  
                            v7120 = convert(TensorFlow.Tensor{Any}, v7120) 
                            begin  
                            end
                        end
                        begin  
                            v7121 = convert(TensorFlow.Tensor{Any}, v7121) 
                            begin  
                            end
                        end
                        begin  
                            v7122 = convert(TensorFlow.Tensor{Any}, v7122) 
                            begin  
                            end
                        end
                        begin  
                            (v7121,) = tf.tf_promote(v7121)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7120)
                        end
                        begin  
                            tf.add_input(desc, v7121)
                        end
                        begin  
                            tf.add_input(desc, v7122)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SerializeSparse") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_band_part(input, num_lower, num_upper)

Copy a tensor setting everything outside a central band in each innermost matrix

to zero.

The `band` part is computed as follows:
Assume `input` has `k` dimensions `[I, J, K, ..., M, N]`, then the output is a
tensor with the same shape where

`band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.

The indicator function

`in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower)) &&
                 (num_upper < 0 || (n-m) <= num_upper)`.

For example:

```prettyprint
# if 'input' is [[ 0,  1,  2, 3]
                 [-1,  0,  1, 2]
                 [-2, -1,  0, 1]
                 [-3, -2, -1, 0]],

tf.matrix_band_part(input, 1, -1) ==> [[ 0,  1,  2, 3]
                                       [-1,  0,  1, 2]
                                       [ 0, -1,  0, 1]
                                       [ 0,  0, -1, 0]],

tf.matrix_band_part(input, 2, 1) ==> [[ 0,  1,  0, 0]
                                      [-1,  0,  1, 0]
                                      [-2, -1,  0, 1]
                                      [ 0, -2, -1, 0]]
```

Useful special cases:

```prettyprint
 tf.matrix_band_part(input, 0, -1) ==> Upper triangular part.
 tf.matrix_band_part(input, -1, 0) ==> Lower triangular part.
 tf.matrix_band_part(input, 0, 0) ==> Diagonal.
```
"""
tf.@op function matrix_band_part(v7123, v7124, v7125; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MatrixBandPart") 
                    begin  
                        begin  
                            v7123 = convert(TensorFlow.Tensor{Any}, v7123) 
                            begin  
                            end
                        end
                        begin  
                            v7124 = convert(TensorFlow.Tensor{Any}, v7124) 
                            begin  
                            end
                        end
                        begin  
                            v7125 = convert(TensorFlow.Tensor{Any}, v7125) 
                            begin  
                            end
                        end
                        begin  
                            (v7123,) = tf.tf_promote(v7123)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7123)
                        end
                        begin  
                            tf.add_input(desc, v7124)
                        end
                        begin  
                            tf.add_input(desc, v7125)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MatrixBandPart") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sharded_filename(basename, shard, num_shards)

Generate a sharded filename. The filename is printf formatted as

   %s-%05d-of-%05d, basename, shard, num_shards.
"""
tf.@op function sharded_filename(v7126, v7127, v7128; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ShardedFilename") 
                    begin  
                        begin  
                            v7126 = convert(TensorFlow.Tensor{Any}, v7126) 
                            begin  
                            end
                        end
                        begin  
                            v7127 = convert(TensorFlow.Tensor{Any}, v7127) 
                            begin  
                            end
                        end
                        begin  
                            v7128 = convert(TensorFlow.Tensor{Any}, v7128) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7126)
                        end
                        begin  
                            tf.add_input(desc, v7127)
                        end
                        begin  
                            tf.add_input(desc, v7128)
                        end
                    end 
                    begin  
                    end
                end), name, "ShardedFilename") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     queue_dequeue_up_to(handle, n; timeout_ms=-1)

Dequeues n tuples of one or more tensors from the given queue.

This operation is not supported by all queues.  If a queue does not support
DequeueUpTo, then an Unimplemented error is returned.

If the queue is closed and there are more than 0 but less than n elements
remaining, then instead of returning an OutOfRange error like
QueueDequeueMany, less than `n` elements are returned immediately.  If the queue
is closed and there are 0 elements left in the queue, then an OutOfRange
error is returned just like in QueueDequeueMany.  Otherwise the behavior
is identical to QueueDequeueMany:

This operation concatenates queue-element component tensors along the
0th dimension to make a single component tensor.  All of the components
in the dequeued tuple will have size n in the 0th dimension.

This operation has k outputs, where k is the number of components in
the tuples stored in the given queue, and output i is the ith
component of the dequeued tuple.
"""
tf.@op function queue_dequeue_up_to(v7129, v7130; name=nothing, component_types=nothing, timeout_ms=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueDequeueUpTo") 
                    begin  
                        begin  
                            v7129 = convert(TensorFlow.Tensor{Any}, v7129) 
                            begin  
                            end
                        end
                        begin  
                            v7130 = convert(TensorFlow.Tensor{Any}, v7130) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7129)
                        end
                        begin  
                            tf.add_input(desc, v7130)
                        end
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if timeout_ms !== nothing 
                                desc["timeout_ms"] = Base.Int(timeout_ms)
                            end
                        end
                    end
                end), name, "QueueDequeueUpTo") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     shape_n(input; out_type=Int32)

Returns shape of tensors.

This operation returns N 1-D integer tensors representing shape of `input[i]s`.
"""
tf.@op function shape_n(v7131; name=nothing, N=nothing, T=nothing, out_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ShapeN") 
                    begin  
                        begin  
                            v7131 = convert.(TensorFlow.Tensor{Any}, v7131) 
                            begin  
                            end
                        end
                        begin  
                            (v7131,) = tf.tf_promote(v7131)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7131)
                        end
                    end 
                    begin  
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                    end
                end), name, "ShapeN") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     ref_switch(data, pred)

Forwards the ref tensor `data` to the output port determined by `pred`.

If `pred` is true, the `data` input is forwarded to `output_true`. Otherwise,
the data goes to `output_false`.

See also `Switch` and `Merge`.
"""
tf.@op function ref_switch(v7132, v7133; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RefSwitch") 
                    begin  
                        begin  
                            v7132 = convert(TensorFlow.Tensor{Any}, v7132) 
                            begin  
                            end
                        end
                        begin  
                            v7133 = convert(TensorFlow.Tensor{Any}, v7133) 
                            begin  
                            end
                        end
                        begin  
                            (v7132,) = tf.tf_promote(v7132)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7132)
                        end
                        begin  
                            tf.add_input(desc, v7133)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "RefSwitch") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     ref_merge(inputs)

Forwards the value of an available tensor from `inputs` to `output`.

`Merge` waits for at least one of the tensors in `inputs` to become available.
It is usually combined with `Switch` to implement branching.

`Merge` forwards the first tensor for become available to `output`, and sets
`value_index` to its index in `inputs`.
"""
tf.@op function ref_merge(v7134; name=nothing, T=nothing, N=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RefMerge") 
                    begin  
                        begin  
                            v7134 = convert.(TensorFlow.Tensor{Any}, v7134) 
                            begin  
                            end
                        end
                        begin  
                            (v7134,) = tf.tf_promote(v7134)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7134)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                    end
                end), name, "RefMerge") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     concat(concat_dim, values)

Concatenates tensors along one dimension.


"""
tf.@op function concat(v7135, v7136; name=nothing, N=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Concat") 
                    begin  
                        begin  
                            v7135 = convert(TensorFlow.Tensor{Any}, v7135) 
                            begin  
                            end
                        end
                        begin  
                            v7136 = convert.(TensorFlow.Tensor{Any}, v7136) 
                            begin  
                            end
                        end
                        begin  
                            (v7136,) = tf.tf_promote(v7136)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7135)
                        end
                        begin  
                            tf.add_input(desc, v7136)
                        end
                    end 
                    begin  
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Concat") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sdca_fprint(input)

Computes fingerprints of the input strings.


"""
tf.@op function sdca_fprint(v7137; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SdcaFprint") 
                    begin  
                        begin  
                            v7137 = convert(TensorFlow.Tensor{Any}, v7137) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7137)
                        end
                    end 
                    begin  
                    end
                end), name, "SdcaFprint") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     count_up_to(ref)

Increments 'ref' until it reaches 'limit'.


"""
tf.@op function count_up_to(v7138; name=nothing, limit=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("CountUpTo") 
                    begin  
                        begin  
                            v7138 = convert(TensorFlow.Tensor{Any}, v7138) 
                            begin  
                            end
                        end
                        begin  
                            (v7138,) = tf.tf_promote(v7138)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7138)
                        end
                    end 
                    begin  
                        begin  
                            if limit !== nothing 
                                desc["limit"] = Base.Int(limit)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "CountUpTo") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     random_gamma(shape, alpha; seed=0, seed2=0)

Outputs random values from the Gamma distribution(s) described by alpha.

This op uses the algorithm by Marsaglia et al. to acquire samples via
transformation-rejection from pairs of uniform and normal random variables.
See http://dl.acm.org/citation.cfm?id=358414
"""
tf.@op function random_gamma(v7139, v7140; name=nothing, seed=nothing, seed2=nothing, S=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RandomGamma") 
                    begin  
                        begin  
                            v7139 = convert(TensorFlow.Tensor{Any}, v7139) 
                            begin  
                            end
                        end
                        begin  
                            v7140 = convert(TensorFlow.Tensor{Any}, v7140) 
                            begin  
                            end
                        end
                        begin  
                            (v7139,) = tf.tf_promote(v7139)
                        end
                        begin  
                            (v7140,) = tf.tf_promote(v7140)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7139)
                        end
                        begin  
                            tf.add_input(desc, v7140)
                        end
                    end 
                    begin  
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if S !== nothing 
                                desc["S"] = Base.identity(S)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "RandomGamma") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_apply_adadelta(var, accum, accum_update, lr, rho, epsilon, grad, indices; use_locking=false)

var: Should be from a Variable().


"""
tf.@op function sparse_apply_adadelta(v7141, v7142, v7143, v7144, v7145, v7146, v7147, v7148; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseApplyAdadelta") 
                    begin  
                        begin  
                            v7141 = convert(TensorFlow.Tensor{Any}, v7141) 
                            begin  
                            end
                        end
                        begin  
                            v7142 = convert(TensorFlow.Tensor{Any}, v7142) 
                            begin  
                            end
                        end
                        begin  
                            v7143 = convert(TensorFlow.Tensor{Any}, v7143) 
                            begin  
                            end
                        end
                        begin  
                            v7144 = convert(TensorFlow.Tensor{Any}, v7144) 
                            begin  
                            end
                        end
                        begin  
                            v7145 = convert(TensorFlow.Tensor{Any}, v7145) 
                            begin  
                            end
                        end
                        begin  
                            v7146 = convert(TensorFlow.Tensor{Any}, v7146) 
                            begin  
                            end
                        end
                        begin  
                            v7147 = convert(TensorFlow.Tensor{Any}, v7147) 
                            begin  
                            end
                        end
                        begin  
                            v7148 = convert(TensorFlow.Tensor{Any}, v7148) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7141, v7142, v7143, v7144, v7145, v7146, v7147) = tf.tf_promote(v7141, v7142, v7143, v7144, v7145, v7146, v7147)
                        end
                        begin  
                            (v7148,) = tf.tf_promote(v7148)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7141)
                        end
                        begin  
                            tf.add_input(desc, v7142)
                        end
                        begin  
                            tf.add_input(desc, v7143)
                        end
                        begin  
                            tf.add_input(desc, v7144)
                        end
                        begin  
                            tf.add_input(desc, v7145)
                        end
                        begin  
                            tf.add_input(desc, v7146)
                        end
                        begin  
                            tf.add_input(desc, v7147)
                        end
                        begin  
                            tf.add_input(desc, v7148)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "SparseApplyAdadelta") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_close(handle)




"""
tf.@op function tensor_array_close(v7149; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayClose") 
                    begin  
                        begin  
                            v7149 = convert(TensorFlow.Tensor{Any}, v7149) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7149)
                        end
                    end 
                    begin  
                    end
                end), name, "TensorArrayClose") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     dilation_2d(input, filter)

Computes the grayscale dilation of 4-D `input` and 3-D `filter` tensors.

The `input` tensor has shape `[batch, in_height, in_width, depth]` and the
`filter` tensor has shape `[filter_height, filter_width, depth]`, i.e., each
input channel is processed independently of the others with its own structuring
function. The `output` tensor has shape
`[batch, out_height, out_width, depth]`. The spatial dimensions of the output
tensor depend on the `padding` algorithm. We currently only support the default
"NHWC" `data_format`.

In detail, the grayscale morphological 2-D dilation is the max-sum correlation
(for consistency with `conv2d`, we use unmirrored filters):

    output[b, y, x, c] =
       max_{dy, dx} input[b,
                          strides[1] * y + rates[1] * dy,
                          strides[2] * x + rates[2] * dx,
                          c] +
                    filter[dy, dx, c]

Max-pooling is a special case when the filter has size equal to the pooling
kernel size and contains all zeros.

Note on duality: The dilation of `input` by the `filter` is equal to the
negation of the erosion of `-input` by the reflected `filter`.
"""
tf.@op function dilation_2d(v7150, v7151; name=nothing, T=nothing, strides=nothing, rates=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Dilation2D") 
                    begin  
                        begin  
                            v7150 = convert(TensorFlow.Tensor{Any}, v7150) 
                            begin  
                            end
                        end
                        begin  
                            v7151 = convert(TensorFlow.Tensor{Any}, v7151) 
                            begin  
                            end
                        end
                        begin  
                            (v7150, v7151) = tf.tf_promote(v7150, v7151)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7150)
                        end
                        begin  
                            tf.add_input(desc, v7151)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if rates !== nothing 
                                desc["rates"] = Base.identity.rates
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "Dilation2D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     get_session_handle(value)




"""
tf.@op function get_session_handle(v7152; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("GetSessionHandle") 
                    begin  
                        begin  
                            v7152 = convert(TensorFlow.Tensor{Any}, v7152) 
                            begin  
                            end
                        end
                        begin  
                            (v7152,) = tf.tf_promote(v7152)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7152)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "GetSessionHandle") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     softplus(features)

Computes softplus: `log(exp(features) + 1)`.


"""
tf.@op function softplus(v7153; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Softplus") 
                    begin  
                        begin  
                            v7153 = convert(TensorFlow.Tensor{Any}, v7153) 
                            begin  
                            end
                        end
                        begin  
                            (v7153,) = tf.tf_promote(v7153)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7153)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Softplus") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     identity_reader(; container=, shared_name=)

A Reader that outputs the queued work as both the key and value.

To use, enqueue strings in a Queue.  ReaderRead will take the front
work string and output (work, work).
"""
tf.@op function identity_reader(; name=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("IdentityReader") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "IdentityReader") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     crop_and_resize_grad_image(grads, boxes, box_ind, image_size; method=bilinear)

Computes the gradient of the crop_and_resize op wrt the input image tensor.


"""
tf.@op function crop_and_resize_grad_image(v7154, v7155, v7156, v7157; name=nothing, T=nothing, method=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("CropAndResizeGradImage") 
                    begin  
                        begin  
                            v7154 = convert(TensorFlow.Tensor{Any}, v7154) 
                            begin  
                            end
                        end
                        begin  
                            v7155 = convert(TensorFlow.Tensor{Any}, v7155) 
                            begin  
                            end
                        end
                        begin  
                            v7156 = convert(TensorFlow.Tensor{Any}, v7156) 
                            begin  
                            end
                        end
                        begin  
                            v7157 = convert(TensorFlow.Tensor{Any}, v7157) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7154)
                        end
                        begin  
                            tf.add_input(desc, v7155)
                        end
                        begin  
                            tf.add_input(desc, v7156)
                        end
                        begin  
                            tf.add_input(desc, v7157)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if method !== nothing 
                                desc["method"] = Base.String(method)
                            end
                        end
                    end
                end), name, "CropAndResizeGradImage") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_grad(handle, flow_in)




"""
tf.@op function tensor_array_grad(v7158, v7159; name=nothing, source=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayGrad") 
                    begin  
                        begin  
                            v7158 = convert(TensorFlow.Tensor{Any}, v7158) 
                            begin  
                            end
                        end
                        begin  
                            v7159 = convert(TensorFlow.Tensor{Any}, v7159) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7158)
                        end
                        begin  
                            tf.add_input(desc, v7159)
                        end
                    end 
                    begin  
                        begin  
                            if source !== nothing 
                                desc["source"] = Base.String(source)
                            end
                        end
                    end
                end), name, "TensorArrayGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     rfft(input, fft_length)

Compute the 1-dimensional discrete Fourier Transform of a real-valued signal

over the inner-most dimension of `input`.

Since the DFT of a real signal is Hermitian-symmetric, `RFFT` only returns the
`fft_length / 2 + 1` unique components of the FFT: the zero-frequency term,
followed by the `fft_length / 2` positive-frequency terms.
"""
tf.@op function rfft(v7160, v7161; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RFFT") 
                    begin  
                        begin  
                            v7160 = convert(TensorFlow.Tensor{Any}, v7160) 
                            begin  
                            end
                        end
                        begin  
                            v7161 = convert(TensorFlow.Tensor{Any}, v7161) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7160)
                        end
                        begin  
                            tf.add_input(desc, v7161)
                        end
                    end 
                    begin  
                    end
                end), name, "RFFT") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_apply_ftrl(var, accum, linear, grad, indices, lr, l1, l2, lr_power; use_locking=false)

Update relevant entries in '*var' according to the Ftrl-proximal scheme.

That is for rows we have grad for, we update var, accum and linear as follows:
accum_new = accum + grad * grad
linear += grad + (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
var = (sign(linear) * l1 - linear) / quadratic if |linear| > l1 else 0.0
accum = accum_new
"""
tf.@op function sparse_apply_ftrl(v7162, v7163, v7164, v7165, v7166, v7167, v7168, v7169, v7170; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseApplyFtrl") 
                    begin  
                        begin  
                            v7162 = convert(TensorFlow.Tensor{Any}, v7162) 
                            begin  
                            end
                        end
                        begin  
                            v7163 = convert(TensorFlow.Tensor{Any}, v7163) 
                            begin  
                            end
                        end
                        begin  
                            v7164 = convert(TensorFlow.Tensor{Any}, v7164) 
                            begin  
                            end
                        end
                        begin  
                            v7165 = convert(TensorFlow.Tensor{Any}, v7165) 
                            begin  
                            end
                        end
                        begin  
                            v7166 = convert(TensorFlow.Tensor{Any}, v7166) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7167 = convert(TensorFlow.Tensor{Any}, v7167) 
                            begin  
                            end
                        end
                        begin  
                            v7168 = convert(TensorFlow.Tensor{Any}, v7168) 
                            begin  
                            end
                        end
                        begin  
                            v7169 = convert(TensorFlow.Tensor{Any}, v7169) 
                            begin  
                            end
                        end
                        begin  
                            v7170 = convert(TensorFlow.Tensor{Any}, v7170) 
                            begin  
                            end
                        end
                        begin  
                            (v7162, v7163, v7164, v7165, v7167, v7168, v7169, v7170) = tf.tf_promote(v7162, v7163, v7164, v7165, v7167, v7168, v7169, v7170)
                        end
                        begin  
                            (v7166,) = tf.tf_promote(v7166)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7162)
                        end
                        begin  
                            tf.add_input(desc, v7163)
                        end
                        begin  
                            tf.add_input(desc, v7164)
                        end
                        begin  
                            tf.add_input(desc, v7165)
                        end
                        begin  
                            tf.add_input(desc, v7166)
                        end
                        begin  
                            tf.add_input(desc, v7167)
                        end
                        begin  
                            tf.add_input(desc, v7168)
                        end
                        begin  
                            tf.add_input(desc, v7169)
                        end
                        begin  
                            tf.add_input(desc, v7170)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "SparseApplyFtrl") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_determinant(input)

Computes the determinant of one ore more square matrices.

The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions
form square matrices. The output is a tensor containing the determinants
for all input submatrices `[..., :, :]`.
"""
tf.@op function matrix_determinant(v7171; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MatrixDeterminant") 
                    begin  
                        begin  
                            v7171 = convert(TensorFlow.Tensor{Any}, v7171) 
                            begin  
                            end
                        end
                        begin  
                            (v7171,) = tf.tf_promote(v7171)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7171)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MatrixDeterminant") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     avg_pool(value; data_format=NHWC)

Performs average pooling on the input.

Each entry in `output` is the mean of the corresponding size `ksize`
window in `value`.
"""
tf.@op function avg_pool(v7172; name=nothing, ksize=nothing, strides=nothing, padding=nothing, data_format=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AvgPool") 
                    begin  
                        begin  
                            v7172 = convert(TensorFlow.Tensor{Any}, v7172) 
                            begin  
                            end
                        end
                        begin  
                            (v7172,) = tf.tf_promote(v7172)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7172)
                        end
                    end 
                    begin  
                        begin  
                            if ksize !== nothing 
                                desc["ksize"] = Base.identity.ksize
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "AvgPool") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_sparse_apply_proximal_adagrad(var, accum, lr, l1, l2, grad, indices; use_locking=false)

Sparse update entries in '*var' and '*accum' according to FOBOS algorithm.

That is for rows we have grad for, we update var and accum as follows:
accum += grad * grad
prox_v = var
prox_v -= lr * grad * (1 / sqrt(accum))
var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}
"""
tf.@op function resource_sparse_apply_proximal_adagrad(v7173, v7174, v7175, v7176, v7177, v7178, v7179; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceSparseApplyProximalAdagrad") 
                    begin  
                        begin  
                            v7173 = convert(TensorFlow.Tensor{Any}, v7173) 
                            begin  
                            end
                        end
                        begin  
                            v7174 = convert(TensorFlow.Tensor{Any}, v7174) 
                            begin  
                            end
                        end
                        begin  
                            v7175 = convert(TensorFlow.Tensor{Any}, v7175) 
                            begin  
                            end
                        end
                        begin  
                            v7176 = convert(TensorFlow.Tensor{Any}, v7176) 
                            begin  
                            end
                        end
                        begin  
                            v7177 = convert(TensorFlow.Tensor{Any}, v7177) 
                            begin  
                            end
                        end
                        begin  
                            v7178 = convert(TensorFlow.Tensor{Any}, v7178) 
                            begin  
                            end
                        end
                        begin  
                            v7179 = convert(TensorFlow.Tensor{Any}, v7179) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7175, v7176, v7177, v7178) = tf.tf_promote(v7175, v7176, v7177, v7178)
                        end
                        begin  
                            (v7179,) = tf.tf_promote(v7179)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7173)
                        end
                        begin  
                            tf.add_input(desc, v7174)
                        end
                        begin  
                            tf.add_input(desc, v7175)
                        end
                        begin  
                            tf.add_input(desc, v7176)
                        end
                        begin  
                            tf.add_input(desc, v7177)
                        end
                        begin  
                            tf.add_input(desc, v7178)
                        end
                        begin  
                            tf.add_input(desc, v7179)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceSparseApplyProximalAdagrad") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     sparse_dense_cwise_add(sp_indices, sp_values, sp_shape, dense)

Adds up a SparseTensor and a dense Tensor, using these special rules:

(1) Broadcasts the dense side to have the same shape as the sparse side, if
    eligible;
(2) Then, only the dense values pointed to by the indices of the SparseTensor
    participate in the cwise addition.

By these rules, the result is a logical SparseTensor with exactly the same
indices and shape, but possibly with different non-zero values.  The output of
this Op is the resultant non-zero values.
"""
tf.@op function sparse_dense_cwise_add(v7180, v7181, v7182, v7183; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseDenseCwiseAdd") 
                    begin  
                        begin  
                            v7180 = convert(TensorFlow.Tensor{Any}, v7180) 
                            begin  
                            end
                        end
                        begin  
                            v7181 = convert(TensorFlow.Tensor{Any}, v7181) 
                            begin  
                            end
                        end
                        begin  
                            v7182 = convert(TensorFlow.Tensor{Any}, v7182) 
                            begin  
                            end
                        end
                        begin  
                            v7183 = convert(TensorFlow.Tensor{Any}, v7183) 
                            begin  
                            end
                        end
                        begin  
                            (v7181, v7183) = tf.tf_promote(v7181, v7183)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7180)
                        end
                        begin  
                            tf.add_input(desc, v7181)
                        end
                        begin  
                            tf.add_input(desc, v7182)
                        end
                        begin  
                            tf.add_input(desc, v7183)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseDenseCwiseAdd") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     bias_add_v1(value, bias)

Adds `bias` to `value`.

This is a deprecated version of BiasAdd and will be soon removed.

This is a special case of `tf.add` where `bias` is restricted to be 1-D.
Broadcasting is supported, so `value` may have any number of dimensions.
"""
tf.@op function bias_add_v1(v7184, v7185; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BiasAddV1") 
                    begin  
                        begin  
                            v7184 = convert(TensorFlow.Tensor{Any}, v7184) 
                            begin  
                            end
                        end
                        begin  
                            v7185 = convert(TensorFlow.Tensor{Any}, v7185) 
                            begin  
                            end
                        end
                        begin  
                            (v7184, v7185) = tf.tf_promote(v7184, v7185)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7184)
                        end
                        begin  
                            tf.add_input(desc, v7185)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BiasAddV1") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     invert_permutation(x; T=Int32)

Computes the inverse permutation of a tensor.

This operation computes the inverse of an index permutation. It takes a 1-D
integer tensor `x`, which represents the indices of a zero-based array, and
swaps each value with its index position. In other words, for an output tensor
`y` and an input tensor `x`, this operation computes the following:

`y[x[i]] = i for i in [0, 1, ..., len(x) - 1]`

The values must include 0. There can be no duplicate values or negative values.

For example:

```prettyprint
# tensor `x` is [3, 4, 0, 2, 1]
invert_permutation(x) ==> [2, 4, 3, 0, 1]
```
"""
tf.@op function invert_permutation(v7186; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("InvertPermutation") 
                    begin  
                        begin  
                            v7186 = convert(TensorFlow.Tensor{Int32}, v7186) 
                            begin  
                            end
                        end
                        begin  
                            (v7186,) = tf.tf_promote(v7186)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7186)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "InvertPermutation") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     requantization_range(input, input_min, input_max)

Given a quantized tensor described by (input, input_min, input_max), outputs a

range that covers the actual values present in that tensor.  This op is
typically used to produce the requested_output_min and requested_output_max for
Requantize.
"""
tf.@op function requantization_range(v7187, v7188, v7189; name=nothing, Tinput=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RequantizationRange") 
                    begin  
                        begin  
                            v7187 = convert(TensorFlow.Tensor{Any}, v7187) 
                            begin  
                            end
                        end
                        begin  
                            v7188 = convert(TensorFlow.Tensor{Any}, v7188) 
                            begin  
                            end
                        end
                        begin  
                            v7189 = convert(TensorFlow.Tensor{Any}, v7189) 
                            begin  
                            end
                        end
                        begin  
                            (v7187,) = tf.tf_promote(v7187)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7187)
                        end
                        begin  
                            tf.add_input(desc, v7188)
                        end
                        begin  
                            tf.add_input(desc, v7189)
                        end
                    end 
                    begin  
                        begin  
                            if Tinput !== nothing 
                                desc["Tinput"] = Base.identity(Tinput)
                            end
                        end
                    end
                end), name, "RequantizationRange") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     maximum(x, y)

Returns the max of x and y (i.e. x > y ? x : y) element-wise.

*NOTE*: `Maximum` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function maximum(v7190, v7191; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Maximum") 
                    begin  
                        begin  
                            v7190 = convert(TensorFlow.Tensor{Any}, v7190) 
                            begin  
                            end
                        end
                        begin  
                            v7191 = convert(TensorFlow.Tensor{Any}, v7191) 
                            begin  
                            end
                        end
                        begin  
                            (v7190, v7191) = tf.tf_promote(v7190, v7191)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7190)
                        end
                        begin  
                            tf.add_input(desc, v7191)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Maximum") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_solve_ls(matrix, rhs, l2_regularizer; fast=true)

Solves one or more linear least-squares problems.

`matrix` is a tensor of shape `[..., M, N]` whose inner-most 2 dimensions
form matrices of size `[M, N]`. Rhs is a tensor of shape `[..., M, K]`.
The output is a tensor shape `[..., N, K]` where each output matrix solves
each of the equations matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]
in the least squares sense.

matrix and right-hand sides in the batch:

`matrix`=\\(A \in \Re^{m \times n}\\),
`rhs`=\\(B  \in \Re^{m \times k}\\),
`output`=\\(X  \in \Re^{n \times k}\\),
`l2_regularizer`=\\(\lambda\\).

If `fast` is `True`, then the solution is computed by solving the normal
equations using Cholesky decomposition. Specifically, if \\(m \ge n\\) then
\\(X = (A^T A + \lambda I)^{-1} A^T B\\), which solves the least-squares
problem \\(X = \mathrm{argmin}_{Z \in \Re^{n \times k} } ||A Z - B||_F^2 +
\lambda ||Z||_F^2\\). If \\(m \lt n\\) then `output` is computed as
\\(X = A^T (A A^T + \lambda I)^{-1} B\\), which (for \\(\lambda = 0\\)) is the
minimum-norm solution to the under-determined linear system, i.e.
\\(X = \mathrm{argmin}_{Z \in \Re^{n \times k} } ||Z||_F^2 \\), subject to
\\(A Z = B\\). Notice that the fast path is only numerically stable when
\\(A\\) is numerically full rank and has a condition number
\\(\mathrm{cond}(A) \lt \frac{1}{\sqrt{\epsilon_{mach} } }\\) or\\(\lambda\\) is
sufficiently large.

If `fast` is `False` an algorithm based on the numerically robust complete
orthogonal decomposition is used. This computes the minimum-norm
least-squares solution, even when \\(A\\) is rank deficient. This path is
typically 6-7 times slower than the fast path. If `fast` is `False` then
`l2_regularizer` is ignored.
"""
tf.@op function matrix_solve_ls(v7192, v7193, v7194; name=nothing, T=nothing, fast=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MatrixSolveLs") 
                    begin  
                        begin  
                            v7192 = convert(TensorFlow.Tensor{Any}, v7192) 
                            begin  
                            end
                        end
                        begin  
                            v7193 = convert(TensorFlow.Tensor{Any}, v7193) 
                            begin  
                            end
                        end
                        begin  
                            v7194 = convert(TensorFlow.Tensor{Any}, v7194) 
                            begin  
                            end
                        end
                        begin  
                            (v7192, v7193) = tf.tf_promote(v7192, v7193)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7192)
                        end
                        begin  
                            tf.add_input(desc, v7193)
                        end
                        begin  
                            tf.add_input(desc, v7194)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if fast !== nothing 
                                desc["fast"] = Base.Bool(fast)
                            end
                        end
                    end
                end), name, "MatrixSolveLs") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reshape(tensor, shape; Tshape=Int32)

Reshapes a tensor.

Given `tensor`, this operation returns a tensor that has the same values
as `tensor` with shape `shape`.

If one component of `shape` is the special value -1, the size of that dimension
is computed so that the total size remains constant.  In particular, a `shape`
of `[-1]` flattens into 1-D.  At most one component of `shape` can be -1.

If `shape` is 1-D or higher, then the operation returns a tensor with shape
`shape` filled with the values of `tensor`. In this case, the number of elements
implied by `shape` must be the same as the number of elements in `tensor`.

For example:

```prettyprint
# tensor 't' is [1, 2, 3, 4, 5, 6, 7, 8, 9]
# tensor 't' has shape [9]
reshape(t, [3, 3]) ==> [[1, 2, 3],
                        [4, 5, 6],
                        [7, 8, 9]]

# tensor 't' is [[[1, 1], [2, 2]],
#                [[3, 3], [4, 4]]]
# tensor 't' has shape [2, 2, 2]
reshape(t, [2, 4]) ==> [[1, 1, 2, 2],
                        [3, 3, 4, 4]]

# tensor 't' is [[[1, 1, 1],
#                 [2, 2, 2]],
#                [[3, 3, 3],
#                 [4, 4, 4]],
#                [[5, 5, 5],
#                 [6, 6, 6]]]
# tensor 't' has shape [3, 2, 3]
# pass '[-1]' to flatten 't'
reshape(t, [-1]) ==> [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6]

# -1 can also be used to infer the shape

# -1 is inferred to be 9:
reshape(t, [2, -1]) ==> [[1, 1, 1, 2, 2, 2, 3, 3, 3],
                         [4, 4, 4, 5, 5, 5, 6, 6, 6]]
# -1 is inferred to be 2:
reshape(t, [-1, 9]) ==> [[1, 1, 1, 2, 2, 2, 3, 3, 3],
                         [4, 4, 4, 5, 5, 5, 6, 6, 6]]
# -1 is inferred to be 3:
reshape(t, [ 2, -1, 3]) ==> [[[1, 1, 1],
                              [2, 2, 2],
                              [3, 3, 3]],
                             [[4, 4, 4],
                              [5, 5, 5],
                              [6, 6, 6]]]

# tensor 't' is [7]
# shape `[]` reshapes to a scalar
reshape(t, []) ==> 7
```
"""
tf.@op function reshape(v7195, v7196; name=nothing, T=nothing, Tshape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Reshape") 
                    begin  
                        begin  
                            v7195 = convert(TensorFlow.Tensor{Any}, v7195) 
                            begin  
                            end
                        end
                        begin  
                            v7196 = convert(TensorFlow.Tensor{Int32}, v7196) 
                            begin  
                            end
                        end
                        begin  
                            (v7195,) = tf.tf_promote(v7195)
                        end
                        begin  
                            (v7196,) = tf.tf_promote(v7196)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7195)
                        end
                        begin  
                            tf.add_input(desc, v7196)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tshape !== nothing 
                                desc["Tshape"] = Base.identity(Tshape)
                            end
                        end
                    end
                end), name, "Reshape") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_sparse_minimum(a_indices, a_values, a_shape, b_indices, b_values, b_shape)

Returns the element-wise min of two SparseTensors.

Assumes the two SparseTensors have the same shape, i.e., no broadcasting.
"""
tf.@op function sparse_sparse_minimum(v7197, v7198, v7199, v7200, v7201, v7202; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseSparseMinimum") 
                    begin  
                        begin  
                            v7197 = convert(TensorFlow.Tensor{Any}, v7197) 
                            begin  
                            end
                        end
                        begin  
                            v7198 = convert(TensorFlow.Tensor{Any}, v7198) 
                            begin  
                            end
                        end
                        begin  
                            v7199 = convert(TensorFlow.Tensor{Any}, v7199) 
                            begin  
                            end
                        end
                        begin  
                            v7200 = convert(TensorFlow.Tensor{Any}, v7200) 
                            begin  
                            end
                        end
                        begin  
                            v7201 = convert(TensorFlow.Tensor{Any}, v7201) 
                            begin  
                            end
                        end
                        begin  
                            v7202 = convert(TensorFlow.Tensor{Any}, v7202) 
                            begin  
                            end
                        end
                        begin  
                            (v7198, v7201) = tf.tf_promote(v7198, v7201)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7197)
                        end
                        begin  
                            tf.add_input(desc, v7198)
                        end
                        begin  
                            tf.add_input(desc, v7199)
                        end
                        begin  
                            tf.add_input(desc, v7200)
                        end
                        begin  
                            tf.add_input(desc, v7201)
                        end
                        begin  
                            tf.add_input(desc, v7202)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseSparseMinimum") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     parse_single_sequence_example(serialized, feature_list_dense_missing_assumed_empty, context_sparse_keys, context_dense_keys, feature_list_sparse_keys, feature_list_dense_keys, context_dense_defaults, debug_name; Ncontext_sparse=0, Ncontext_dense=0, Nfeature_list_sparse=0, Nfeature_list_dense=0, context_sparse_types=Int64[], Tcontext_dense=Int64[], feature_list_dense_types=Int64[], context_dense_shapes=Int64[], feature_list_sparse_types=Int64[], feature_list_dense_shapes=Int64[])

Transforms a scalar brain.SequenceExample proto (as strings) into typed tensors.


"""
tf.@op function parse_single_sequence_example(v7203, v7204, v7205, v7206, v7207, v7208, v7209, v7210; name=nothing, Ncontext_sparse=nothing, Ncontext_dense=nothing, Nfeature_list_sparse=nothing, Nfeature_list_dense=nothing, context_sparse_types=nothing, Tcontext_dense=nothing, feature_list_dense_types=nothing, context_dense_shapes=nothing, feature_list_sparse_types=nothing, feature_list_dense_shapes=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ParseSingleSequenceExample") 
                    begin  
                        begin  
                            v7203 = convert(TensorFlow.Tensor{Any}, v7203) 
                            begin  
                            end
                        end
                        begin  
                            v7204 = convert(TensorFlow.Tensor{Any}, v7204) 
                            begin  
                            end
                        end
                        begin  
                            v7205 = convert.(TensorFlow.Tensor{Any}, v7205) 
                            begin  
                            end
                        end
                        begin  
                            v7206 = convert.(TensorFlow.Tensor{Any}, v7206) 
                            begin  
                            end
                        end
                        begin  
                            v7207 = convert.(TensorFlow.Tensor{Any}, v7207) 
                            begin  
                            end
                        end
                        begin  
                            v7208 = convert.(TensorFlow.Tensor{Any}, v7208) 
                            begin  
                            end
                        end
                        begin  
                            v7209 = convert.(TensorFlow.Tensor{Any}, v7209) 
                            begin  
                            end
                        end
                        begin  
                            v7210 = convert(TensorFlow.Tensor{Any}, v7210) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7203)
                        end
                        begin  
                            tf.add_input(desc, v7204)
                        end
                        begin  
                            tf.add_input(desc, v7205)
                        end
                        begin  
                            tf.add_input(desc, v7206)
                        end
                        begin  
                            tf.add_input(desc, v7207)
                        end
                        begin  
                            tf.add_input(desc, v7208)
                        end
                        begin  
                            tf.add_input(desc, v7209)
                        end
                        begin  
                            tf.add_input(desc, v7210)
                        end
                    end 
                    begin  
                        begin  
                            if Ncontext_sparse !== nothing 
                                desc["Ncontext_sparse"] = Base.Int(Ncontext_sparse)
                            end
                        end
                        begin  
                            if Ncontext_dense !== nothing 
                                desc["Ncontext_dense"] = Base.Int(Ncontext_dense)
                            end
                        end
                        begin  
                            if Nfeature_list_sparse !== nothing 
                                desc["Nfeature_list_sparse"] = Base.Int(Nfeature_list_sparse)
                            end
                        end
                        begin  
                            if Nfeature_list_dense !== nothing 
                                desc["Nfeature_list_dense"] = Base.Int(Nfeature_list_dense)
                            end
                        end
                        begin  
                            if context_sparse_types !== nothing 
                                desc["context_sparse_types"] = Base.identity.context_sparse_types
                            end
                        end
                        begin  
                            if Tcontext_dense !== nothing 
                                desc["Tcontext_dense"] = Base.identity.Tcontext_dense
                            end
                        end
                        begin  
                            if feature_list_dense_types !== nothing 
                                desc["feature_list_dense_types"] = Base.identity.feature_list_dense_types
                            end
                        end
                        begin  
                            if context_dense_shapes !== nothing 
                                desc["context_dense_shapes"] = Base.identity.context_dense_shapes
                            end
                        end
                        begin  
                            if feature_list_sparse_types !== nothing 
                                desc["feature_list_sparse_types"] = Base.identity.feature_list_sparse_types
                            end
                        end
                        begin  
                            if feature_list_dense_shapes !== nothing 
                                desc["feature_list_dense_shapes"] = Base.identity.feature_list_dense_shapes
                            end
                        end
                    end
                end), name, "ParseSingleSequenceExample") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3), tf.Tensor(op, 4), tf.Tensor(op, 5), tf.Tensor(op, 6), tf.Tensor(op, 7), tf.Tensor(op, 8))
        end
    end

"""
     sparse_apply_momentum(var, accum, lr, grad, indices, momentum; use_locking=false, use_nesterov=false)

Update relevant entries in '*var' and '*accum' according to the momentum scheme.

Set use_nesterov = True if you want to use Nesterov momentum.

That is for rows we have grad for, we update var and accum as follows:

accum = accum * momentum + grad
var -= lr * accum
"""
tf.@op function sparse_apply_momentum(v7211, v7212, v7213, v7214, v7215, v7216; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing, use_nesterov=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseApplyMomentum") 
                    begin  
                        begin  
                            v7211 = convert(TensorFlow.Tensor{Any}, v7211) 
                            begin  
                            end
                        end
                        begin  
                            v7212 = convert(TensorFlow.Tensor{Any}, v7212) 
                            begin  
                            end
                        end
                        begin  
                            v7213 = convert(TensorFlow.Tensor{Any}, v7213) 
                            begin  
                            end
                        end
                        begin  
                            v7214 = convert(TensorFlow.Tensor{Any}, v7214) 
                            begin  
                            end
                        end
                        begin  
                            v7215 = convert(TensorFlow.Tensor{Any}, v7215) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7216 = convert(TensorFlow.Tensor{Any}, v7216) 
                            begin  
                            end
                        end
                        begin  
                            (v7211, v7212, v7213, v7214, v7216) = tf.tf_promote(v7211, v7212, v7213, v7214, v7216)
                        end
                        begin  
                            (v7215,) = tf.tf_promote(v7215)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7211)
                        end
                        begin  
                            tf.add_input(desc, v7212)
                        end
                        begin  
                            tf.add_input(desc, v7213)
                        end
                        begin  
                            tf.add_input(desc, v7214)
                        end
                        begin  
                            tf.add_input(desc, v7215)
                        end
                        begin  
                            tf.add_input(desc, v7216)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                        begin  
                            if use_nesterov !== nothing 
                                desc["use_nesterov"] = Base.Bool(use_nesterov)
                            end
                        end
                    end
                end), name, "SparseApplyMomentum") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_diag(diagonal)

Returns a batched diagonal tensor with a given batched diagonal values.

Given a `diagonal`, this operation returns a tensor with the `diagonal` and
everything else padded with zeros. The diagonal is computed as follows:

Assume `diagonal` has `k` dimensions `[I, J, K, ..., N]`, then the output is a
tensor of rank `k+1` with dimensions [I, J, K, ..., N, N]` where:

`output[i, j, k, ..., m, n] = 1{m=n} * diagonal[i, j, k, ..., n]`.

For example:

```prettyprint
# 'diagonal' is [[1, 2, 3, 4], [5, 6, 7, 8]]

and diagonal.shape = (2, 4)

tf.matrix_diag(diagonal) ==> [[[1, 0, 0, 0]
                                     [0, 2, 0, 0]
                                     [0, 0, 3, 0]
                                     [0, 0, 0, 4]],
                                    [[5, 0, 0, 0]
                                     [0, 6, 0, 0]
                                     [0, 0, 7, 0]
                                     [0, 0, 0, 8]]]

which has shape (2, 4, 4)
```
"""
tf.@op function matrix_diag(v7217; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MatrixDiag") 
                    begin  
                        begin  
                            v7217 = convert(TensorFlow.Tensor{Any}, v7217) 
                            begin  
                            end
                        end
                        begin  
                            (v7217,) = tf.tf_promote(v7217)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7217)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MatrixDiag") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     hsvt_rgb(images; T=Float32)

Convert one or more images from HSV to RGB.

Outputs a tensor of the same shape as the `images` tensor, containing the RGB
value of the pixels. The output is only well defined if the value in `images`
are in `[0,1]`.

See `rgb_to_hsv` for a description of the HSV encoding.
"""
tf.@op function hsvt_rgb(v7218; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("HSVToRGB") 
                    begin  
                        begin  
                            v7218 = convert(TensorFlow.Tensor{Float32}, v7218) 
                            begin  
                            end
                        end
                        begin  
                            (v7218,) = tf.tf_promote(v7218)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7218)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "HSVToRGB") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_div(ref, indices, updates; use_locking=false)

Divides a variable reference by sparse updates.

This operation computes

    # Scalar indices
    ref[indices, ...] /= updates[...]

    # Vector indices (for each i)
    ref[indices[i], ...] /= updates[i, ...]

    # High rank indices (for each i, ..., j)
    ref[indices[i, ..., j], ...] /= updates[i, ..., j, ...]

This operation outputs `ref` after the update is done.
This makes it easier to chain operations that need to use the reset value.

Duplicate entries are handled correctly: if multiple `indices` reference
the same location, their contributions divide.

Requires `updates.shape = indices.shape + ref.shape[1:]`.
"""
tf.@op function scatter_div(v7219, v7220, v7221; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ScatterDiv") 
                    begin  
                        begin  
                            v7219 = convert(TensorFlow.Tensor{Any}, v7219) 
                            begin  
                            end
                        end
                        begin  
                            v7220 = convert(TensorFlow.Tensor{Any}, v7220) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7221 = convert(TensorFlow.Tensor{Any}, v7221) 
                            begin  
                            end
                        end
                        begin  
                            (v7219, v7221) = tf.tf_promote(v7219, v7221)
                        end
                        begin  
                            (v7220,) = tf.tf_promote(v7220)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7219)
                        end
                        begin  
                            tf.add_input(desc, v7220)
                        end
                        begin  
                            tf.add_input(desc, v7221)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ScatterDiv") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fact()

Output a fact about factorials.


"""
tf.@op function fact(; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Fact") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                    end
                end), name, "Fact") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     send(tensor; client_terminated=false)

Sends the named tensor from send_device to recv_device.


"""
tf.@op function send(v7222; name=nothing, T=nothing, tensor_name=nothing, send_device=nothing, send_device_incarnation=nothing, recv_device=nothing, client_terminated=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("_Send") 
                    begin  
                        begin  
                            v7222 = convert(TensorFlow.Tensor{Any}, v7222) 
                            begin  
                            end
                        end
                        begin  
                            (v7222,) = tf.tf_promote(v7222)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7222)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if tensor_name !== nothing 
                                desc["tensor_name"] = Base.String(tensor_name)
                            end
                        end
                        begin  
                            if send_device !== nothing 
                                desc["send_device"] = Base.String(send_device)
                            end
                        end
                        begin  
                            if send_device_incarnation !== nothing 
                                desc["send_device_incarnation"] = Base.Int(send_device_incarnation)
                            end
                        end
                        begin  
                            if recv_device !== nothing 
                                desc["recv_device"] = Base.String(recv_device)
                            end
                        end
                        begin  
                            if client_terminated !== nothing 
                                desc["client_terminated"] = Base.Bool(client_terminated)
                            end
                        end
                    end
                end), name, "_Send") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     reverse_v2(tensor, axis; Tidx=Int32)

Reverses specific dimensions of a tensor.

NOTE `tf.reverse` has now changed behavior in preparation for 1.0.
`tf.reverse_v2` is currently an alias that will be deprecated before TF 1.0.

Given a `tensor`, and a `int32` tensor `axis` representing the set of
dimensions of `tensor` to reverse. This operation reverses each dimension
`i` for which there exists `j` s.t. `axis[j] == i`.

`tensor` can have up to 8 dimensions. The number of dimensions specified
in `axis` may be 0 or more entries. If an index is specified more than
once, a InvalidArgument error is raised.

For example:

```prettyprint
# tensor 't' is [[[[ 0,  1,  2,  3],
#                  [ 4,  5,  6,  7],
#                  [ 8,  9, 10, 11]],
#                 [[12, 13, 14, 15],
#                  [16, 17, 18, 19],
#                  [20, 21, 22, 23]]]]
# tensor 't' shape is [1, 2, 3, 4]

# 'dims' is [3] or 'dims' is -1
reverse(t, dims) ==> [[[[ 3,  2,  1,  0],
                        [ 7,  6,  5,  4],
                        [ 11, 10, 9, 8]],
                       [[15, 14, 13, 12],
                        [19, 18, 17, 16],
                        [23, 22, 21, 20]]]]

# 'dims' is '[1]' (or 'dims' is '[-3]')
reverse(t, dims) ==> [[[[12, 13, 14, 15],
                        [16, 17, 18, 19],
                        [20, 21, 22, 23]
                       [[ 0,  1,  2,  3],
                        [ 4,  5,  6,  7],
                        [ 8,  9, 10, 11]]]]

# 'dims' is '[2]' (or 'dims' is '[-2]')
reverse(t, dims) ==> [[[[8, 9, 10, 11],
                        [4, 5, 6, 7],
                        [0, 1, 2, 3]]
                       [[20, 21, 22, 23],
                        [16, 17, 18, 19],
                        [12, 13, 14, 15]]]]
```
"""
tf.@op function reverse_v2(v7223, v7224; name=nothing, Tidx=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReverseV2") 
                    begin  
                        begin  
                            v7223 = convert(TensorFlow.Tensor{Any}, v7223) 
                            begin  
                            end
                        end
                        begin  
                            v7224 = convert(TensorFlow.Tensor{Int32}, v7224) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7223,) = tf.tf_promote(v7223)
                        end
                        begin  
                            (v7224,) = tf.tf_promote(v7224)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7223)
                        end
                        begin  
                            tf.add_input(desc, v7224)
                        end
                    end 
                    begin  
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "ReverseV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resize_bilinear_grad(grads, original_image; align_corners=false)

Computes the gradient of bilinear interpolation.


"""
tf.@op function resize_bilinear_grad(v7225, v7226; name=nothing, T=nothing, align_corners=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResizeBilinearGrad") 
                    begin  
                        begin  
                            v7225 = convert(TensorFlow.Tensor{Any}, v7225) 
                            begin  
                            end
                        end
                        begin  
                            v7226 = convert(TensorFlow.Tensor{Any}, v7226) 
                            begin  
                            end
                        end
                        begin  
                            (v7226,) = tf.tf_promote(v7226)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7225)
                        end
                        begin  
                            tf.add_input(desc, v7226)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if align_corners !== nothing 
                                desc["align_corners"] = Base.Bool(align_corners)
                            end
                        end
                    end
                end), name, "ResizeBilinearGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_to_space(input, crops; Tidx=Int32)

BatchToSpace for 4-D tensors of type T.

This is a legacy version of the more general BatchToSpaceND.

Rearranges (permutes) data from batch into blocks of spatial data, followed by
cropping. This is the reverse transformation of SpaceToBatch. More specifically,
this op outputs a copy of the input tensor where values from the `batch`
dimension are moved in spatial blocks to the `height` and `width` dimensions,
followed by cropping along the `height` and `width` dimensions.
"""
tf.@op function batch_to_space(v7227, v7228; name=nothing, T=nothing, block_size=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchToSpace") 
                    begin  
                        begin  
                            v7227 = convert(TensorFlow.Tensor{Any}, v7227) 
                            begin  
                            end
                        end
                        begin  
                            v7228 = convert(TensorFlow.Tensor{Int32}, v7228) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7227,) = tf.tf_promote(v7227)
                        end
                        begin  
                            (v7228,) = tf.tf_promote(v7228)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7227)
                        end
                        begin  
                            tf.add_input(desc, v7228)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if block_size !== nothing 
                                desc["block_size"] = Base.Int(block_size)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "BatchToSpace") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     strided_slice(input, begin, end, strides; begin_mask=0, end_mask=0, ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0)

Return a strided slice from `input`.

Note, most python users will want to use the Python `Tensor.__getitem__`
or `Variable.__getitem__` rather than this op directly.

The goal of this op is to produce a new tensor with a subset of
the elements from the `n` dimensional `input` tensor. The subset is chosen using
a sequence of `m` sparse range specifications encoded into the arguments
of this function. Note, in some cases
`m` could be equal to `n`, but this need not be the case. Each
range specification entry can be one of the following:

- An ellipsis (...). Ellipses are used to imply zero or more
  dimensions of full-dimension selection and are produced using
  `ellipsis_mask`. For example, `foo[...]` is the identity slice.

- A new axis. This is used to insert a new shape=1 dimension and is
  produced using `new_axis_mask`. For example, `foo[:, ...]` where
  `foo` is shape `(3, 4)` produces a `(1, 3, 4)` tensor.


- A range `begin:end:stride`. This is used to specify how much to choose from
  a given dimension. `stride` can be any integer but 0.  `begin` is an integer
  which represents the index of the first value to select while `end` represents
  the index of the last value to select. The number of values selected in each
  dimension is `end - begin` if `stride > 0` and `begin - end` if `stride < 0`.
  `begin` and `end` can be negative where `-1` is the last element, `-2` is
  the second to last. `begin_mask` controls whether to replace the explicitly
  given `begin` with an implicit effective value of `0` if `stride > 0` and
  `-1` if `stride < 0`. `end_mask` is analogous but produces the number
  required to create the largest open interval. For example, given a shape
  `(3,)` tensor `foo[:]`, the effective `begin` and `end` are `0` and `3`. Do
  not assume this is equivalent to `foo[0:-1]` which has an effective `begin`
  and `end` of `0` and `2`. Another example is `foo[-2::-1]` which reverses the
  first dimension of a tensor while dropping the last two (in the original
  order elements). For example `foo = [1,2,3,4]; foo[-2::-1]` is `[4,3]`.

- A single index. This is used to keep only elements that have a given
  index. For example (`foo[2, :]` on a shape `(5,6)` tensor produces a
  shape `(6,)` tensor. This is encoded in `begin` and `end` and
  `shrink_axis_mask`.

Each conceptual range specification is encoded in the op's argument. This
encoding is best understand by considering a non-trivial example. In
particular,
`foo[1, 2:4, None, ..., :-3:-1, :]` will be encoded as

```prettyprint
begin = [1, 2, x, x, 0, x] # x denotes don't care (usually 0)
end = [2, 4, x, x, -3, x]
strides = [1, 1, x, x, -1, 1]
begin_mask = 1<<4 | 1 << 5 = 48
end_mask = 1<<5 = 32
ellipsis_mask = 1<<3 = 8
new_axis_mask = 1<<2 4
shrink_axis_mask = 1<<0
```

In this case if `foo.shape` is (5, 5, 5, 5, 5, 5) the final shape of
the slice becomes (2, 1, 5, 5, 2, 5).
Let us walk step by step through each argument specification.

1.  The first argument in the example slice is turned into `begin = 1` and
`end = begin + 1 = 2`. To disambiguate from the original spec `2:4` we
also set the appropriate bit in `shrink_axis_mask`.

2. `2:4` is contributes 2, 4, 1 to begin, end, and stride. All masks have
zero bits contributed.

3. None is a synonym for `tf.newaxis`. This means insert a dimension of size 1
dimension in the final shape. Dummy values are contributed to begin,
end and stride, while the new_axis_mask bit is set.

4. `...` grab the full ranges from as many dimensions as needed to
fully specify a slice for every dimension of the input shape.

5. `:-3:-1` shows the use of negative indices. A negative index `i` associated
with a dimension that has shape `s` is converted to a positive index
`s + i`. So `-1` becomes `s-1` (i.e. the last element). This conversion
is done internally so begin, end and strides receive x, -3, and -1.
The appropriate begin_mask bit is set to indicate the start range is the
full range (ignoring the x).

6. `:` indicates that the entire contents of the corresponding dimension
is selected. This is equivalent to `::` or `0::1`. begin, end, and strides
receive 0, 0, and 1, respectively. The appropriate bits in `begin_mask` and
`end_mask` are also set.

*Requirements*:
  `0 != strides[i] for i in [0, m)`
  `ellipsis_mask must be a power of two (only one ellipsis)`
"""
tf.@op function strided_slice(v7229, v7230, v7231, v7232; name=nothing, T=nothing, Index=nothing, begin_mask=nothing, end_mask=nothing, ellipsis_mask=nothing, new_axis_mask=nothing, shrink_axis_mask=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StridedSlice") 
                    begin  
                        begin  
                            v7229 = convert(TensorFlow.Tensor{Any}, v7229) 
                            begin  
                            end
                        end
                        begin  
                            v7230 = convert(TensorFlow.Tensor{Any}, v7230) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7231 = convert(TensorFlow.Tensor{Any}, v7231) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7232 = convert(TensorFlow.Tensor{Any}, v7232) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7229,) = tf.tf_promote(v7229)
                        end
                        begin  
                            (v7230, v7231, v7232) = tf.tf_promote(v7230, v7231, v7232)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7229)
                        end
                        begin  
                            tf.add_input(desc, v7230)
                        end
                        begin  
                            tf.add_input(desc, v7231)
                        end
                        begin  
                            tf.add_input(desc, v7232)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Index !== nothing 
                                desc["Index"] = Base.identity(Index)
                            end
                        end
                        begin  
                            if begin_mask !== nothing 
                                desc["begin_mask"] = Base.Int(begin_mask)
                            end
                        end
                        begin  
                            if end_mask !== nothing 
                                desc["end_mask"] = Base.Int(end_mask)
                            end
                        end
                        begin  
                            if ellipsis_mask !== nothing 
                                desc["ellipsis_mask"] = Base.Int(ellipsis_mask)
                            end
                        end
                        begin  
                            if new_axis_mask !== nothing 
                                desc["new_axis_mask"] = Base.Int(new_axis_mask)
                            end
                        end
                        begin  
                            if shrink_axis_mask !== nothing 
                                desc["shrink_axis_mask"] = Base.Int(shrink_axis_mask)
                            end
                        end
                    end
                end), name, "StridedSlice") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     matching_files(pattern)

Returns the set of files matching one or more glob patterns.

Note that this routine only supports wildcard characters in the
basename portion of the pattern, not in the directory portion.
"""
tf.@op function matching_files(v7233; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MatchingFiles") 
                    begin  
                        begin  
                            v7233 = convert(TensorFlow.Tensor{Any}, v7233) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7233)
                        end
                    end 
                    begin  
                    end
                end), name, "MatchingFiles") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     log(x)

Computes natural logarithm of x element-wise.

I.e., \\(y = \log_e x\\).
"""
tf.@op function log(v7234; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Log") 
                    begin  
                        begin  
                            v7234 = convert(TensorFlow.Tensor{Any}, v7234) 
                            begin  
                            end
                        end
                        begin  
                            (v7234,) = tf.tf_promote(v7234)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7234)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Log") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     encode_base_64(input; pad=false)

Encode strings into web-safe base64 format.

Refer to the following article for more information on base64 format:
en.wikipedia.org/wiki/Base64. Base64 strings may have padding with '=' at the
end so that the encoded has length multiple of 4. See Padding section of the
link above.

Web-safe means that the encoder uses - and _ instead of + and /.
"""
tf.@op function encode_base_64(v7235; name=nothing, pad=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("EncodeBase64") 
                    begin  
                        begin  
                            v7235 = convert(TensorFlow.Tensor{Any}, v7235) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7235)
                        end
                    end 
                    begin  
                        begin  
                            if pad !== nothing 
                                desc["pad"] = Base.Bool(pad)
                            end
                        end
                    end
                end), name, "EncodeBase64") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     cross(a, b)

Compute the pairwise cross product.

`a` and `b` must be the same shape; they can either be simple 3-element vectors,
or any shape where the innermost dimension is 3. In the latter case, each pair
of corresponding 3-element vectors is cross-multiplied independently.
"""
tf.@op function cross(v7236, v7237; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Cross") 
                    begin  
                        begin  
                            v7236 = convert(TensorFlow.Tensor{Any}, v7236) 
                            begin  
                            end
                        end
                        begin  
                            v7237 = convert(TensorFlow.Tensor{Any}, v7237) 
                            begin  
                            end
                        end
                        begin  
                            (v7236, v7237) = tf.tf_promote(v7236, v7237)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7236)
                        end
                        begin  
                            tf.add_input(desc, v7237)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Cross") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     padding_fifoq(; shapes=Int64[], capacity=-1, container=, shared_name=)

A queue that produces elements in first-in first-out order.

Variable-size shapes are allowed by setting the corresponding shape dimensions
to 0 in the shape attr.  In this case DequeueMany will pad up to the maximum
size of any given element in the minibatch.  See below for details.
"""
tf.@op function padding_fifoq(; name=nothing, component_types=nothing, shapes=nothing, capacity=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("PaddingFIFOQueue") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if shapes !== nothing 
                                desc["shapes"] = Base.identity.shapes
                            end
                        end
                        begin  
                            if capacity !== nothing 
                                desc["capacity"] = Base.Int(capacity)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "PaddingFIFOQueue") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     save_v2(prefix, tensor_names, shape_and_slices, tensors)

Saves tensors in V2 checkpoint format.

By default, saves the named tensors in full.  If the caller wishes to save
specific slices of full tensors, "shape_and_slices" should be non-empty strings
and correspondingly well-formed.
"""
tf.@op function save_v2(v7238, v7239, v7240, v7241; name=nothing, dtypes=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SaveV2") 
                    begin  
                        begin  
                            v7238 = convert(TensorFlow.Tensor{Any}, v7238) 
                            begin  
                            end
                        end
                        begin  
                            v7239 = convert(TensorFlow.Tensor{Any}, v7239) 
                            begin  
                            end
                        end
                        begin  
                            v7240 = convert(TensorFlow.Tensor{Any}, v7240) 
                            begin  
                            end
                        end
                        begin  
                            v7241 = convert.(TensorFlow.Tensor{Any}, v7241) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7238)
                        end
                        begin  
                            tf.add_input(desc, v7239)
                        end
                        begin  
                            tf.add_input(desc, v7240)
                        end
                        begin  
                            tf.add_input(desc, v7241)
                        end
                    end 
                    begin  
                        begin  
                            if dtypes !== nothing 
                                desc["dtypes"] = Base.identity.dtypes
                            end
                        end
                    end
                end), name, "SaveV2") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     sparse_apply_centered_rmsp(var, mg, ms, mom, lr, rho, momentum, epsilon, grad, indices; use_locking=false)

Update '*var' according to the centered RMSProp algorithm.

The centered RMSProp algorithm uses an estimate of the centered second moment
(i.e., the variance) for normalization, as opposed to regular RMSProp, which
uses the (uncentered) second moment. This often helps with training, but is
slightly more expensive in terms of computation and memory.

Note that in dense implementation of this algorithm, mg, ms, and mom will
update even if the grad is zero, but in this sparse implementation, mg, ms,
and mom will not update in iterations during which the grad is zero.

mean_square = decay * mean_square + (1-decay) * gradient ** 2
mean_grad = decay * mean_grad + (1-decay) * gradient
Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)

ms <- rho * ms_{t-1} + (1-rho) * grad * grad
mom <- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
var <- var - mom
"""
tf.@op function sparse_apply_centered_rmsp(v7242, v7243, v7244, v7245, v7246, v7247, v7248, v7249, v7250, v7251; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseApplyCenteredRMSProp") 
                    begin  
                        begin  
                            v7242 = convert(TensorFlow.Tensor{Any}, v7242) 
                            begin  
                            end
                        end
                        begin  
                            v7243 = convert(TensorFlow.Tensor{Any}, v7243) 
                            begin  
                            end
                        end
                        begin  
                            v7244 = convert(TensorFlow.Tensor{Any}, v7244) 
                            begin  
                            end
                        end
                        begin  
                            v7245 = convert(TensorFlow.Tensor{Any}, v7245) 
                            begin  
                            end
                        end
                        begin  
                            v7246 = convert(TensorFlow.Tensor{Any}, v7246) 
                            begin  
                            end
                        end
                        begin  
                            v7247 = convert(TensorFlow.Tensor{Any}, v7247) 
                            begin  
                            end
                        end
                        begin  
                            v7248 = convert(TensorFlow.Tensor{Any}, v7248) 
                            begin  
                            end
                        end
                        begin  
                            v7249 = convert(TensorFlow.Tensor{Any}, v7249) 
                            begin  
                            end
                        end
                        begin  
                            v7250 = convert(TensorFlow.Tensor{Any}, v7250) 
                            begin  
                            end
                        end
                        begin  
                            v7251 = convert(TensorFlow.Tensor{Any}, v7251) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7242, v7243, v7244, v7245, v7246, v7247, v7248, v7249, v7250) = tf.tf_promote(v7242, v7243, v7244, v7245, v7246, v7247, v7248, v7249, v7250)
                        end
                        begin  
                            (v7251,) = tf.tf_promote(v7251)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7242)
                        end
                        begin  
                            tf.add_input(desc, v7243)
                        end
                        begin  
                            tf.add_input(desc, v7244)
                        end
                        begin  
                            tf.add_input(desc, v7245)
                        end
                        begin  
                            tf.add_input(desc, v7246)
                        end
                        begin  
                            tf.add_input(desc, v7247)
                        end
                        begin  
                            tf.add_input(desc, v7248)
                        end
                        begin  
                            tf.add_input(desc, v7249)
                        end
                        begin  
                            tf.add_input(desc, v7250)
                        end
                        begin  
                            tf.add_input(desc, v7251)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "SparseApplyCenteredRMSProp") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     elu_grad(gradients, outputs)

Computes gradients for the exponential linear (Elu) operation.


"""
tf.@op function elu_grad(v7252, v7253; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("EluGrad") 
                    begin  
                        begin  
                            v7252 = convert(TensorFlow.Tensor{Any}, v7252) 
                            begin  
                            end
                        end
                        begin  
                            v7253 = convert(TensorFlow.Tensor{Any}, v7253) 
                            begin  
                            end
                        end
                        begin  
                            (v7252, v7253) = tf.tf_promote(v7252, v7253)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7252)
                        end
                        begin  
                            tf.add_input(desc, v7253)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "EluGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     conv_3d_backprop_input_v2(input_sizes, filter, out_backprop)

Computes the gradients of 3-D convolution with respect to the input.


"""
tf.@op function conv_3d_backprop_input_v2(v7254, v7255, v7256; name=nothing, T=nothing, strides=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Conv3DBackpropInputV2") 
                    begin  
                        begin  
                            v7254 = convert(TensorFlow.Tensor{Any}, v7254) 
                            begin  
                            end
                        end
                        begin  
                            v7255 = convert(TensorFlow.Tensor{Any}, v7255) 
                            begin  
                            end
                        end
                        begin  
                            v7256 = convert(TensorFlow.Tensor{Any}, v7256) 
                            begin  
                            end
                        end
                        begin  
                            (v7255, v7256) = tf.tf_promote(v7255, v7256)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7254)
                        end
                        begin  
                            tf.add_input(desc, v7255)
                        end
                        begin  
                            tf.add_input(desc, v7256)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "Conv3DBackpropInputV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     string_to_hash_bucket_fast(input)

Converts each string in the input Tensor to its hash mod by a number of buckets.

The hash function is deterministic on the content of the string within the
process and will never change. However, it is not suitable for cryptography.
This function may be used when CPU time is scarce and inputs are trusted or
unimportant. There is a risk of adversaries constructing inputs that all hash
to the same bucket. To prevent this problem, use a strong hash function with
`tf.string_to_hash_bucket_strong`.
"""
tf.@op function string_to_hash_bucket_fast(v7257; name=nothing, num_buckets=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StringToHashBucketFast") 
                    begin  
                        begin  
                            v7257 = convert(TensorFlow.Tensor{Any}, v7257) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7257)
                        end
                    end 
                    begin  
                        begin  
                            if num_buckets !== nothing 
                                desc["num_buckets"] = Base.Int(num_buckets)
                            end
                        end
                    end
                end), name, "StringToHashBucketFast") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     random_shuffle(value; seed=0, seed2=0)

Randomly shuffles a tensor along its first dimension.

  The tensor is shuffled along dimension 0, such that each `value[j]` is mapped
  to one and only one `output[i]`. For example, a mapping that might occur for a
  3x2 tensor is:

```prettyprint
[[1, 2],       [[5, 6],
 [3, 4],  ==>   [1, 2],
 [5, 6]]        [3, 4]]
```
"""
tf.@op function random_shuffle(v7258; name=nothing, seed=nothing, seed2=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RandomShuffle") 
                    begin  
                        begin  
                            v7258 = convert(TensorFlow.Tensor{Any}, v7258) 
                            begin  
                            end
                        end
                        begin  
                            (v7258,) = tf.tf_promote(v7258)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7258)
                        end
                    end 
                    begin  
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "RandomShuffle") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     multinomial(logits, num_samples; seed=0, seed2=0)

Draws samples from a multinomial distribution.


"""
tf.@op function multinomial(v7259, v7260; name=nothing, seed=nothing, seed2=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Multinomial") 
                    begin  
                        begin  
                            v7259 = convert(TensorFlow.Tensor{Any}, v7259) 
                            begin  
                            end
                        end
                        begin  
                            v7260 = convert(TensorFlow.Tensor{Any}, v7260) 
                            begin  
                            end
                        end
                        begin  
                            (v7259,) = tf.tf_promote(v7259)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7259)
                        end
                        begin  
                            tf.add_input(desc, v7260)
                        end
                    end 
                    begin  
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Multinomial") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     uniform_candidate_sampler(true_classes; seed=0, seed2=0)

Generates labels for candidate sampling with a uniform distribution.

See explanations of candidate sampling and the data formats at
go/candidate-sampling.

For each batch, this op picks a single set of sampled candidate labels.

The advantages of sampling candidates per-batch are simplicity and the
possibility of efficient dense matrix multiplication. The disadvantage is that
the sampled candidates must be chosen independently of the context and of the
true labels.
"""
tf.@op function uniform_candidate_sampler(v7261; name=nothing, num_true=nothing, num_sampled=nothing, unique=nothing, range_max=nothing, seed=nothing, seed2=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("UniformCandidateSampler") 
                    begin  
                        begin  
                            v7261 = convert(TensorFlow.Tensor{Any}, v7261) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7261)
                        end
                    end 
                    begin  
                        begin  
                            if num_true !== nothing 
                                desc["num_true"] = Base.Int(num_true)
                            end
                        end
                        begin  
                            if num_sampled !== nothing 
                                desc["num_sampled"] = Base.Int(num_sampled)
                            end
                        end
                        begin  
                            if unique !== nothing 
                                desc["unique"] = Base.Bool(unique)
                            end
                        end
                        begin  
                            if range_max !== nothing 
                                desc["range_max"] = Base.Int(range_max)
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                    end
                end), name, "UniformCandidateSampler") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     tensor_array_split_v2(handle, value, lengths, flow_in)

Deprecated. Use TensorArraySplitV3


"""
tf.@op function tensor_array_split_v2(v7262, v7263, v7264, v7265; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArraySplitV2") 
                    begin  
                        begin  
                            v7262 = convert(TensorFlow.Tensor{Any}, v7262) 
                            begin  
                            end
                        end
                        begin  
                            v7263 = convert(TensorFlow.Tensor{Any}, v7263) 
                            begin  
                            end
                        end
                        begin  
                            v7264 = convert(TensorFlow.Tensor{Any}, v7264) 
                            begin  
                            end
                        end
                        begin  
                            v7265 = convert(TensorFlow.Tensor{Any}, v7265) 
                            begin  
                            end
                        end
                        begin  
                            (v7263,) = tf.tf_promote(v7263)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7262)
                        end
                        begin  
                            tf.add_input(desc, v7263)
                        end
                        begin  
                            tf.add_input(desc, v7264)
                        end
                        begin  
                            tf.add_input(desc, v7265)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TensorArraySplitV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_write_v2(handle, index, value, flow_in)

Deprecated. Use TensorArrayGradV3


"""
tf.@op function tensor_array_write_v2(v7266, v7267, v7268, v7269; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayWriteV2") 
                    begin  
                        begin  
                            v7266 = convert(TensorFlow.Tensor{Any}, v7266) 
                            begin  
                            end
                        end
                        begin  
                            v7267 = convert(TensorFlow.Tensor{Any}, v7267) 
                            begin  
                            end
                        end
                        begin  
                            v7268 = convert(TensorFlow.Tensor{Any}, v7268) 
                            begin  
                            end
                        end
                        begin  
                            v7269 = convert(TensorFlow.Tensor{Any}, v7269) 
                            begin  
                            end
                        end
                        begin  
                            (v7268,) = tf.tf_promote(v7268)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7266)
                        end
                        begin  
                            tf.add_input(desc, v7267)
                        end
                        begin  
                            tf.add_input(desc, v7268)
                        end
                        begin  
                            tf.add_input(desc, v7269)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TensorArrayWriteV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     queue_size_v2(handle)

Computes the number of elements in the given queue.


"""
tf.@op function queue_size_v2(v7270; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueSizeV2") 
                    begin  
                        begin  
                            v7270 = convert(TensorFlow.Tensor{Any}, v7270) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7270)
                        end
                    end 
                    begin  
                    end
                end), name, "QueueSizeV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     mutable_hash_table(; container=, shared_name=, use_node_name_sharing=false)

Creates an empty hash table.

This op creates a mutable hash table, specifying the type of its keys and
values. Each value must be a scalar. Data can be inserted into the table using
the insert operations. It does not support the initialization operation.
"""
tf.@op function mutable_hash_table(; name=nothing, container=nothing, shared_name=nothing, use_node_name_sharing=nothing, key_dtype=nothing, value_dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MutableHashTable") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                        begin  
                            if use_node_name_sharing !== nothing 
                                desc["use_node_name_sharing"] = Base.Bool(use_node_name_sharing)
                            end
                        end
                        begin  
                            if key_dtype !== nothing 
                                desc["key_dtype"] = Base.identity(key_dtype)
                            end
                        end
                        begin  
                            if value_dtype !== nothing 
                                desc["value_dtype"] = Base.identity(value_dtype)
                            end
                        end
                    end
                end), name, "MutableHashTable") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     relu(features)

Computes rectified linear: `max(features, 0)`.


"""
tf.@op function relu(v7271; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Relu") 
                    begin  
                        begin  
                            v7271 = convert(TensorFlow.Tensor{Any}, v7271) 
                            begin  
                            end
                        end
                        begin  
                            (v7271,) = tf.tf_promote(v7271)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7271)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Relu") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     draw_bounding_boxes(images, boxes; T=Float32)

Draw bounding boxes on a batch of images.

Outputs a copy of `images` but draws on top of the pixels zero or more bounding
boxes specified by the locations in `boxes`. The coordinates of the each
bounding box in `boxes` are encoded as `[y_min, x_min, y_max, x_max]`. The
bounding box coordinates are floats in `[0.0, 1.0]` relative to the width and
height of the underlying image.

For example, if an image is 100 x 200 pixels and the bounding box is
`[0.1, 0.2, 0.5, 0.9]`, the bottom-left and upper-right coordinates of the
bounding box will be `(10, 40)` to `(50, 180)`.

Parts of the bounding box may fall outside the image.
"""
tf.@op function draw_bounding_boxes(v7272, v7273; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DrawBoundingBoxes") 
                    begin  
                        begin  
                            v7272 = convert(TensorFlow.Tensor{Float32}, v7272) 
                            begin  
                            end
                        end
                        begin  
                            v7273 = convert(TensorFlow.Tensor{Any}, v7273) 
                            begin  
                            end
                        end
                        begin  
                            (v7272,) = tf.tf_promote(v7272)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7272)
                        end
                        begin  
                            tf.add_input(desc, v7273)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "DrawBoundingBoxes") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_read(handle, index, flow_in)




"""
tf.@op function tensor_array_read(v7274, v7275, v7276; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayRead") 
                    begin  
                        begin  
                            v7274 = convert(TensorFlow.Tensor{Any}, v7274) 
                            begin  
                            end
                        end
                        begin  
                            v7275 = convert(TensorFlow.Tensor{Any}, v7275) 
                            begin  
                            end
                        end
                        begin  
                            v7276 = convert(TensorFlow.Tensor{Any}, v7276) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7274)
                        end
                        begin  
                            tf.add_input(desc, v7275)
                        end
                        begin  
                            tf.add_input(desc, v7276)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "TensorArrayRead") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     expm_1(x)

Computes exponential of x - 1 element-wise.

I.e., \\(y = (\exp x) - 1\\).
"""
tf.@op function expm_1(v7277; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Expm1") 
                    begin  
                        begin  
                            v7277 = convert(TensorFlow.Tensor{Any}, v7277) 
                            begin  
                            end
                        end
                        begin  
                            (v7277,) = tf.tf_promote(v7277)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7277)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Expm1") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_apply_proximal_adagrad(var, accum, lr, l1, l2, grad, indices; use_locking=false)

Sparse update entries in '*var' and '*accum' according to FOBOS algorithm.

That is for rows we have grad for, we update var and accum as follows:
accum += grad * grad
prox_v = var
prox_v -= lr * grad * (1 / sqrt(accum))
var = sign(prox_v)/(1+lr*l2) * max{|prox_v|-lr*l1,0}
"""
tf.@op function sparse_apply_proximal_adagrad(v7278, v7279, v7280, v7281, v7282, v7283, v7284; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseApplyProximalAdagrad") 
                    begin  
                        begin  
                            v7278 = convert(TensorFlow.Tensor{Any}, v7278) 
                            begin  
                            end
                        end
                        begin  
                            v7279 = convert(TensorFlow.Tensor{Any}, v7279) 
                            begin  
                            end
                        end
                        begin  
                            v7280 = convert(TensorFlow.Tensor{Any}, v7280) 
                            begin  
                            end
                        end
                        begin  
                            v7281 = convert(TensorFlow.Tensor{Any}, v7281) 
                            begin  
                            end
                        end
                        begin  
                            v7282 = convert(TensorFlow.Tensor{Any}, v7282) 
                            begin  
                            end
                        end
                        begin  
                            v7283 = convert(TensorFlow.Tensor{Any}, v7283) 
                            begin  
                            end
                        end
                        begin  
                            v7284 = convert(TensorFlow.Tensor{Any}, v7284) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7278, v7279, v7280, v7281, v7282, v7283) = tf.tf_promote(v7278, v7279, v7280, v7281, v7282, v7283)
                        end
                        begin  
                            (v7284,) = tf.tf_promote(v7284)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7278)
                        end
                        begin  
                            tf.add_input(desc, v7279)
                        end
                        begin  
                            tf.add_input(desc, v7280)
                        end
                        begin  
                            tf.add_input(desc, v7281)
                        end
                        begin  
                            tf.add_input(desc, v7282)
                        end
                        begin  
                            tf.add_input(desc, v7283)
                        end
                        begin  
                            tf.add_input(desc, v7284)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "SparseApplyProximalAdagrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_matrix_band_part(input, num_lower, num_upper)




"""
tf.@op function batch_matrix_band_part(v7285, v7286, v7287; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchMatrixBandPart") 
                    begin  
                        begin  
                            v7285 = convert(TensorFlow.Tensor{Any}, v7285) 
                            begin  
                            end
                        end
                        begin  
                            v7286 = convert(TensorFlow.Tensor{Any}, v7286) 
                            begin  
                            end
                        end
                        begin  
                            v7287 = convert(TensorFlow.Tensor{Any}, v7287) 
                            begin  
                            end
                        end
                        begin  
                            (v7285,) = tf.tf_promote(v7285)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7285)
                        end
                        begin  
                            tf.add_input(desc, v7286)
                        end
                        begin  
                            tf.add_input(desc, v7287)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchMatrixBandPart") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     softsign(features)

Computes softsign: `features / (abs(features) + 1)`.


"""
tf.@op function softsign(v7288; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Softsign") 
                    begin  
                        begin  
                            v7288 = convert(TensorFlow.Tensor{Any}, v7288) 
                            begin  
                            end
                        end
                        begin  
                            (v7288,) = tf.tf_promote(v7288)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7288)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Softsign") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     mutable_dense_hash_table(empty_key; container=, shared_name=, use_node_name_sharing=false, value_shape=TensorShape[], initial_num_buckets=131072, max_load_factor=nothing)

Creates an empty hash table that uses tensors as the backing store. It uses

"open addressing" with quadratic reprobing to resolve collisions.

This op creates a mutable hash table, specifying the type of its keys and
values. Each value must be a scalar. Data can be inserted into the table using
the insert operations. It does not support the initialization operation.
"""
tf.@op function mutable_dense_hash_table(v7289; name=nothing, container=nothing, shared_name=nothing, use_node_name_sharing=nothing, key_dtype=nothing, value_dtype=nothing, value_shape=nothing, initial_num_buckets=nothing, max_load_factor=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MutableDenseHashTable") 
                    begin  
                        begin  
                            v7289 = convert(TensorFlow.Tensor{Any}, v7289) 
                            begin  
                            end
                        end
                        begin  
                            (v7289,) = tf.tf_promote(v7289)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7289)
                        end
                    end 
                    begin  
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                        begin  
                            if use_node_name_sharing !== nothing 
                                desc["use_node_name_sharing"] = Base.Bool(use_node_name_sharing)
                            end
                        end
                        begin  
                            if key_dtype !== nothing 
                                desc["key_dtype"] = Base.identity(key_dtype)
                            end
                        end
                        begin  
                            if value_dtype !== nothing 
                                desc["value_dtype"] = Base.identity(value_dtype)
                            end
                        end
                        begin  
                            if value_shape !== nothing 
                                desc["value_shape"] = Base.identity(value_shape)
                            end
                        end
                        begin  
                            if initial_num_buckets !== nothing 
                                desc["initial_num_buckets"] = Base.Int(initial_num_buckets)
                            end
                        end
                        begin  
                            if max_load_factor !== nothing 
                                desc["max_load_factor"] = Base.identity(max_load_factor)
                            end
                        end
                    end
                end), name, "MutableDenseHashTable") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     decode_gif(contents)

Decode the first frame of a GIF-encoded image to a uint8 tensor.

GIF with frame or transparency compression are not supported
convert animated GIF from compressed to uncompressed by:

convert src.gif -coalesce dst.gif
"""
tf.@op function decode_gif(v7290; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DecodeGif") 
                    begin  
                        begin  
                            v7290 = convert(TensorFlow.Tensor{Any}, v7290) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7290)
                        end
                    end 
                    begin  
                    end
                end), name, "DecodeGif") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     unsorted_segment_max(data, segment_ids, num_segments)

Computes the Max along segments of a tensor.

Read [the section on
Segmentation](../../api_docs/python/math_ops.md#segmentation) for an explanation
of segments.

This operator is similar to the [unsorted segment sum operator](../../api_docs/python/math_ops.md#UnsortedSegmentSum).
Instead of computing the sum over segments, it computes the maximum
such that:

\\(output_i = \max_j data_j\\) where max is over `j` such
that `segment_ids[j] == i`.

If the maximum is empty for a given segment ID `i`, it outputs the smallest possible value for specific numeric type,
 `output[i] = numeric_limits<T>::min()`.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/UnsortedSegmentSum.png" alt>
</div>
"""
tf.@op function unsorted_segment_max(v7291, v7292, v7293; name=nothing, T=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("UnsortedSegmentMax") 
                    begin  
                        begin  
                            v7291 = convert(TensorFlow.Tensor{Any}, v7291) 
                            begin  
                            end
                        end
                        begin  
                            v7292 = convert(TensorFlow.Tensor{Any}, v7292) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7293 = convert(TensorFlow.Tensor{Any}, v7293) 
                            begin  
                            end
                        end
                        begin  
                            (v7291,) = tf.tf_promote(v7291)
                        end
                        begin  
                            (v7292,) = tf.tf_promote(v7292)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7291)
                        end
                        begin  
                            tf.add_input(desc, v7292)
                        end
                        begin  
                            tf.add_input(desc, v7293)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "UnsortedSegmentMax") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     conv_3d_backprop_filter(input, filter, out_backprop)

Computes the gradients of 3-D convolution with respect to the filter.


"""
tf.@op function conv_3d_backprop_filter(v7294, v7295, v7296; name=nothing, T=nothing, strides=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Conv3DBackpropFilter") 
                    begin  
                        begin  
                            v7294 = convert(TensorFlow.Tensor{Any}, v7294) 
                            begin  
                            end
                        end
                        begin  
                            v7295 = convert(TensorFlow.Tensor{Any}, v7295) 
                            begin  
                            end
                        end
                        begin  
                            v7296 = convert(TensorFlow.Tensor{Any}, v7296) 
                            begin  
                            end
                        end
                        begin  
                            (v7294, v7295, v7296) = tf.tf_promote(v7294, v7295, v7296)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7294)
                        end
                        begin  
                            tf.add_input(desc, v7295)
                        end
                        begin  
                            tf.add_input(desc, v7296)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "Conv3DBackpropFilter") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     shape(input; out_type=Int32)

Returns the shape of a tensor.

This operation returns a 1-D integer tensor representing the shape of `input`.

For example:

```prettyprint
# 't' is [[[1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4]]]
shape(t) ==> [2, 2, 3]
```
"""
tf.@op function shape(v7297; name=nothing, T=nothing, out_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Shape") 
                    begin  
                        begin  
                            v7297 = convert(TensorFlow.Tensor{Any}, v7297) 
                            begin  
                            end
                        end
                        begin  
                            (v7297,) = tf.tf_promote(v7297)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7297)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                    end
                end), name, "Shape") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_self_adjoint_eig_v2(input; compute_v=true)




"""
tf.@op function batch_self_adjoint_eig_v2(v7298; name=nothing, compute_v=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchSelfAdjointEigV2") 
                    begin  
                        begin  
                            v7298 = convert(TensorFlow.Tensor{Any}, v7298) 
                            begin  
                            end
                        end
                        begin  
                            (v7298,) = tf.tf_promote(v7298)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7298)
                        end
                    end 
                    begin  
                        begin  
                            if compute_v !== nothing 
                                desc["compute_v"] = Base.Bool(compute_v)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchSelfAdjointEigV2") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     polygamma(a, x)

Compute the polygamma function \\(\psi^{(n)}(x)\\).

The polygamma function is defined as:

```
\psi^{(n)}(x) = \frac{d^n}{dx^n} \psi(x)
```
where \\(\psi(x)\\) is the digamma function.
"""
tf.@op function polygamma(v7299, v7300; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Polygamma") 
                    begin  
                        begin  
                            v7299 = convert(TensorFlow.Tensor{Any}, v7299) 
                            begin  
                            end
                        end
                        begin  
                            v7300 = convert(TensorFlow.Tensor{Any}, v7300) 
                            begin  
                            end
                        end
                        begin  
                            (v7299, v7300) = tf.tf_promote(v7299, v7300)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7299)
                        end
                        begin  
                            tf.add_input(desc, v7300)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Polygamma") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reciprocal_grad(x, y)

Computes the gradient for the inverse of `x` wrt its input.

Specifically, `grad = -dy * y*y`, where `y = 1/x`, and `dy`
is the corresponding input gradient.
"""
tf.@op function reciprocal_grad(v7301, v7302; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReciprocalGrad") 
                    begin  
                        begin  
                            v7301 = convert(TensorFlow.Tensor{Any}, v7301) 
                            begin  
                            end
                        end
                        begin  
                            v7302 = convert(TensorFlow.Tensor{Any}, v7302) 
                            begin  
                            end
                        end
                        begin  
                            (v7301, v7302) = tf.tf_promote(v7301, v7302)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7301)
                        end
                        begin  
                            tf.add_input(desc, v7302)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "ReciprocalGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     crop_and_resize_grad_boxes(grads, image, boxes, box_ind; method=bilinear)

Computes the gradient of the crop_and_resize op wrt the input boxes tensor.


"""
tf.@op function crop_and_resize_grad_boxes(v7303, v7304, v7305, v7306; name=nothing, T=nothing, method=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("CropAndResizeGradBoxes") 
                    begin  
                        begin  
                            v7303 = convert(TensorFlow.Tensor{Any}, v7303) 
                            begin  
                            end
                        end
                        begin  
                            v7304 = convert(TensorFlow.Tensor{Any}, v7304) 
                            begin  
                            end
                        end
                        begin  
                            v7305 = convert(TensorFlow.Tensor{Any}, v7305) 
                            begin  
                            end
                        end
                        begin  
                            v7306 = convert(TensorFlow.Tensor{Any}, v7306) 
                            begin  
                            end
                        end
                        begin  
                            (v7304,) = tf.tf_promote(v7304)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7303)
                        end
                        begin  
                            tf.add_input(desc, v7304)
                        end
                        begin  
                            tf.add_input(desc, v7305)
                        end
                        begin  
                            tf.add_input(desc, v7306)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if method !== nothing 
                                desc["method"] = Base.String(method)
                            end
                        end
                    end
                end), name, "CropAndResizeGradBoxes") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reader_restore_state_v2(reader_handle, state)

Restore a reader to a previously saved state.

Not all Readers support being restored, so this can produce an
Unimplemented error.
"""
tf.@op function reader_restore_state_v2(v7307, v7308; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderRestoreStateV2") 
                    begin  
                        begin  
                            v7307 = convert(TensorFlow.Tensor{Any}, v7307) 
                            begin  
                            end
                        end
                        begin  
                            v7308 = convert(TensorFlow.Tensor{Any}, v7308) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7307)
                        end
                        begin  
                            tf.add_input(desc, v7308)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderRestoreStateV2") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     softsign_grad(gradients, features)

Computes softsign gradients for a softsign operation.


"""
tf.@op function softsign_grad(v7309, v7310; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SoftsignGrad") 
                    begin  
                        begin  
                            v7309 = convert(TensorFlow.Tensor{Any}, v7309) 
                            begin  
                            end
                        end
                        begin  
                            v7310 = convert(TensorFlow.Tensor{Any}, v7310) 
                            begin  
                            end
                        end
                        begin  
                            (v7309, v7310) = tf.tf_promote(v7309, v7310)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7309)
                        end
                        begin  
                            tf.add_input(desc, v7310)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SoftsignGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     top_kv_2(input, k; sorted=true)

Finds values and indices of the `k` largest elements for the last dimension.

If the input is a vector (rank-1), finds the `k` largest entries in the vector
and outputs their values and indices as vectors.  Thus `values[j]` is the
`j`-th largest entry in `input`, and its index is `indices[j]`.

For matrices (resp. higher rank input), computes the top `k` entries in each
row (resp. vector along the last dimension).  Thus,

    values.shape = indices.shape = input.shape[:-1] + [k]

If two elements are equal, the lower-index element appears first.
"""
tf.@op function top_kv_2(v7311, v7312; name=nothing, sorted=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TopKV2") 
                    begin  
                        begin  
                            v7311 = convert(TensorFlow.Tensor{Any}, v7311) 
                            begin  
                            end
                        end
                        begin  
                            v7312 = convert(TensorFlow.Tensor{Any}, v7312) 
                            begin  
                            end
                        end
                        begin  
                            (v7311,) = tf.tf_promote(v7311)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7311)
                        end
                        begin  
                            tf.add_input(desc, v7312)
                        end
                    end 
                    begin  
                        begin  
                            if sorted !== nothing 
                                desc["sorted"] = Base.Bool(sorted)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TopKV2") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     arg_max(input, dimension; Tidx=Int32)

Returns the index with the largest value across dimensions of a tensor.


"""
tf.@op function arg_max(v7313, v7314; name=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ArgMax") 
                    begin  
                        begin  
                            v7313 = convert(TensorFlow.Tensor{Any}, v7313) 
                            begin  
                            end
                        end
                        begin  
                            v7314 = convert(TensorFlow.Tensor{Int32}, v7314) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7313,) = tf.tf_promote(v7313)
                        end
                        begin  
                            (v7314,) = tf.tf_promote(v7314)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7313)
                        end
                        begin  
                            tf.add_input(desc, v7314)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "ArgMax") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_matrix_solve(matrix, rhs; adjoint=false)




"""
tf.@op function batch_matrix_solve(v7315, v7316; name=nothing, adjoint=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchMatrixSolve") 
                    begin  
                        begin  
                            v7315 = convert(TensorFlow.Tensor{Any}, v7315) 
                            begin  
                            end
                        end
                        begin  
                            v7316 = convert(TensorFlow.Tensor{Any}, v7316) 
                            begin  
                            end
                        end
                        begin  
                            (v7315, v7316) = tf.tf_promote(v7315, v7316)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7315)
                        end
                        begin  
                            tf.add_input(desc, v7316)
                        end
                    end 
                    begin  
                        begin  
                            if adjoint !== nothing 
                                desc["adjoint"] = Base.Bool(adjoint)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchMatrixSolve") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_add_grad(backprop_val_grad, a_indices, b_indices, sum_indices)

The gradient operator for the SparseAdd op.

The SparseAdd op calculates A + B, where A, B, and the sum are all represented
as `SparseTensor` objects.  This op takes in the upstream gradient w.r.t.
non-empty values of the sum, and outputs the gradients w.r.t. the non-empty
values of A and B.
"""
tf.@op function sparse_add_grad(v7317, v7318, v7319, v7320; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseAddGrad") 
                    begin  
                        begin  
                            v7317 = convert(TensorFlow.Tensor{Any}, v7317) 
                            begin  
                            end
                        end
                        begin  
                            v7318 = convert(TensorFlow.Tensor{Any}, v7318) 
                            begin  
                            end
                        end
                        begin  
                            v7319 = convert(TensorFlow.Tensor{Any}, v7319) 
                            begin  
                            end
                        end
                        begin  
                            v7320 = convert(TensorFlow.Tensor{Any}, v7320) 
                            begin  
                            end
                        end
                        begin  
                            (v7317,) = tf.tf_promote(v7317)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7317)
                        end
                        begin  
                            tf.add_input(desc, v7318)
                        end
                        begin  
                            tf.add_input(desc, v7319)
                        end
                        begin  
                            tf.add_input(desc, v7320)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseAddGrad") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     resource_scatter_add(resource, indices, updates)

Adds sparse updates to the variable referenced by `resource`.

This operation computes

    # Scalar indices
    ref[indices, ...] += updates[...]

    # Vector indices (for each i)
    ref[indices[i], ...] += updates[i, ...]

    # High rank indices (for each i, ..., j)
    ref[indices[i, ..., j], ...] += updates[i, ..., j, ...]

Duplicate entries are handled correctly: if multiple `indices` reference
the same location, their contributions add.

Requires `updates.shape = indices.shape + ref.shape[1:]`.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/ScatterAdd.png" alt>
</div>
"""
tf.@op function resource_scatter_add(v7321, v7322, v7323; name=nothing, dtype=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceScatterAdd") 
                    begin  
                        begin  
                            v7321 = convert(TensorFlow.Tensor{Any}, v7321) 
                            begin  
                            end
                        end
                        begin  
                            v7322 = convert(TensorFlow.Tensor{Any}, v7322) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7323 = convert(TensorFlow.Tensor{Any}, v7323) 
                            begin  
                            end
                        end
                        begin  
                            (v7323,) = tf.tf_promote(v7323)
                        end
                        begin  
                            (v7322,) = tf.tf_promote(v7322)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7321)
                        end
                        begin  
                            tf.add_input(desc, v7322)
                        end
                        begin  
                            tf.add_input(desc, v7323)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "ResourceScatterAdd") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     ceil(x)

Returns element-wise smallest integer in not less than x.


"""
tf.@op function ceil(v7324; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Ceil") 
                    begin  
                        begin  
                            v7324 = convert(TensorFlow.Tensor{Any}, v7324) 
                            begin  
                            end
                        end
                        begin  
                            (v7324,) = tf.tf_promote(v7324)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7324)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Ceil") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     save(filename, tensor_names, data)

Saves the input tensors to disk.

The size of `tensor_names` must match the number of tensors in `data`. `data[i]`
is written to `filename` with name `tensor_names[i]`.

See also `SaveSlices`.
"""
tf.@op function save(v7325, v7326, v7327; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Save") 
                    begin  
                        begin  
                            v7325 = convert(TensorFlow.Tensor{Any}, v7325) 
                            begin  
                            end
                        end
                        begin  
                            v7326 = convert(TensorFlow.Tensor{Any}, v7326) 
                            begin  
                            end
                        end
                        begin  
                            v7327 = convert.(TensorFlow.Tensor{Any}, v7327) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7325)
                        end
                        begin  
                            tf.add_input(desc, v7326)
                        end
                        begin  
                            tf.add_input(desc, v7327)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity.T
                            end
                        end
                    end
                end), name, "Save") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     lin_space(start, stop, num; Tidx=Int32)

Generates values in an interval.

A sequence of `num` evenly-spaced values are generated beginning at `start`.
If `num > 1`, the values in the sequence increase by `stop - start / num - 1`,
so that the last one is exactly `stop`.

For example:

```
tf.linspace(10.0, 12.0, 3, name="linspace") => [ 10.0  11.0  12.0]
```
"""
tf.@op function lin_space(v7328, v7329, v7330; name=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LinSpace") 
                    begin  
                        begin  
                            v7328 = convert(TensorFlow.Tensor{Any}, v7328) 
                            begin  
                            end
                        end
                        begin  
                            v7329 = convert(TensorFlow.Tensor{Any}, v7329) 
                            begin  
                            end
                        end
                        begin  
                            v7330 = convert(TensorFlow.Tensor{Int32}, v7330) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7328, v7329) = tf.tf_promote(v7328, v7329)
                        end
                        begin  
                            (v7330,) = tf.tf_promote(v7330)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7328)
                        end
                        begin  
                            tf.add_input(desc, v7329)
                        end
                        begin  
                            tf.add_input(desc, v7330)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "LinSpace") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     exit(data)

Exits the current frame to its parent frame.

Exit makes its input `data` available to the parent frame.
"""
tf.@op function exit(v7331; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Exit") 
                    begin  
                        begin  
                            v7331 = convert(TensorFlow.Tensor{Any}, v7331) 
                            begin  
                            end
                        end
                        begin  
                            (v7331,) = tf.tf_promote(v7331)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7331)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Exit") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     quantized_concat(concat_dim, values, input_mins, input_maxes)

Concatenates quantized tensors along one dimension.


"""
tf.@op function quantized_concat(v7332, v7333, v7334, v7335; name=nothing, N=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedConcat") 
                    begin  
                        begin  
                            v7332 = convert(TensorFlow.Tensor{Any}, v7332) 
                            begin  
                            end
                        end
                        begin  
                            v7333 = convert.(TensorFlow.Tensor{Any}, v7333) 
                            begin  
                            end
                        end
                        begin  
                            v7334 = convert.(TensorFlow.Tensor{Any}, v7334) 
                            begin  
                            end
                        end
                        begin  
                            v7335 = convert.(TensorFlow.Tensor{Any}, v7335) 
                            begin  
                            end
                        end
                        begin  
                            (v7333,) = tf.tf_promote(v7333)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7332)
                        end
                        begin  
                            tf.add_input(desc, v7333)
                        end
                        begin  
                            tf.add_input(desc, v7334)
                        end
                        begin  
                            tf.add_input(desc, v7335)
                        end
                    end 
                    begin  
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "QuantizedConcat") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     lrn(input; depth_radius=5, bias=nothing, alpha=nothing, beta=nothing, T=Float32)

Local Response Normalization.

The 4-D `input` tensor is treated as a 3-D array of 1-D vectors (along the last
dimension), and each vector is normalized independently.  Within a given vector,
each component is divided by the weighted, squared sum of inputs within
`depth_radius`.  In detail,

    sqr_sum[a, b, c, d] =
        sum(input[a, b, c, d - depth_radius : d + depth_radius + 1] ** 2)
    output = input / (bias + alpha * sqr_sum) ** beta

For details, see [Krizhevsky et al., ImageNet classification with deep
convolutional neural networks (NIPS 2012)](http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks).
"""
tf.@op function lrn(v7336; name=nothing, depth_radius=nothing, bias=nothing, alpha=nothing, beta=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LRN") 
                    begin  
                        begin  
                            v7336 = convert(TensorFlow.Tensor{Float32}, v7336) 
                            begin  
                            end
                        end
                        begin  
                            (v7336,) = tf.tf_promote(v7336)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7336)
                        end
                    end 
                    begin  
                        begin  
                            if depth_radius !== nothing 
                                desc["depth_radius"] = Base.Int(depth_radius)
                            end
                        end
                        begin  
                            if bias !== nothing 
                                desc["bias"] = Base.identity(bias)
                            end
                        end
                        begin  
                            if alpha !== nothing 
                                desc["alpha"] = Base.identity(alpha)
                            end
                        end
                        begin  
                            if beta !== nothing 
                                desc["beta"] = Base.identity(beta)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "LRN") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     parallel_concat_update(value, update)

Updates input `value` at `loc` with `update`.

If you use this function you will almost certainly want to add
a control dependency as done in the implementation of parallel_stack to
avoid race conditions.
"""
tf.@op function parallel_concat_update(v7337, v7338; name=nothing, T=nothing, loc=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("_ParallelConcatUpdate") 
                    begin  
                        begin  
                            v7337 = convert(TensorFlow.Tensor{Any}, v7337) 
                            begin  
                            end
                        end
                        begin  
                            v7338 = convert(TensorFlow.Tensor{Any}, v7338) 
                            begin  
                            end
                        end
                        begin  
                            (v7337, v7338) = tf.tf_promote(v7337, v7338)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7337)
                        end
                        begin  
                            tf.add_input(desc, v7338)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if loc !== nothing 
                                desc["loc"] = Base.Int(loc)
                            end
                        end
                    end
                end), name, "_ParallelConcatUpdate") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_set_diag(input, diagonal)

Returns a batched matrix tensor with new batched diagonal values.

Given `input` and `diagonal`, this operation returns a tensor with the
same shape and values as `input`, except for the main diagonal of the
innermost matrices.  These will be overwritten by the values in `diagonal`.

The output is computed as follows:

Assume `input` has `k+1` dimensions `[I, J, K, ..., M, N]` and `diagonal` has
`k` dimensions `[I, J, K, ..., min(M, N)]`.  Then the output is a
tensor of rank `k+1` with dimensions `[I, J, K, ..., M, N]` where:

  * `output[i, j, k, ..., m, n] = diagonal[i, j, k, ..., n]` for `m == n`.
  * `output[i, j, k, ..., m, n] = input[i, j, k, ..., m, n]` for `m != n`.
"""
tf.@op function matrix_set_diag(v7339, v7340; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MatrixSetDiag") 
                    begin  
                        begin  
                            v7339 = convert(TensorFlow.Tensor{Any}, v7339) 
                            begin  
                            end
                        end
                        begin  
                            v7340 = convert(TensorFlow.Tensor{Any}, v7340) 
                            begin  
                            end
                        end
                        begin  
                            (v7339, v7340) = tf.tf_promote(v7339, v7340)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7339)
                        end
                        begin  
                            tf.add_input(desc, v7340)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MatrixSetDiag") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     zeros_like(x)

Returns a tensor of zeros with the same shape and type as x.


"""
tf.@op function zeros_like(v7341; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ZerosLike") 
                    begin  
                        begin  
                            v7341 = convert(TensorFlow.Tensor{Any}, v7341) 
                            begin  
                            end
                        end
                        begin  
                            (v7341,) = tf.tf_promote(v7341)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7341)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "ZerosLike") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fractional_avg_pool(value; pseudo_random=false, overlapping=false, deterministic=false, seed=0, seed2=0)

Performs fractional average pooling on the input.

Fractional average pooling is similar to Fractional max pooling in the pooling
region generation step. The only difference is that after pooling regions are
generated, a mean operation is performed instead of a max operation in each
pooling region.
"""
tf.@op function fractional_avg_pool(v7342; name=nothing, pooling_ratio=nothing, pseudo_random=nothing, overlapping=nothing, deterministic=nothing, seed=nothing, seed2=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FractionalAvgPool") 
                    begin  
                        begin  
                            v7342 = convert(TensorFlow.Tensor{Any}, v7342) 
                            begin  
                            end
                        end
                        begin  
                            (v7342,) = tf.tf_promote(v7342)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7342)
                        end
                    end 
                    begin  
                        begin  
                            if pooling_ratio !== nothing 
                                desc["pooling_ratio"] = Base.identity.pooling_ratio
                            end
                        end
                        begin  
                            if pseudo_random !== nothing 
                                desc["pseudo_random"] = Base.Bool(pseudo_random)
                            end
                        end
                        begin  
                            if overlapping !== nothing 
                                desc["overlapping"] = Base.Bool(overlapping)
                            end
                        end
                        begin  
                            if deterministic !== nothing 
                                desc["deterministic"] = Base.Bool(deterministic)
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "FractionalAvgPool") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     space_to_batch_nd(input, block_shape, paddings; Tblock_shape=Int32, Tpaddings=Int32)

SpaceToBatch for N-D tensors of type T.

This operation divides "spatial" dimensions `[1, ..., M]` of the input into a
grid of blocks of shape `block_shape`, and interleaves these blocks with the
"batch" dimension (0) such that in the output, the spatial dimensions
`[1, ..., M]` correspond to the position within the grid, and the batch
dimension combines both the position within a spatial block and the original
batch position.  Prior to division into blocks, the spatial dimensions of the
input are optionally zero padded according to `paddings`.  See below for a
precise description.
"""
tf.@op function space_to_batch_nd(v7343, v7344, v7345; name=nothing, T=nothing, Tblock_shape=nothing, Tpaddings=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SpaceToBatchND") 
                    begin  
                        begin  
                            v7343 = convert(TensorFlow.Tensor{Any}, v7343) 
                            begin  
                            end
                        end
                        begin  
                            v7344 = convert(TensorFlow.Tensor{Int32}, v7344) 
                            begin  
                            end
                        end
                        begin  
                            v7345 = convert(TensorFlow.Tensor{Int32}, v7345) 
                            begin  
                            end
                        end
                        begin  
                            (v7343,) = tf.tf_promote(v7343)
                        end
                        begin  
                            (v7345,) = tf.tf_promote(v7345)
                        end
                        begin  
                            (v7344,) = tf.tf_promote(v7344)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7343)
                        end
                        begin  
                            tf.add_input(desc, v7344)
                        end
                        begin  
                            tf.add_input(desc, v7345)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tblock_shape !== nothing 
                                desc["Tblock_shape"] = Base.identity(Tblock_shape)
                            end
                        end
                        begin  
                            if Tpaddings !== nothing 
                                desc["Tpaddings"] = Base.identity(Tpaddings)
                            end
                        end
                    end
                end), name, "SpaceToBatchND") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     edit_distance(hypothesis_indices, hypothesis_values, hypothesis_shape, truth_indices, truth_values, truth_shape; normalize=true)

Computes the (possibly normalized) Levenshtein Edit Distance.

The inputs are variable-length sequences provided by SparseTensors
  (hypothesis_indices, hypothesis_values, hypothesis_shape)
and
  (truth_indices, truth_values, truth_shape).

The inputs are:
"""
tf.@op function edit_distance(v7346, v7347, v7348, v7349, v7350, v7351; name=nothing, normalize=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("EditDistance") 
                    begin  
                        begin  
                            v7346 = convert(TensorFlow.Tensor{Any}, v7346) 
                            begin  
                            end
                        end
                        begin  
                            v7347 = convert(TensorFlow.Tensor{Any}, v7347) 
                            begin  
                            end
                        end
                        begin  
                            v7348 = convert(TensorFlow.Tensor{Any}, v7348) 
                            begin  
                            end
                        end
                        begin  
                            v7349 = convert(TensorFlow.Tensor{Any}, v7349) 
                            begin  
                            end
                        end
                        begin  
                            v7350 = convert(TensorFlow.Tensor{Any}, v7350) 
                            begin  
                            end
                        end
                        begin  
                            v7351 = convert(TensorFlow.Tensor{Any}, v7351) 
                            begin  
                            end
                        end
                        begin  
                            (v7347, v7350) = tf.tf_promote(v7347, v7350)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7346)
                        end
                        begin  
                            tf.add_input(desc, v7347)
                        end
                        begin  
                            tf.add_input(desc, v7348)
                        end
                        begin  
                            tf.add_input(desc, v7349)
                        end
                        begin  
                            tf.add_input(desc, v7350)
                        end
                        begin  
                            tf.add_input(desc, v7351)
                        end
                    end 
                    begin  
                        begin  
                            if normalize !== nothing 
                                desc["normalize"] = Base.Bool(normalize)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "EditDistance") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_reshape(input_indices, input_shape, new_shape)

Reshapes a SparseTensor to represent values in a new dense shape.

This operation has the same semantics as reshape on the represented dense
tensor.  The `input_indices` are recomputed based on the requested `new_shape`.

If one component of `new_shape` is the special value -1, the size of that
dimension is computed so that the total dense size remains constant.  At
most one component of `new_shape` can be -1.  The number of dense elements
implied by `new_shape` must be the same as the number of dense elements
originally implied by `input_shape`.

Reshaping does not affect the order of values in the SparseTensor.

If the input tensor has rank `R_in` and `N` non-empty values, and `new_shape`
has length `R_out`, then `input_indices` has shape `[N, R_in]`,
`input_shape` has length `R_in`, `output_indices` has shape `[N, R_out]`, and
`output_shape` has length `R_out`.
"""
tf.@op function sparse_reshape(v7352, v7353, v7354; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseReshape") 
                    begin  
                        begin  
                            v7352 = convert(TensorFlow.Tensor{Any}, v7352) 
                            begin  
                            end
                        end
                        begin  
                            v7353 = convert(TensorFlow.Tensor{Any}, v7353) 
                            begin  
                            end
                        end
                        begin  
                            v7354 = convert(TensorFlow.Tensor{Any}, v7354) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7352)
                        end
                        begin  
                            tf.add_input(desc, v7353)
                        end
                        begin  
                            tf.add_input(desc, v7354)
                        end
                    end 
                    begin  
                    end
                end), name, "SparseReshape") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     stack(; stack_name=)

A stack that produces elements in first-in last-out order.


"""
tf.@op function stack(; name=nothing, elem_type=nothing, stack_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Stack") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if elem_type !== nothing 
                                desc["elem_type"] = Base.identity(elem_type)
                            end
                        end
                        begin  
                            if stack_name !== nothing 
                                desc["stack_name"] = Base.String(stack_name)
                            end
                        end
                    end
                end), name, "Stack") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     concat_v2(values, axis; Tidx=Int32)

Concatenates tensors along one dimension.


"""
tf.@op function concat_v2(v7355, v7356; name=nothing, N=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ConcatV2") 
                    begin  
                        begin  
                            v7355 = convert.(TensorFlow.Tensor{Any}, v7355) 
                            begin  
                            end
                        end
                        begin  
                            v7356 = convert(TensorFlow.Tensor{Int32}, v7356) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7355,) = tf.tf_promote(v7355)
                        end
                        begin  
                            (v7356,) = tf.tf_promote(v7356)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7355)
                        end
                        begin  
                            tf.add_input(desc, v7356)
                        end
                    end 
                    begin  
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "ConcatV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_sparse_apply_adadelta(var, accum, accum_update, lr, rho, epsilon, grad, indices; use_locking=false)

var: Should be from a Variable().


"""
tf.@op function resource_sparse_apply_adadelta(v7357, v7358, v7359, v7360, v7361, v7362, v7363, v7364; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceSparseApplyAdadelta") 
                    begin  
                        begin  
                            v7357 = convert(TensorFlow.Tensor{Any}, v7357) 
                            begin  
                            end
                        end
                        begin  
                            v7358 = convert(TensorFlow.Tensor{Any}, v7358) 
                            begin  
                            end
                        end
                        begin  
                            v7359 = convert(TensorFlow.Tensor{Any}, v7359) 
                            begin  
                            end
                        end
                        begin  
                            v7360 = convert(TensorFlow.Tensor{Any}, v7360) 
                            begin  
                            end
                        end
                        begin  
                            v7361 = convert(TensorFlow.Tensor{Any}, v7361) 
                            begin  
                            end
                        end
                        begin  
                            v7362 = convert(TensorFlow.Tensor{Any}, v7362) 
                            begin  
                            end
                        end
                        begin  
                            v7363 = convert(TensorFlow.Tensor{Any}, v7363) 
                            begin  
                            end
                        end
                        begin  
                            v7364 = convert(TensorFlow.Tensor{Any}, v7364) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7360, v7361, v7362, v7363) = tf.tf_promote(v7360, v7361, v7362, v7363)
                        end
                        begin  
                            (v7364,) = tf.tf_promote(v7364)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7357)
                        end
                        begin  
                            tf.add_input(desc, v7358)
                        end
                        begin  
                            tf.add_input(desc, v7359)
                        end
                        begin  
                            tf.add_input(desc, v7360)
                        end
                        begin  
                            tf.add_input(desc, v7361)
                        end
                        begin  
                            tf.add_input(desc, v7362)
                        end
                        begin  
                            tf.add_input(desc, v7363)
                        end
                        begin  
                            tf.add_input(desc, v7364)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceSparseApplyAdadelta") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     tile(input, multiples; Tmultiples=Int32)

Constructs a tensor by tiling a given tensor.

This operation creates a new tensor by replicating `input` `multiples` times.
The output tensor's i'th dimension has `input.dims(i) * multiples[i]` elements,
and the values of `input` are replicated `multiples[i]` times along the 'i'th
dimension. For example, tiling `[a b c d]` by `[2]` produces
`[a b c d a b c d]`.
"""
tf.@op function tile(v7365, v7366; name=nothing, T=nothing, Tmultiples=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Tile") 
                    begin  
                        begin  
                            v7365 = convert(TensorFlow.Tensor{Any}, v7365) 
                            begin  
                            end
                        end
                        begin  
                            v7366 = convert(TensorFlow.Tensor{Int32}, v7366) 
                            begin  
                            end
                        end
                        begin  
                            (v7365,) = tf.tf_promote(v7365)
                        end
                        begin  
                            (v7366,) = tf.tf_promote(v7366)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7365)
                        end
                        begin  
                            tf.add_input(desc, v7366)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tmultiples !== nothing 
                                desc["Tmultiples"] = Base.identity(Tmultiples)
                            end
                        end
                    end
                end), name, "Tile") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     rsqrt(x)

Computes reciprocal of square root of x element-wise.

I.e., \\(y = 1 / \sqrt{x}\\).
"""
tf.@op function rsqrt(v7367; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Rsqrt") 
                    begin  
                        begin  
                            v7367 = convert(TensorFlow.Tensor{Any}, v7367) 
                            begin  
                            end
                        end
                        begin  
                            (v7367,) = tf.tf_promote(v7367)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7367)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Rsqrt") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     quantize_and_dequantize(input; signed_input=true, num_bits=8, range_given=false, input_min=nothing, input_max=nothing)

Use QuantizeAndDequantizeV2 instead.


"""
tf.@op function quantize_and_dequantize(v7368; name=nothing, signed_input=nothing, num_bits=nothing, range_given=nothing, input_min=nothing, input_max=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizeAndDequantize") 
                    begin  
                        begin  
                            v7368 = convert(TensorFlow.Tensor{Any}, v7368) 
                            begin  
                            end
                        end
                        begin  
                            (v7368,) = tf.tf_promote(v7368)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7368)
                        end
                    end 
                    begin  
                        begin  
                            if signed_input !== nothing 
                                desc["signed_input"] = Base.Bool(signed_input)
                            end
                        end
                        begin  
                            if num_bits !== nothing 
                                desc["num_bits"] = Base.Int(num_bits)
                            end
                        end
                        begin  
                            if range_given !== nothing 
                                desc["range_given"] = Base.Bool(range_given)
                            end
                        end
                        begin  
                            if input_min !== nothing 
                                desc["input_min"] = Base.identity(input_min)
                            end
                        end
                        begin  
                            if input_max !== nothing 
                                desc["input_max"] = Base.identity(input_max)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "QuantizeAndDequantize") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     quantize_and_dequantize_v2(input, input_min, input_max; signed_input=true, num_bits=8, range_given=false)

Quantizes then dequantizes a tensor.

This op simulates the precision loss from the quantized forward pass by:
1. Quantizing the tensor to fixed point numbers, which should match the target
   quantization method when it is used in inference.
2. Dequantizing it back to floating point numbers for the following ops, most
   likely matmul.

There are different ways to quantize. This version does not use the full range
of the output type, choosing to elide the lowest possible value for symmetry
(e.g., output range is -127 to 127, not -128 to 127 for signed 8 bit
quantization), so that 0.0 maps to 0.

To perform this op, we first find the range of values in our tensor. The range
we use is always centered on 0, so we find m such that

1. m = max(abs(input_min), abs(input_max)) if range_given is true,
2. m = max(abs(min_elem(input)), abs(max_elem(input))) otherwise.

Our input tensor range is then [-m, m].

Next, we choose our fixed-point quantization buckets, [min_fixed, max_fixed].
If signed_input is true, this is

  [min_fixed, max_fixed ] =
      [-(1 << (num_bits - 1) - 1), (1 << (num_bits - 1)) - 1].

Otherwise, if signed_input is false, the fixed-point range is

  [min_fixed, max_fixed] = [0, (1 << num_bits) - 1].

From this we compute our scaling factor, s:

  s = (max_fixed - min_fixed) / (2 * m).

Now we can quantize and dequantize the elements of our tensor.  An element e
is transformed into e':

  e' = (e * s).round_to_nearest() / s.

Note that we have a different number of buckets in the signed vs. unsigned
cases.  For example, if num_bits == 8, we get 254 buckets in the signed case
vs. 255 in the unsigned case.

For example, suppose num_bits = 8 and m = 1.  Then

  [min_fixed, max_fixed] = [-127, 127], and
  s = (127 + 127) / 2 = 127.

Given the vector {-1, -0.5, 0, 0.3}, this is quantized to
{-127, -63, 0, 38}, and dequantized to {-1, -63.0/127, 0, 38.0/127}.
"""
tf.@op function quantize_and_dequantize_v2(v7369, v7370, v7371; name=nothing, signed_input=nothing, num_bits=nothing, range_given=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizeAndDequantizeV2") 
                    begin  
                        begin  
                            v7369 = convert(TensorFlow.Tensor{Any}, v7369) 
                            begin  
                            end
                        end
                        begin  
                            v7370 = convert(TensorFlow.Tensor{Any}, v7370) 
                            begin  
                            end
                        end
                        begin  
                            v7371 = convert(TensorFlow.Tensor{Any}, v7371) 
                            begin  
                            end
                        end
                        begin  
                            (v7369, v7370, v7371) = tf.tf_promote(v7369, v7370, v7371)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7369)
                        end
                        begin  
                            tf.add_input(desc, v7370)
                        end
                        begin  
                            tf.add_input(desc, v7371)
                        end
                    end 
                    begin  
                        begin  
                            if signed_input !== nothing 
                                desc["signed_input"] = Base.Bool(signed_input)
                            end
                        end
                        begin  
                            if num_bits !== nothing 
                                desc["num_bits"] = Base.Int(num_bits)
                            end
                        end
                        begin  
                            if range_given !== nothing 
                                desc["range_given"] = Base.Bool(range_given)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "QuantizeAndDequantizeV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     serialize_many_sparse(sparse_indices, sparse_values, sparse_shape)

Serialize an `N`-minibatch `SparseTensor` into an `[N, 3]` string `Tensor`.

The `SparseTensor` must have rank `R` greater than 1, and the first dimension
is treated as the minibatch dimension.  Elements of the `SparseTensor`
must be sorted in increasing order of this first dimension.  The serialized
`SparseTensor` objects going into each row of `serialized_sparse` will have
rank `R-1`.

The minibatch size `N` is extracted from `sparse_shape[0]`.
"""
tf.@op function serialize_many_sparse(v7372, v7373, v7374; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SerializeManySparse") 
                    begin  
                        begin  
                            v7372 = convert(TensorFlow.Tensor{Any}, v7372) 
                            begin  
                            end
                        end
                        begin  
                            v7373 = convert(TensorFlow.Tensor{Any}, v7373) 
                            begin  
                            end
                        end
                        begin  
                            v7374 = convert(TensorFlow.Tensor{Any}, v7374) 
                            begin  
                            end
                        end
                        begin  
                            (v7373,) = tf.tf_promote(v7373)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7372)
                        end
                        begin  
                            tf.add_input(desc, v7373)
                        end
                        begin  
                            tf.add_input(desc, v7374)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SerializeManySparse") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     delete_session_tensor(handle)

Delete the tensor specified by its handle in the session.


"""
tf.@op function delete_session_tensor(v7375; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DeleteSessionTensor") 
                    begin  
                        begin  
                            v7375 = convert(TensorFlow.Tensor{Any}, v7375) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7375)
                        end
                    end 
                    begin  
                    end
                end), name, "DeleteSessionTensor") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     one_hot(indices, depth, on_value, off_value; axis=-1, TI=Int64)

Returns a one-hot tensor.

The locations represented by indices in `indices` take value `on_value`,
while all other locations take value `off_value`.

If the input `indices` is rank `N`, the output will have rank `N+1`,
The new axis is created at dimension `axis` (default: the new axis is
appended at the end).

If `indices` is a scalar the output shape will be a vector of length `depth`.

If `indices` is a vector of length `features`, the output shape will be:
```
  features x depth if axis == -1
  depth x features if axis == 0
```

If `indices` is a matrix (batch) with shape `[batch, features]`,
the output shape will be:
```
  batch x features x depth if axis == -1
  batch x depth x features if axis == 1
  depth x batch x features if axis == 0
```


Examples
=========

Suppose that

```
  indices = [0, 2, -1, 1]
  depth = 3
  on_value = 5.0
  off_value = 0.0
  axis = -1
```

Then output is `[4 x 3]`:

    ```output =
      [5.0 0.0 0.0]  // one_hot(0)
      [0.0 0.0 5.0]  // one_hot(2)
      [0.0 0.0 0.0]  // one_hot(-1)
      [0.0 5.0 0.0]  // one_hot(1)
    ```

Suppose that

```
  indices = [0, 2, -1, 1]
  depth = 3
  on_value = 0.0
  off_value = 3.0
  axis = 0
```

Then output is `[3 x 4]`:

    ```output =
      [0.0 3.0 3.0 3.0]
      [3.0 3.0 3.0 0.0]
      [3.0 3.0 3.0 3.0]
      [3.0 0.0 3.0 3.0]
    //  ^                one_hot(0)
    //      ^            one_hot(2)
    //          ^        one_hot(-1)
    //              ^    one_hot(1)
    ```
Suppose that

```
  indices = [[0, 2], [1, -1]]
  depth = 3
  on_value = 1.0
  off_value = 0.0
  axis = -1
```

Then output is `[2 x 2 x 3]`:

    ```output =
      [
        [1.0, 0.0, 0.0]  // one_hot(0)
        [0.0, 0.0, 1.0]  // one_hot(2)
      ][
        [0.0, 1.0, 0.0]  // one_hot(1)
        [0.0, 0.0, 0.0]  // one_hot(-1)
      ]```
"""
tf.@op function one_hot(v7376, v7377, v7378, v7379; name=nothing, axis=nothing, T=nothing, TI=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("OneHot") 
                    begin  
                        begin  
                            v7376 = convert(TensorFlow.Tensor{Int64}, v7376) 
                            begin  
                            end
                        end
                        begin  
                            v7377 = convert(TensorFlow.Tensor{Any}, v7377) 
                            begin  
                            end
                        end
                        begin  
                            v7378 = convert(TensorFlow.Tensor{Any}, v7378) 
                            begin  
                            end
                        end
                        begin  
                            v7379 = convert(TensorFlow.Tensor{Any}, v7379) 
                            begin  
                            end
                        end
                        begin  
                            (v7378, v7379) = tf.tf_promote(v7378, v7379)
                        end
                        begin  
                            (v7376,) = tf.tf_promote(v7376)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7376)
                        end
                        begin  
                            tf.add_input(desc, v7377)
                        end
                        begin  
                            tf.add_input(desc, v7378)
                        end
                        begin  
                            tf.add_input(desc, v7379)
                        end
                    end 
                    begin  
                        begin  
                            if axis !== nothing 
                                desc["axis"] = Base.Int(axis)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if TI !== nothing 
                                desc["TI"] = Base.identity(TI)
                            end
                        end
                    end
                end), name, "OneHot") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_apply_ftrl(var, accum, linear, grad, lr, l1, l2, lr_power; use_locking=false)

Update '*var' according to the Ftrl-proximal scheme.

accum_new = accum + grad * grad
linear += grad + (accum_new^(-lr_power) - accum^(-lr_power)) / lr * var
quadratic = 1.0 / (accum_new^(lr_power) * lr) + 2 * l2
var = (sign(linear) * l1 - linear) / quadratic if |linear| > l1 else 0.0
accum = accum_new
"""
tf.@op function resource_apply_ftrl(v7380, v7381, v7382, v7383, v7384, v7385, v7386, v7387; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceApplyFtrl") 
                    begin  
                        begin  
                            v7380 = convert(TensorFlow.Tensor{Any}, v7380) 
                            begin  
                            end
                        end
                        begin  
                            v7381 = convert(TensorFlow.Tensor{Any}, v7381) 
                            begin  
                            end
                        end
                        begin  
                            v7382 = convert(TensorFlow.Tensor{Any}, v7382) 
                            begin  
                            end
                        end
                        begin  
                            v7383 = convert(TensorFlow.Tensor{Any}, v7383) 
                            begin  
                            end
                        end
                        begin  
                            v7384 = convert(TensorFlow.Tensor{Any}, v7384) 
                            begin  
                            end
                        end
                        begin  
                            v7385 = convert(TensorFlow.Tensor{Any}, v7385) 
                            begin  
                            end
                        end
                        begin  
                            v7386 = convert(TensorFlow.Tensor{Any}, v7386) 
                            begin  
                            end
                        end
                        begin  
                            v7387 = convert(TensorFlow.Tensor{Any}, v7387) 
                            begin  
                            end
                        end
                        begin  
                            (v7383, v7384, v7385, v7386, v7387) = tf.tf_promote(v7383, v7384, v7385, v7386, v7387)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7380)
                        end
                        begin  
                            tf.add_input(desc, v7381)
                        end
                        begin  
                            tf.add_input(desc, v7382)
                        end
                        begin  
                            tf.add_input(desc, v7383)
                        end
                        begin  
                            tf.add_input(desc, v7384)
                        end
                        begin  
                            tf.add_input(desc, v7385)
                        end
                        begin  
                            tf.add_input(desc, v7386)
                        end
                        begin  
                            tf.add_input(desc, v7387)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceApplyFtrl") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     apply_adagrad_da(var, gradient_accumulator, gradient_squared_accumulator, grad, lr, l1, l2, global_step; use_locking=false)

Update '*var' according to the proximal adagrad scheme.


"""
tf.@op function apply_adagrad_da(v7388, v7389, v7390, v7391, v7392, v7393, v7394, v7395; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ApplyAdagradDA") 
                    begin  
                        begin  
                            v7388 = convert(TensorFlow.Tensor{Any}, v7388) 
                            begin  
                            end
                        end
                        begin  
                            v7389 = convert(TensorFlow.Tensor{Any}, v7389) 
                            begin  
                            end
                        end
                        begin  
                            v7390 = convert(TensorFlow.Tensor{Any}, v7390) 
                            begin  
                            end
                        end
                        begin  
                            v7391 = convert(TensorFlow.Tensor{Any}, v7391) 
                            begin  
                            end
                        end
                        begin  
                            v7392 = convert(TensorFlow.Tensor{Any}, v7392) 
                            begin  
                            end
                        end
                        begin  
                            v7393 = convert(TensorFlow.Tensor{Any}, v7393) 
                            begin  
                            end
                        end
                        begin  
                            v7394 = convert(TensorFlow.Tensor{Any}, v7394) 
                            begin  
                            end
                        end
                        begin  
                            v7395 = convert(TensorFlow.Tensor{Any}, v7395) 
                            begin  
                            end
                        end
                        begin  
                            (v7388, v7389, v7390, v7391, v7392, v7393, v7394) = tf.tf_promote(v7388, v7389, v7390, v7391, v7392, v7393, v7394)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7388)
                        end
                        begin  
                            tf.add_input(desc, v7389)
                        end
                        begin  
                            tf.add_input(desc, v7390)
                        end
                        begin  
                            tf.add_input(desc, v7391)
                        end
                        begin  
                            tf.add_input(desc, v7392)
                        end
                        begin  
                            tf.add_input(desc, v7393)
                        end
                        begin  
                            tf.add_input(desc, v7394)
                        end
                        begin  
                            tf.add_input(desc, v7395)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ApplyAdagradDA") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     assign_variable_op(resource, value)

Assigns a new value to a variable.

Any ReadVariableOp with a control dependency on this op is guaranteed to return
this value or a subsequent newer value of the variable.
"""
tf.@op function assign_variable_op(v7396, v7397; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AssignVariableOp") 
                    begin  
                        begin  
                            v7396 = convert(TensorFlow.Tensor{Any}, v7396) 
                            begin  
                            end
                        end
                        begin  
                            v7397 = convert(TensorFlow.Tensor{Any}, v7397) 
                            begin  
                            end
                        end
                        begin  
                            (v7397,) = tf.tf_promote(v7397)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7396)
                        end
                        begin  
                            tf.add_input(desc, v7397)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "AssignVariableOp") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     ctcb_search_decoder(inputs, sequence_length; merge_repeated=true)

Performs beam search decoding on the logits given in input.

A note about the attribute merge_repeated: For the beam search decoder,
this means that if consecutive entries in a beam are the same, only
the first of these is emitted.  That is, when the top path is "A B B B B",
"A B" is returned if merge_repeated = True but "A B B B B" is
returned if merge_repeated = False.
"""
tf.@op function ctcb_search_decoder(v7398, v7399; name=nothing, beam_width=nothing, top_paths=nothing, merge_repeated=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("CTCBeamSearchDecoder") 
                    begin  
                        begin  
                            v7398 = convert(TensorFlow.Tensor{Any}, v7398) 
                            begin  
                            end
                        end
                        begin  
                            v7399 = convert(TensorFlow.Tensor{Any}, v7399) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7398)
                        end
                        begin  
                            tf.add_input(desc, v7399)
                        end
                    end 
                    begin  
                        begin  
                            if beam_width !== nothing 
                                desc["beam_width"] = Base.Int(beam_width)
                            end
                        end
                        begin  
                            if top_paths !== nothing 
                                desc["top_paths"] = Base.Int(top_paths)
                            end
                        end
                        begin  
                            if merge_repeated !== nothing 
                                desc["merge_repeated"] = Base.Bool(merge_repeated)
                            end
                        end
                    end
                end), name, "CTCBeamSearchDecoder") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3), tf.Tensor(op, 4))
        end
    end

"""
     queue_enqueue(handle, components; timeout_ms=-1)

Enqueues a tuple of one or more tensors in the given queue.

The components input has k elements, which correspond to the components of
tuples stored in the given queue.

N.B. If the queue is full, this operation will block until the given
element has been enqueued (or 'timeout_ms' elapses, if specified).
"""
tf.@op function queue_enqueue(v7400, v7401; name=nothing, Tcomponents=nothing, timeout_ms=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueEnqueue") 
                    begin  
                        begin  
                            v7400 = convert(TensorFlow.Tensor{Any}, v7400) 
                            begin  
                            end
                        end
                        begin  
                            v7401 = convert.(TensorFlow.Tensor{Any}, v7401) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7400)
                        end
                        begin  
                            tf.add_input(desc, v7401)
                        end
                    end 
                    begin  
                        begin  
                            if Tcomponents !== nothing 
                                desc["Tcomponents"] = Base.identity.Tcomponents
                            end
                        end
                        begin  
                            if timeout_ms !== nothing 
                                desc["timeout_ms"] = Base.Int(timeout_ms)
                            end
                        end
                    end
                end), name, "QueueEnqueue") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     conditional_accumulator(; container=, shared_name=)

A conditional accumulator for aggregating gradients. The accumulator accepts

gradients marked with local_step greater or equal to the most recent global_step
known to the accumulator. The average can be extracted from the accumulator,
provided sufficient gradients have been accumulated. Extracting the average
automatically resets the aggregate to 0, and increments the global_step recorded
by the accumulator.
"""
tf.@op function conditional_accumulator(; name=nothing, dtype=nothing, shape=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ConditionalAccumulator") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if shape !== nothing 
                                desc["shape"] = Base.identity(shape)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "ConditionalAccumulator") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_matrix_solve_ls(matrix, rhs, l2_regularizer; fast=true)




"""
tf.@op function batch_matrix_solve_ls(v7402, v7403, v7404; name=nothing, T=nothing, fast=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchMatrixSolveLs") 
                    begin  
                        begin  
                            v7402 = convert(TensorFlow.Tensor{Any}, v7402) 
                            begin  
                            end
                        end
                        begin  
                            v7403 = convert(TensorFlow.Tensor{Any}, v7403) 
                            begin  
                            end
                        end
                        begin  
                            v7404 = convert(TensorFlow.Tensor{Any}, v7404) 
                            begin  
                            end
                        end
                        begin  
                            (v7402, v7403) = tf.tf_promote(v7402, v7403)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7402)
                        end
                        begin  
                            tf.add_input(desc, v7403)
                        end
                        begin  
                            tf.add_input(desc, v7404)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if fast !== nothing 
                                desc["fast"] = Base.Bool(fast)
                            end
                        end
                    end
                end), name, "BatchMatrixSolveLs") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_split(split_dim, indices, values, shape)

Split a `SparseTensor` into `num_split` tensors along one dimension.

If the `shape[split_dim]` is not an integer multiple of `num_split`. Slices
`[0 : shape[split_dim] % num_split]` gets one extra dimension.
For example, if `split_dim = 1` and `num_split = 2` and the input is

    input_tensor = shape = [2, 7]
    [    a   d e  ]
    [b c          ]

Graphically the output tensors are:

    output_tensor[0] = shape = [2, 4]
    [    a  ]
    [b c    ]

    output_tensor[1] = shape = [2, 3]
    [ d e  ]
    [      ]
"""
tf.@op function sparse_split(v7405, v7406, v7407, v7408; name=nothing, num_split=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseSplit") 
                    begin  
                        begin  
                            v7405 = convert(TensorFlow.Tensor{Any}, v7405) 
                            begin  
                            end
                        end
                        begin  
                            v7406 = convert(TensorFlow.Tensor{Any}, v7406) 
                            begin  
                            end
                        end
                        begin  
                            v7407 = convert(TensorFlow.Tensor{Any}, v7407) 
                            begin  
                            end
                        end
                        begin  
                            v7408 = convert(TensorFlow.Tensor{Any}, v7408) 
                            begin  
                            end
                        end
                        begin  
                            (v7407,) = tf.tf_promote(v7407)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7405)
                        end
                        begin  
                            tf.add_input(desc, v7406)
                        end
                        begin  
                            tf.add_input(desc, v7407)
                        end
                        begin  
                            tf.add_input(desc, v7408)
                        end
                    end 
                    begin  
                        begin  
                            if num_split !== nothing 
                                desc["num_split"] = Base.Int(num_split)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseSplit") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     depthwise_conv_2d_native(input, filter; data_format=NHWC)

Computes a 2-D depthwise convolution given 4-D `input` and `filter` tensors.

Given an input tensor of shape `[batch, in_height, in_width, in_channels]`
and a filter / kernel tensor of shape
`[filter_height, filter_width, in_channels, channel_multiplier]`, containing
`in_channels` convolutional filters of depth 1, `depthwise_conv2d` applies
a different filter to each input channel (expanding from 1 channel to
`channel_multiplier` channels for each), then concatenates the results
together. Thus, the output has `in_channels * channel_multiplier` channels.

for k in 0..in_channels-1
  for q in 0..channel_multiplier-1
    output[b, i, j, k * channel_multiplier + q] =
      sum_{di, dj} input[b, strides[1] * i + di, strides[2] * j + dj, k] *
                        filter[di, dj, k, q]

Must have `strides[0] = strides[3] = 1`.  For the most common case of the same
horizontal and vertices strides, `strides = [1, stride, stride, 1]`.
"""
tf.@op function depthwise_conv_2d_native(v7409, v7410; name=nothing, T=nothing, strides=nothing, padding=nothing, data_format=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DepthwiseConv2dNative") 
                    begin  
                        begin  
                            v7409 = convert(TensorFlow.Tensor{Any}, v7409) 
                            begin  
                            end
                        end
                        begin  
                            v7410 = convert(TensorFlow.Tensor{Any}, v7410) 
                            begin  
                            end
                        end
                        begin  
                            (v7409, v7410) = tf.tf_promote(v7409, v7410)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7409)
                        end
                        begin  
                            tf.add_input(desc, v7410)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                    end
                end), name, "DepthwiseConv2dNative") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     not_equal(x, y)

Returns the truth value of (x != y) element-wise.

*NOTE*: `NotEqual` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function not_equal(v7411, v7412; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("NotEqual") 
                    begin  
                        begin  
                            v7411 = convert(TensorFlow.Tensor{Any}, v7411) 
                            begin  
                            end
                        end
                        begin  
                            v7412 = convert(TensorFlow.Tensor{Any}, v7412) 
                            begin  
                            end
                        end
                        begin  
                            (v7411, v7412) = tf.tf_promote(v7411, v7412)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7411)
                        end
                        begin  
                            tf.add_input(desc, v7412)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "NotEqual") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_unpack(handle, value, flow_in)




"""
tf.@op function tensor_array_unpack(v7413, v7414, v7415; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayUnpack") 
                    begin  
                        begin  
                            v7413 = convert(TensorFlow.Tensor{Any}, v7413) 
                            begin  
                            end
                        end
                        begin  
                            v7414 = convert(TensorFlow.Tensor{Any}, v7414) 
                            begin  
                            end
                        end
                        begin  
                            v7415 = convert(TensorFlow.Tensor{Any}, v7415) 
                            begin  
                            end
                        end
                        begin  
                            (v7414,) = tf.tf_promote(v7414)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7413)
                        end
                        begin  
                            tf.add_input(desc, v7414)
                        end
                        begin  
                            tf.add_input(desc, v7415)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TensorArrayUnpack") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     lgamma(x)

Computes the log of the absolute value of `Gamma(x)` element-wise.


"""
tf.@op function lgamma(v7416; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Lgamma") 
                    begin  
                        begin  
                            v7416 = convert(TensorFlow.Tensor{Any}, v7416) 
                            begin  
                            end
                        end
                        begin  
                            (v7416,) = tf.tf_promote(v7416)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7416)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Lgamma") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     top_k(input; sorted=true)

Finds values and indices of the `k` largest elements for the last dimension.

If the input is a vector (rank-1), finds the `k` largest entries in the vector
and outputs their values and indices as vectors.  Thus `values[j]` is the
`j`-th largest entry in `input`, and its index is `indices[j]`.

For matrices (resp. higher rank input), computes the top `k` entries in each
row (resp. vector along the last dimension).  Thus,

    values.shape = indices.shape = input.shape[:-1] + [k]

If two elements are equal, the lower-index element appears first.

If `k` varies dynamically, use `TopKV2` below.
"""
tf.@op function top_k(v7417; name=nothing, k=nothing, sorted=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TopK") 
                    begin  
                        begin  
                            v7417 = convert(TensorFlow.Tensor{Any}, v7417) 
                            begin  
                            end
                        end
                        begin  
                            (v7417,) = tf.tf_promote(v7417)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7417)
                        end
                    end 
                    begin  
                        begin  
                            if k !== nothing 
                                desc["k"] = Base.Int(k)
                            end
                        end
                        begin  
                            if sorted !== nothing 
                                desc["sorted"] = Base.Bool(sorted)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TopK") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     barrier_incomplete_size(handle)

Computes the number of incomplete elements in the given barrier.


"""
tf.@op function barrier_incomplete_size(v7418; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BarrierIncompleteSize") 
                    begin  
                        begin  
                            v7418 = convert(TensorFlow.Tensor{Any}, v7418) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7418)
                        end
                    end 
                    begin  
                    end
                end), name, "BarrierIncompleteSize") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     whole_file_reader(; container=, shared_name=)

A Reader that outputs the entire contents of a file as a value.

To use, enqueue filenames in a Queue.  The output of ReaderRead will
be a filename (key) and the contents of that file (value).
"""
tf.@op function whole_file_reader(; name=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("WholeFileReader") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "WholeFileReader") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     self_adjoint_eig(input)

Computes the Eigen Decomposition of a batch of square self-adjoint matrices.

The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions
form square matrices, with the same constraints as the single matrix
SelfAdjointEig.

The result is a [..., M+1, M] matrix with [..., 0,:] containing the
eigenvalues, and subsequent [...,1:, :] containing the eigenvectors.
"""
tf.@op function self_adjoint_eig(v7419; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SelfAdjointEig") 
                    begin  
                        begin  
                            v7419 = convert(TensorFlow.Tensor{Any}, v7419) 
                            begin  
                            end
                        end
                        begin  
                            (v7419,) = tf.tf_promote(v7419)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7419)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SelfAdjointEig") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     apply_rmsp(var, ms, mom, lr, rho, momentum, epsilon, grad; use_locking=false)

Update '*var' according to the RMSProp algorithm.

Note that in dense implementation of this algorithm, ms and mom will
update even if the grad is zero, but in this sparse implementation, ms
and mom will not update in iterations during which the grad is zero.

mean_square = decay * mean_square + (1-decay) * gradient ** 2
Delta = learning_rate * gradient / sqrt(mean_square + epsilon)

ms <- rho * ms_{t-1} + (1-rho) * grad * grad
mom <- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
var <- var - mom
"""
tf.@op function apply_rmsp(v7420, v7421, v7422, v7423, v7424, v7425, v7426, v7427; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ApplyRMSProp") 
                    begin  
                        begin  
                            v7420 = convert(TensorFlow.Tensor{Any}, v7420) 
                            begin  
                            end
                        end
                        begin  
                            v7421 = convert(TensorFlow.Tensor{Any}, v7421) 
                            begin  
                            end
                        end
                        begin  
                            v7422 = convert(TensorFlow.Tensor{Any}, v7422) 
                            begin  
                            end
                        end
                        begin  
                            v7423 = convert(TensorFlow.Tensor{Any}, v7423) 
                            begin  
                            end
                        end
                        begin  
                            v7424 = convert(TensorFlow.Tensor{Any}, v7424) 
                            begin  
                            end
                        end
                        begin  
                            v7425 = convert(TensorFlow.Tensor{Any}, v7425) 
                            begin  
                            end
                        end
                        begin  
                            v7426 = convert(TensorFlow.Tensor{Any}, v7426) 
                            begin  
                            end
                        end
                        begin  
                            v7427 = convert(TensorFlow.Tensor{Any}, v7427) 
                            begin  
                            end
                        end
                        begin  
                            (v7420, v7421, v7422, v7423, v7424, v7425, v7426, v7427) = tf.tf_promote(v7420, v7421, v7422, v7423, v7424, v7425, v7426, v7427)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7420)
                        end
                        begin  
                            tf.add_input(desc, v7421)
                        end
                        begin  
                            tf.add_input(desc, v7422)
                        end
                        begin  
                            tf.add_input(desc, v7423)
                        end
                        begin  
                            tf.add_input(desc, v7424)
                        end
                        begin  
                            tf.add_input(desc, v7425)
                        end
                        begin  
                            tf.add_input(desc, v7426)
                        end
                        begin  
                            tf.add_input(desc, v7427)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ApplyRMSProp") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     acos(x)

Computes acos of x element-wise.


"""
tf.@op function acos(v7428; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Acos") 
                    begin  
                        begin  
                            v7428 = convert(TensorFlow.Tensor{Any}, v7428) 
                            begin  
                            end
                        end
                        begin  
                            (v7428,) = tf.tf_promote(v7428)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7428)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Acos") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     restore(file_pattern, tensor_name; preferred_shard=-1)

Restores a tensor from checkpoint files.

Reads a tensor stored in one or several files. If there are several files (for
instance because a tensor was saved as slices), `file_pattern` may contain
wildcard symbols (`*` and `?`) in the filename portion only, not in the
directory portion.

If a `file_pattern` matches several files, `preferred_shard` can be used to hint
in which file the requested tensor is likely to be found. This op will first
open the file at index `preferred_shard` in the list of matching files and try
to restore tensors from that file.  Only if some tensors or tensor slices are
not found in that first file, then the Op opens all the files. Setting
`preferred_shard` to match the value passed as the `shard` input
of a matching `Save` Op may speed up Restore.  This attribute only affects
performance, not correctness.  The default value -1 means files are processed in
order.

See also `RestoreSlice`.
"""
tf.@op function restore(v7429, v7430; name=nothing, dt=nothing, preferred_shard=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Restore") 
                    begin  
                        begin  
                            v7429 = convert(TensorFlow.Tensor{Any}, v7429) 
                            begin  
                            end
                        end
                        begin  
                            v7430 = convert(TensorFlow.Tensor{Any}, v7430) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7429)
                        end
                        begin  
                            tf.add_input(desc, v7430)
                        end
                    end 
                    begin  
                        begin  
                            if dt !== nothing 
                                desc["dt"] = Base.identity(dt)
                            end
                        end
                        begin  
                            if preferred_shard !== nothing 
                                desc["preferred_shard"] = Base.Int(preferred_shard)
                            end
                        end
                    end
                end), name, "Restore") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     adjust_saturation(images, scale)

Adjust the saturation of one or more images.

`images` is a tensor of at least 3 dimensions.  The last dimension is
interpretted as channels, and must be three.

The input image is considered in the RGB colorspace. Conceptually, the RGB
colors are first mapped into HSV. A scale is then applied all the saturation
values, and then remapped back to RGB colorspace.
"""
tf.@op function adjust_saturation(v7431, v7432; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AdjustSaturation") 
                    begin  
                        begin  
                            v7431 = convert(TensorFlow.Tensor{Any}, v7431) 
                            begin  
                            end
                        end
                        begin  
                            v7432 = convert(TensorFlow.Tensor{Any}, v7432) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7431)
                        end
                        begin  
                            tf.add_input(desc, v7432)
                        end
                    end 
                    begin  
                    end
                end), name, "AdjustSaturation") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     all(input, reduction_indices; keep_dims=false, Tidx=Int32)

Computes the "logical and" of elements across dimensions of a tensor.

Reduces `input` along the dimensions given in `reduction_indices`. Unless
`keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
`reduction_indices`. If `keep_dims` is true, the reduced dimensions are
retained with length 1.
"""
tf.@op function all(v7433, v7434; name=nothing, keep_dims=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("All") 
                    begin  
                        begin  
                            v7433 = convert(TensorFlow.Tensor{Any}, v7433) 
                            begin  
                            end
                        end
                        begin  
                            v7434 = convert(TensorFlow.Tensor{Int32}, v7434) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7434,) = tf.tf_promote(v7434)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7433)
                        end
                        begin  
                            tf.add_input(desc, v7434)
                        end
                    end 
                    begin  
                        begin  
                            if keep_dims !== nothing 
                                desc["keep_dims"] = Base.Bool(keep_dims)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "All") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_dense_cwise_div(sp_indices, sp_values, sp_shape, dense)

Component-wise divides a SparseTensor by a dense Tensor.

*Limitation*: this Op only broadcasts the dense side to the sparse side, but not
the other direction.
"""
tf.@op function sparse_dense_cwise_div(v7435, v7436, v7437, v7438; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseDenseCwiseDiv") 
                    begin  
                        begin  
                            v7435 = convert(TensorFlow.Tensor{Any}, v7435) 
                            begin  
                            end
                        end
                        begin  
                            v7436 = convert(TensorFlow.Tensor{Any}, v7436) 
                            begin  
                            end
                        end
                        begin  
                            v7437 = convert(TensorFlow.Tensor{Any}, v7437) 
                            begin  
                            end
                        end
                        begin  
                            v7438 = convert(TensorFlow.Tensor{Any}, v7438) 
                            begin  
                            end
                        end
                        begin  
                            (v7436, v7438) = tf.tf_promote(v7436, v7438)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7435)
                        end
                        begin  
                            tf.add_input(desc, v7436)
                        end
                        begin  
                            tf.add_input(desc, v7437)
                        end
                        begin  
                            tf.add_input(desc, v7438)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseDenseCwiseDiv") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_v3(size; element_shape=TensorShape[unknown], dynamic_size=false, clear_after_read=true, tensor_array_name=)

An array of Tensors of given size, with data written via Write and read

via Read or Pack.
"""
tf.@op function tensor_array_v3(v7439; name=nothing, dtype=nothing, element_shape=nothing, dynamic_size=nothing, clear_after_read=nothing, tensor_array_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayV3") 
                    begin  
                        begin  
                            v7439 = convert(TensorFlow.Tensor{Any}, v7439) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7439)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if element_shape !== nothing 
                                desc["element_shape"] = Base.identity(element_shape)
                            end
                        end
                        begin  
                            if dynamic_size !== nothing 
                                desc["dynamic_size"] = Base.Bool(dynamic_size)
                            end
                        end
                        begin  
                            if clear_after_read !== nothing 
                                desc["clear_after_read"] = Base.Bool(clear_after_read)
                            end
                        end
                        begin  
                            if tensor_array_name !== nothing 
                                desc["tensor_array_name"] = Base.String(tensor_array_name)
                            end
                        end
                    end
                end), name, "TensorArrayV3") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     queue_close(handle; cancel_pending_enqueues=false)

Closes the given queue.

This operation signals that no more elements will be enqueued in the
given queue. Subsequent Enqueue(Many) operations will fail.
Subsequent Dequeue(Many) operations will continue to succeed if
sufficient elements remain in the queue. Subsequent Dequeue(Many)
operations that would block will fail immediately.
"""
tf.@op function queue_close(v7440; name=nothing, cancel_pending_enqueues=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueClose") 
                    begin  
                        begin  
                            v7440 = convert(TensorFlow.Tensor{Any}, v7440) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7440)
                        end
                    end 
                    begin  
                        begin  
                            if cancel_pending_enqueues !== nothing 
                                desc["cancel_pending_enqueues"] = Base.Bool(cancel_pending_enqueues)
                            end
                        end
                    end
                end), name, "QueueClose") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     var_handle_op(; container=, shared_name=)

Creates a handle to a Variable resource.


"""
tf.@op function var_handle_op(; name=nothing, container=nothing, shared_name=nothing, dtype=nothing, shape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("VarHandleOp") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if shape !== nothing 
                                desc["shape"] = Base.identity(shape)
                            end
                        end
                    end
                end), name, "VarHandleOp") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     in_top_k(predictions, targets; T=Int32)

Says whether the targets are in the top `K` predictions.

This outputs a `batch_size` bool array, an entry `out[i]` is `true` if the
prediction for the target class is among the top `k` predictions among
all predictions for example `i`. Note that the behavior of `InTopK` differs
from the `TopK` op in its handling of ties; if multiple classes have the
same prediction value and straddle the top-`k` boundary, all of those
classes are considered to be in the top `k`.

More formally, let

  \\(predictions_i\\) be the predictions for all classes for example `i`,
  \\(targets_i\\) be the target class for example `i`,
  \\(out_i\\) be the output for example `i`,

out_i = predictions_{i, targets_i} \in TopKIncludingTies(predictions_i)
"""
tf.@op function in_top_k(v7441, v7442; name=nothing, k=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("InTopK") 
                    begin  
                        begin  
                            v7441 = convert(TensorFlow.Tensor{Any}, v7441) 
                            begin  
                            end
                        end
                        begin  
                            v7442 = convert(TensorFlow.Tensor{Int32}, v7442) 
                            begin  
                            end
                        end
                        begin  
                            (v7442,) = tf.tf_promote(v7442)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7441)
                        end
                        begin  
                            tf.add_input(desc, v7442)
                        end
                    end 
                    begin  
                        begin  
                            if k !== nothing 
                                desc["k"] = Base.Int(k)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "InTopK") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_sub(ref, indices, updates; use_locking=false)

Subtracts sparse updates to a variable reference.

    # Scalar indices
    ref[indices, ...] -= updates[...]

    # Vector indices (for each i)
    ref[indices[i], ...] -= updates[i, ...]

    # High rank indices (for each i, ..., j)
    ref[indices[i, ..., j], ...] -= updates[i, ..., j, ...]

This operation outputs `ref` after the update is done.
This makes it easier to chain operations that need to use the reset value.

Duplicate entries are handled correctly: if multiple `indices` reference
the same location, their (negated) contributions add.

Requires `updates.shape = indices.shape + ref.shape[1:]`.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/ScatterSub.png" alt>
</div>
"""
tf.@op function scatter_sub(v7443, v7444, v7445; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ScatterSub") 
                    begin  
                        begin  
                            v7443 = convert(TensorFlow.Tensor{Any}, v7443) 
                            begin  
                            end
                        end
                        begin  
                            v7444 = convert(TensorFlow.Tensor{Any}, v7444) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7445 = convert(TensorFlow.Tensor{Any}, v7445) 
                            begin  
                            end
                        end
                        begin  
                            (v7443, v7445) = tf.tf_promote(v7443, v7445)
                        end
                        begin  
                            (v7444,) = tf.tf_promote(v7444)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7443)
                        end
                        begin  
                            tf.add_input(desc, v7444)
                        end
                        begin  
                            tf.add_input(desc, v7445)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ScatterSub") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     depthwise_conv_2d_native_backprop_filter(input, filter_sizes, out_backprop; data_format=NHWC)

Computes the gradients of depthwise convolution with respect to the filter.


"""
tf.@op function depthwise_conv_2d_native_backprop_filter(v7446, v7447, v7448; name=nothing, T=nothing, strides=nothing, padding=nothing, data_format=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DepthwiseConv2dNativeBackpropFilter") 
                    begin  
                        begin  
                            v7446 = convert(TensorFlow.Tensor{Any}, v7446) 
                            begin  
                            end
                        end
                        begin  
                            v7447 = convert(TensorFlow.Tensor{Any}, v7447) 
                            begin  
                            end
                        end
                        begin  
                            v7448 = convert(TensorFlow.Tensor{Any}, v7448) 
                            begin  
                            end
                        end
                        begin  
                            (v7446, v7448) = tf.tf_promote(v7446, v7448)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7446)
                        end
                        begin  
                            tf.add_input(desc, v7447)
                        end
                        begin  
                            tf.add_input(desc, v7448)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                    end
                end), name, "DepthwiseConv2dNativeBackpropFilter") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     priority_queue_v2(; component_types=Int64[], capacity=-1, container=, shared_name=)

A queue that produces elements sorted by the first component value.

Note that the PriorityQueue requires the first component of any element
to be a scalar int64, in addition to the other elements declared by
component_types.  Therefore calls to Enqueue and EnqueueMany (resp. Dequeue
and DequeueMany) on a PriorityQueue will all require (resp. output) one extra
entry in their input (resp. output) lists.
"""
tf.@op function priority_queue_v2(; name=nothing, component_types=nothing, shapes=nothing, capacity=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("PriorityQueueV2") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if shapes !== nothing 
                                desc["shapes"] = Base.identity.shapes
                            end
                        end
                        begin  
                            if capacity !== nothing 
                                desc["capacity"] = Base.Int(capacity)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "PriorityQueueV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     truncated_normal(shape; seed=0, seed2=0)

Outputs random values from a truncated normal distribution.

The generated values follow a normal distribution with mean 0 and standard
deviation 1, except that values whose magnitude is more than 2 standard
deviations from the mean are dropped and re-picked.
"""
tf.@op function truncated_normal(v7449; name=nothing, seed=nothing, seed2=nothing, dtype=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TruncatedNormal") 
                    begin  
                        begin  
                            v7449 = convert(TensorFlow.Tensor{Any}, v7449) 
                            begin  
                            end
                        end
                        begin  
                            (v7449,) = tf.tf_promote(v7449)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7449)
                        end
                    end 
                    begin  
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TruncatedNormal") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     cast(x)

Cast x of type SrcT to y of DstT.


"""
tf.@op function cast(v7450; name=nothing, SrcT=nothing, DstT=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Cast") 
                    begin  
                        begin  
                            v7450 = convert(TensorFlow.Tensor{Any}, v7450) 
                            begin  
                            end
                        end
                        begin  
                            (v7450,) = tf.tf_promote(v7450)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7450)
                        end
                    end 
                    begin  
                        begin  
                            if SrcT !== nothing 
                                desc["SrcT"] = Base.identity(SrcT)
                            end
                        end
                        begin  
                            if DstT !== nothing 
                                desc["DstT"] = Base.identity(DstT)
                            end
                        end
                    end
                end), name, "Cast") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     quantize_v2(input, min_range, max_range; mode=MIN_COMBINED)

Quantize the 'input' tensor of type float to 'output' tensor of type 'T'.

[min_range, max_range] are scalar floats that specify the range for
the 'input' data. The 'mode' attribute controls exactly which calculations are
used to convert the float values to their quantized equivalents.

In 'MIN_COMBINED' mode, each value of the tensor will undergo the following:

```
out[i] = (in[i] - min_range) * range(T) / (max_range - min_range)
if T == qint8, out[i] -= (range(T) + 1) / 2.0
```
here `range(T) = numeric_limits<T>::max() - numeric_limits<T>::min()`

*MIN_COMBINED Mode Example*

Assume the input is type float and has a possible range of [0.0, 6.0] and the
output type is quint8 ([0, 255]). The min_range and max_range values should be
specified as 0.0 and 6.0. Quantizing from float to quint8 will multiply each
value of the input by 255/6 and cast to quint8.

If the output type was qint8 ([-128, 127]), the operation will additionally
subtract each value by 128 prior to casting, so that the range of values aligns
with the range of qint8.

If the mode is 'MIN_FIRST', then this approach is used:

```
number_of_steps = 1 << (# of bits in T)
range_adjust = number_of_steps / (number_of_steps - 1)
range = (range_max - range_min) * range_adjust
range_scale = number_of_steps / range
quantized = round(input * range_scale) - round(range_min * range_scale) +
  numeric_limits<T>::min()
quantized = max(quantized, numeric_limits<T>::min())
quantized = min(quantized, numeric_limits<T>::max())
```

The biggest difference between this and MIN_COMBINED is that the minimum range
is rounded first, before it's subtracted from the rounded value. With
MIN_COMBINED, a small bias is introduced where repeated iterations of quantizing
and dequantizing will introduce a larger and larger error.

One thing to watch out for is that the operator may choose to adjust the
requested minimum and maximum values slightly during the quantization process,
so you should always use the output ports as the range for further calculations.
For example, if the requested minimum and maximum values are close to equal,
they will be separated by a small epsilon value to prevent ill-formed quantized
buffers from being created. Otherwise, you can end up with buffers where all the
quantized values map to the same float value, which causes problems for
operations that have to perform further calculations on them.
"""
tf.@op function quantize_v2(v7451, v7452, v7453; name=nothing, T=nothing, mode=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizeV2") 
                    begin  
                        begin  
                            v7451 = convert(TensorFlow.Tensor{Any}, v7451) 
                            begin  
                            end
                        end
                        begin  
                            v7452 = convert(TensorFlow.Tensor{Any}, v7452) 
                            begin  
                            end
                        end
                        begin  
                            v7453 = convert(TensorFlow.Tensor{Any}, v7453) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7451)
                        end
                        begin  
                            tf.add_input(desc, v7452)
                        end
                        begin  
                            tf.add_input(desc, v7453)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if mode !== nothing 
                                desc["mode"] = Base.String(mode)
                            end
                        end
                    end
                end), name, "QuantizeV2") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     tensor_array_read_v3(handle, index, flow_in)

Read an element from the TensorArray into output `value`.


"""
tf.@op function tensor_array_read_v3(v7454, v7455, v7456; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayReadV3") 
                    begin  
                        begin  
                            v7454 = convert(TensorFlow.Tensor{Any}, v7454) 
                            begin  
                            end
                        end
                        begin  
                            v7455 = convert(TensorFlow.Tensor{Any}, v7455) 
                            begin  
                            end
                        end
                        begin  
                            v7456 = convert(TensorFlow.Tensor{Any}, v7456) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7454)
                        end
                        begin  
                            tf.add_input(desc, v7455)
                        end
                        begin  
                            tf.add_input(desc, v7456)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "TensorArrayReadV3") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     list_diff(x, y; out_idx=Int32)

Computes the difference between two lists of numbers or strings.

Given a list `x` and a list `y`, this operation returns a list `out` that
represents all values that are in `x` but not in `y`. The returned list `out`
is sorted in the same order that the numbers appear in `x` (duplicates are
preserved). This operation also returns a list `idx` that represents the
position of each `out` element in `x`. In other words:

`out[i] = x[idx[i]] for i in [0, 1, ..., len(out) - 1]`

For example, given this input:

```prettyprint
x = [1, 2, 3, 4, 5, 6]
y = [1, 3, 5]
```

This operation would return:

```prettyprint
out ==> [2, 4, 6]
idx ==> [1, 3, 5]
```
"""
tf.@op function list_diff(v7457, v7458; name=nothing, T=nothing, out_idx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ListDiff") 
                    begin  
                        begin  
                            v7457 = convert(TensorFlow.Tensor{Any}, v7457) 
                            begin  
                            end
                        end
                        begin  
                            v7458 = convert(TensorFlow.Tensor{Any}, v7458) 
                            begin  
                            end
                        end
                        begin  
                            (v7457, v7458) = tf.tf_promote(v7457, v7458)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7457)
                        end
                        begin  
                            tf.add_input(desc, v7458)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if out_idx !== nothing 
                                desc["out_idx"] = Base.identity(out_idx)
                            end
                        end
                    end
                end), name, "ListDiff") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     identity(input)

Return a tensor with the same shape and contents as the input tensor or value.


"""
tf.@op function identity(v7459; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Identity") 
                    begin  
                        begin  
                            v7459 = convert(TensorFlow.Tensor{Any}, v7459) 
                            begin  
                            end
                        end
                        begin  
                            (v7459,) = tf.tf_promote(v7459)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7459)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Identity") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     print(input, data; message=, first_n=-1, summarize=3)

Prints a list of tensors.

Passes `input` through to `output` and prints `data` when evaluating.
"""
tf.@op function print(v7460, v7461; name=nothing, T=nothing, U=nothing, message=nothing, first_n=nothing, summarize=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Print") 
                    begin  
                        begin  
                            v7460 = convert(TensorFlow.Tensor{Any}, v7460) 
                            begin  
                            end
                        end
                        begin  
                            v7461 = convert.(TensorFlow.Tensor{Any}, v7461) 
                            begin  
                            end
                        end
                        begin  
                            (v7460,) = tf.tf_promote(v7460)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7460)
                        end
                        begin  
                            tf.add_input(desc, v7461)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if U !== nothing 
                                desc["U"] = Base.identity.U
                            end
                        end
                        begin  
                            if message !== nothing 
                                desc["message"] = Base.String(message)
                            end
                        end
                        begin  
                            if first_n !== nothing 
                                desc["first_n"] = Base.Int(first_n)
                            end
                        end
                        begin  
                            if summarize !== nothing 
                                desc["summarize"] = Base.Int(summarize)
                            end
                        end
                    end
                end), name, "Print") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_matrix_inverse(input; adjoint=false)




"""
tf.@op function batch_matrix_inverse(v7462; name=nothing, adjoint=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchMatrixInverse") 
                    begin  
                        begin  
                            v7462 = convert(TensorFlow.Tensor{Any}, v7462) 
                            begin  
                            end
                        end
                        begin  
                            (v7462,) = tf.tf_promote(v7462)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7462)
                        end
                    end 
                    begin  
                        begin  
                            if adjoint !== nothing 
                                desc["adjoint"] = Base.Bool(adjoint)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchMatrixInverse") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     list_to_array(input)

Converts a list of tensors to an array of tensors.


"""
tf.@op function list_to_array(v7463; name=nothing, Tin=nothing, T=nothing, N=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("_ListToArray") 
                    begin  
                        begin  
                            v7463 = convert.(TensorFlow.Tensor{Any}, v7463) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7463)
                        end
                    end 
                    begin  
                        begin  
                            if Tin !== nothing 
                                desc["Tin"] = Base.identity.Tin
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                    end
                end), name, "_ListToArray") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     neg_train(w_in, w_out, examples, labels, lr)

Training via negative sampling.


"""
tf.@op function neg_train(v7464, v7465, v7466, v7467, v7468; name=nothing, vocab_count=nothing, num_negative_samples=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("NegTrain") 
                    begin  
                        begin  
                            v7464 = convert(TensorFlow.Tensor{Any}, v7464) 
                            begin  
                            end
                        end
                        begin  
                            v7465 = convert(TensorFlow.Tensor{Any}, v7465) 
                            begin  
                            end
                        end
                        begin  
                            v7466 = convert(TensorFlow.Tensor{Any}, v7466) 
                            begin  
                            end
                        end
                        begin  
                            v7467 = convert(TensorFlow.Tensor{Any}, v7467) 
                            begin  
                            end
                        end
                        begin  
                            v7468 = convert(TensorFlow.Tensor{Any}, v7468) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7464)
                        end
                        begin  
                            tf.add_input(desc, v7465)
                        end
                        begin  
                            tf.add_input(desc, v7466)
                        end
                        begin  
                            tf.add_input(desc, v7467)
                        end
                        begin  
                            tf.add_input(desc, v7468)
                        end
                    end 
                    begin  
                        begin  
                            if vocab_count !== nothing 
                                desc["vocab_count"] = Base.identity.vocab_count
                            end
                        end
                        begin  
                            if num_negative_samples !== nothing 
                                desc["num_negative_samples"] = Base.Int(num_negative_samples)
                            end
                        end
                    end
                end), name, "NegTrain") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     reader_reset_v2(reader_handle)

Restore a Reader to its initial clean state.


"""
tf.@op function reader_reset_v2(v7469; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderResetV2") 
                    begin  
                        begin  
                            v7469 = convert(TensorFlow.Tensor{Any}, v7469) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7469)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderResetV2") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     merge_v_2c(checkpoint_prefixes, destination_prefix; delete_old_dirs=true)

V2 format specific: merges the metadata files of sharded checkpoints.  The

result is one logical checkpoint, with one physical metadata file and renamed
data files.

Intended for "grouping" multiple checkpoints in a sharded checkpoint setup.

If delete_old_dirs is true, attempts to delete recursively the dirname of each
path in the input checkpoint_prefixes.  This is useful when those paths are non
user-facing temporary locations.
"""
tf.@op function merge_v_2c(v7470, v7471; name=nothing, delete_old_dirs=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MergeV2Checkpoints") 
                    begin  
                        begin  
                            v7470 = convert(TensorFlow.Tensor{Any}, v7470) 
                            begin  
                            end
                        end
                        begin  
                            v7471 = convert(TensorFlow.Tensor{Any}, v7471) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7470)
                        end
                        begin  
                            tf.add_input(desc, v7471)
                        end
                    end 
                    begin  
                        begin  
                            if delete_old_dirs !== nothing 
                                desc["delete_old_dirs"] = Base.Bool(delete_old_dirs)
                            end
                        end
                    end
                end), name, "MergeV2Checkpoints") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     accumulator_num_accumulated(handle)

Returns the number of gradients aggregated in the given accumulators.


"""
tf.@op function accumulator_num_accumulated(v7472; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AccumulatorNumAccumulated") 
                    begin  
                        begin  
                            v7472 = convert(TensorFlow.Tensor{Any}, v7472) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7472)
                        end
                    end 
                    begin  
                    end
                end), name, "AccumulatorNumAccumulated") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     rint(x)

Returns element-wise integer closest to x.

If the result is midway between two representable values,
the even representable is chosen.
For example:

```
rint(-1.5) ==> -2.0
rint(0.5000001) ==> 1.0
rint([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0]) ==> [-2., -2., -0., 0., 2., 2., 2.]
```
"""
tf.@op function rint(v7473; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Rint") 
                    begin  
                        begin  
                            v7473 = convert(TensorFlow.Tensor{Any}, v7473) 
                            begin  
                            end
                        end
                        begin  
                            (v7473,) = tf.tf_promote(v7473)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7473)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Rint") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     control_trigger()

Does nothing. Serves as a control trigger for scheduling.

Only useful as a placeholder for control edges.
"""
tf.@op function control_trigger(; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ControlTrigger") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                    end
                end), name, "ControlTrigger") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     tensor_array_close_v2(handle)

Deprecated. Use TensorArrayCloseV3


"""
tf.@op function tensor_array_close_v2(v7474; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayCloseV2") 
                    begin  
                        begin  
                            v7474 = convert(TensorFlow.Tensor{Any}, v7474) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7474)
                        end
                    end 
                    begin  
                    end
                end), name, "TensorArrayCloseV2") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     hash_table(; container=, shared_name=, use_node_name_sharing=false)

Creates a non-initialized hash table.

This op creates a hash table, specifying the type of its keys and values.
Before using the table you will have to initialize it.  After initialization the
table will be immutable.
"""
tf.@op function hash_table(; name=nothing, container=nothing, shared_name=nothing, use_node_name_sharing=nothing, key_dtype=nothing, value_dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("HashTable") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                        begin  
                            if use_node_name_sharing !== nothing 
                                desc["use_node_name_sharing"] = Base.Bool(use_node_name_sharing)
                            end
                        end
                        begin  
                            if key_dtype !== nothing 
                                desc["key_dtype"] = Base.identity(key_dtype)
                            end
                        end
                        begin  
                            if value_dtype !== nothing 
                                desc["value_dtype"] = Base.identity(value_dtype)
                            end
                        end
                    end
                end), name, "HashTable") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     softplus_grad(gradients, features)

Computes softplus gradients for a softplus operation.


"""
tf.@op function softplus_grad(v7475, v7476; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SoftplusGrad") 
                    begin  
                        begin  
                            v7475 = convert(TensorFlow.Tensor{Any}, v7475) 
                            begin  
                            end
                        end
                        begin  
                            v7476 = convert(TensorFlow.Tensor{Any}, v7476) 
                            begin  
                            end
                        end
                        begin  
                            (v7475, v7476) = tf.tf_promote(v7475, v7476)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7475)
                        end
                        begin  
                            tf.add_input(desc, v7476)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SoftplusGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fixed_length_record_reader(; header_bytes=0, footer_bytes=0, container=, shared_name=)

A Reader that outputs fixed-length records from a file.


"""
tf.@op function fixed_length_record_reader(; name=nothing, header_bytes=nothing, record_bytes=nothing, footer_bytes=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FixedLengthRecordReader") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if header_bytes !== nothing 
                                desc["header_bytes"] = Base.Int(header_bytes)
                            end
                        end
                        begin  
                            if record_bytes !== nothing 
                                desc["record_bytes"] = Base.Int(record_bytes)
                            end
                        end
                        begin  
                            if footer_bytes !== nothing 
                                desc["footer_bytes"] = Base.Int(footer_bytes)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "FixedLengthRecordReader") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_scatter_v2(handle, indices, value, flow_in)

Deprecated. Use TensorArrayScatterV3


"""
tf.@op function tensor_array_scatter_v2(v7477, v7478, v7479, v7480; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayScatterV2") 
                    begin  
                        begin  
                            v7477 = convert(TensorFlow.Tensor{Any}, v7477) 
                            begin  
                            end
                        end
                        begin  
                            v7478 = convert(TensorFlow.Tensor{Any}, v7478) 
                            begin  
                            end
                        end
                        begin  
                            v7479 = convert(TensorFlow.Tensor{Any}, v7479) 
                            begin  
                            end
                        end
                        begin  
                            v7480 = convert(TensorFlow.Tensor{Any}, v7480) 
                            begin  
                            end
                        end
                        begin  
                            (v7479,) = tf.tf_promote(v7479)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7477)
                        end
                        begin  
                            tf.add_input(desc, v7478)
                        end
                        begin  
                            tf.add_input(desc, v7479)
                        end
                        begin  
                            tf.add_input(desc, v7480)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TensorArrayScatterV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     stop_gradient(input)

Stops gradient computation.

When executed in a graph, this op outputs its input tensor as-is.

When building ops to compute gradients, this op prevents the contribution of
its inputs to be taken into account.  Normally, the gradient generator adds ops
to a graph to compute the derivatives of a specified 'loss' by recursively
finding out inputs that contributed to its computation.  If you insert this op
in the graph it inputs are masked from the gradient generator.  They are not
taken into account for computing gradients.

This is useful any time you want to compute a value with TensorFlow but need
to pretend that the value was a constant. Some examples include:

*  The *EM* algorithm where the *M-step* should not involve backpropagation
   through the output of the *E-step*.
*  Contrastive divergence training of Boltzmann machines where, when
   differentiating the energy function, the training must not backpropagate
   through the graph that generated the samples from the model.
*  Adversarial training, where no backprop should happen through the adversarial
   example generation process.
"""
tf.@op function stop_gradient(v7481; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StopGradient") 
                    begin  
                        begin  
                            v7481 = convert(TensorFlow.Tensor{Any}, v7481) 
                            begin  
                            end
                        end
                        begin  
                            (v7481,) = tf.tf_promote(v7481)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7481)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "StopGradient") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     extract_glimpse(input, size, offsets; centered=true, normalized=true, uniform_noise=true)

Extracts a glimpse from the input tensor.

Returns a set of windows called glimpses extracted at location
`offsets` from the input tensor. If the windows only partially
overlaps the inputs, the non overlapping areas will be filled with
random noise.

The result is a 4-D tensor of shape `[batch_size, glimpse_height,
glimpse_width, channels]`. The channels and batch dimensions are the
same as that of the input tensor. The height and width of the output
windows are specified in the `size` parameter.

The argument `normalized` and `centered` controls how the windows are built:

* If the coordinates are normalized but not centered, 0.0 and 1.0
  correspond to the minimum and maximum of each height and width
  dimension.
* If the coordinates are both normalized and centered, they range from
  -1.0 to 1.0. The coordinates (-1.0, -1.0) correspond to the upper
  left corner, the lower right corner is located at (1.0, 1.0) and the
  center is at (0, 0).
* If the coordinates are not normalized they are interpreted as
  numbers of pixels.
"""
tf.@op function extract_glimpse(v7482, v7483, v7484; name=nothing, centered=nothing, normalized=nothing, uniform_noise=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ExtractGlimpse") 
                    begin  
                        begin  
                            v7482 = convert(TensorFlow.Tensor{Any}, v7482) 
                            begin  
                            end
                        end
                        begin  
                            v7483 = convert(TensorFlow.Tensor{Any}, v7483) 
                            begin  
                            end
                        end
                        begin  
                            v7484 = convert(TensorFlow.Tensor{Any}, v7484) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7482)
                        end
                        begin  
                            tf.add_input(desc, v7483)
                        end
                        begin  
                            tf.add_input(desc, v7484)
                        end
                    end 
                    begin  
                        begin  
                            if centered !== nothing 
                                desc["centered"] = Base.Bool(centered)
                            end
                        end
                        begin  
                            if normalized !== nothing 
                                desc["normalized"] = Base.Bool(normalized)
                            end
                        end
                        begin  
                            if uniform_noise !== nothing 
                                desc["uniform_noise"] = Base.Bool(uniform_noise)
                            end
                        end
                    end
                end), name, "ExtractGlimpse") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     decode_jsone(json_examples)

Convert JSON-encoded Example records to binary protocol buffer strings.

This op translates a tensor containing Example records, encoded using
the [standard JSON
mapping](https://developers.google.com/protocol-buffers/docs/proto3#json),
into a tensor containing the same records encoded as binary protocol
buffers. The resulting tensor can then be fed to any of the other
Example-parsing ops.
"""
tf.@op function decode_jsone(v7485; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DecodeJSONExample") 
                    begin  
                        begin  
                            v7485 = convert(TensorFlow.Tensor{Any}, v7485) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7485)
                        end
                    end 
                    begin  
                    end
                end), name, "DecodeJSONExample") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reader_read_v2(reader_handle, queue_handle)

Returns the next record (key, value pair) produced by a Reader.

Will dequeue from the input queue if necessary (e.g. when the
Reader needs to start reading from a new file since it has finished
with the previous file).
"""
tf.@op function reader_read_v2(v7486, v7487; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderReadV2") 
                    begin  
                        begin  
                            v7486 = convert(TensorFlow.Tensor{Any}, v7486) 
                            begin  
                            end
                        end
                        begin  
                            v7487 = convert(TensorFlow.Tensor{Any}, v7487) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7486)
                        end
                        begin  
                            tf.add_input(desc, v7487)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderReadV2") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     string_to_hash_bucket_strong(input)

Converts each string in the input Tensor to its hash mod by a number of buckets.

The hash function is deterministic on the content of the string within the
process. The hash function is a keyed hash function, where attribute `key`
defines the key of the hash function. `key` is an array of 2 elements.

A strong hash is important when inputs may be malicious, e.g. URLs with
additional components. Adversaries could try to make their inputs hash to the
same bucket for a denial-of-service attack or to skew the results. A strong
hash prevents this by making it difficult, if not infeasible, to compute inputs
that hash to the same bucket. This comes at a cost of roughly 4x higher compute
time than `tf.string_to_hash_bucket_fast`.
"""
tf.@op function string_to_hash_bucket_strong(v7488; name=nothing, num_buckets=nothing, key=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StringToHashBucketStrong") 
                    begin  
                        begin  
                            v7488 = convert(TensorFlow.Tensor{Any}, v7488) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7488)
                        end
                    end 
                    begin  
                        begin  
                            if num_buckets !== nothing 
                                desc["num_buckets"] = Base.Int(num_buckets)
                            end
                        end
                        begin  
                            if key !== nothing 
                                desc["key"] = Base.identity.key
                            end
                        end
                    end
                end), name, "StringToHashBucketStrong") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     split(split_dim, value)

Splits a tensor into `num_split` tensors along one dimension.


"""
tf.@op function split(v7489, v7490; name=nothing, num_split=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Split") 
                    begin  
                        begin  
                            v7489 = convert(TensorFlow.Tensor{Any}, v7489) 
                            begin  
                            end
                        end
                        begin  
                            v7490 = convert(TensorFlow.Tensor{Any}, v7490) 
                            begin  
                            end
                        end
                        begin  
                            (v7490,) = tf.tf_promote(v7490)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7489)
                        end
                        begin  
                            tf.add_input(desc, v7490)
                        end
                    end 
                    begin  
                        begin  
                            if num_split !== nothing 
                                desc["num_split"] = Base.Int(num_split)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Split") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     mod(x, y)

Returns element-wise remainder of division.

*NOTE*: `Mod` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function mod(v7491, v7492; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Mod") 
                    begin  
                        begin  
                            v7491 = convert(TensorFlow.Tensor{Any}, v7491) 
                            begin  
                            end
                        end
                        begin  
                            v7492 = convert(TensorFlow.Tensor{Any}, v7492) 
                            begin  
                            end
                        end
                        begin  
                            (v7491, v7492) = tf.tf_promote(v7491, v7492)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7491)
                        end
                        begin  
                            tf.add_input(desc, v7492)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Mod") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_sparse_apply_momentum(var, accum, lr, grad, indices, momentum; use_locking=false, use_nesterov=false)

Update relevant entries in '*var' and '*accum' according to the momentum scheme.

Set use_nesterov = True if you want to use Nesterov momentum.

That is for rows we have grad for, we update var and accum as follows:

accum = accum * momentum + grad
var -= lr * accum
"""
tf.@op function resource_sparse_apply_momentum(v7493, v7494, v7495, v7496, v7497, v7498; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing, use_nesterov=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceSparseApplyMomentum") 
                    begin  
                        begin  
                            v7493 = convert(TensorFlow.Tensor{Any}, v7493) 
                            begin  
                            end
                        end
                        begin  
                            v7494 = convert(TensorFlow.Tensor{Any}, v7494) 
                            begin  
                            end
                        end
                        begin  
                            v7495 = convert(TensorFlow.Tensor{Any}, v7495) 
                            begin  
                            end
                        end
                        begin  
                            v7496 = convert(TensorFlow.Tensor{Any}, v7496) 
                            begin  
                            end
                        end
                        begin  
                            v7497 = convert(TensorFlow.Tensor{Any}, v7497) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7498 = convert(TensorFlow.Tensor{Any}, v7498) 
                            begin  
                            end
                        end
                        begin  
                            (v7495, v7496, v7498) = tf.tf_promote(v7495, v7496, v7498)
                        end
                        begin  
                            (v7497,) = tf.tf_promote(v7497)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7493)
                        end
                        begin  
                            tf.add_input(desc, v7494)
                        end
                        begin  
                            tf.add_input(desc, v7495)
                        end
                        begin  
                            tf.add_input(desc, v7496)
                        end
                        begin  
                            tf.add_input(desc, v7497)
                        end
                        begin  
                            tf.add_input(desc, v7498)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                        begin  
                            if use_nesterov !== nothing 
                                desc["use_nesterov"] = Base.Bool(use_nesterov)
                            end
                        end
                    end
                end), name, "ResourceSparseApplyMomentum") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     save_slices(filename, tensor_names, shapes_and_slices, data)

Saves input tensors slices to disk.

This is like `Save` except that tensors can be listed in the saved file as being
a slice of a larger tensor.  `shapes_and_slices` specifies the shape of the
larger tensor and the slice that this tensor covers. `shapes_and_slices` must
have as many elements as `tensor_names`.

Elements of the `shapes_and_slices` input must either be:

*  The empty string, in which case the corresponding tensor is
   saved normally.
*  A string of the form `dim0 dim1 ... dimN-1 slice-spec` where the
   `dimI` are the dimensions of the larger tensor and `slice-spec`
   specifies what part is covered by the tensor to save.

`slice-spec` itself is a `:`-separated list: `slice0:slice1:...:sliceN-1`
where each `sliceI` is either:

*  The string `-` meaning that the slice covers all indices of this dimension
*  `start,length` where `start` and `length` are integers.  In that
   case the slice covers `length` indices starting at `start`.

See also `Save`.
"""
tf.@op function save_slices(v7499, v7500, v7501, v7502; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SaveSlices") 
                    begin  
                        begin  
                            v7499 = convert(TensorFlow.Tensor{Any}, v7499) 
                            begin  
                            end
                        end
                        begin  
                            v7500 = convert(TensorFlow.Tensor{Any}, v7500) 
                            begin  
                            end
                        end
                        begin  
                            v7501 = convert(TensorFlow.Tensor{Any}, v7501) 
                            begin  
                            end
                        end
                        begin  
                            v7502 = convert.(TensorFlow.Tensor{Any}, v7502) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7499)
                        end
                        begin  
                            tf.add_input(desc, v7500)
                        end
                        begin  
                            tf.add_input(desc, v7501)
                        end
                        begin  
                            tf.add_input(desc, v7502)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity.T
                            end
                        end
                    end
                end), name, "SaveSlices") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     unpack(value; axis=0)

Unpacks a given dimension of a rank-`R` tensor into `num` rank-`(R-1)` tensors.

Unpacks `num` tensors from `value` by chipping it along the `axis` dimension.
For example, given a tensor of shape `(A, B, C, D)`;

If `axis == 0` then the i'th tensor in `output` is the slice `value[i, :, :, :]`
  and each tensor in `output` will have shape `(B, C, D)`. (Note that the
  dimension unpacked along is gone, unlike `split`).

If `axis == 1` then the i'th tensor in `output` is the slice `value[:, i, :, :]`
  and each tensor in `output` will have shape `(A, C, D)`.
Etc.

This is the opposite of `pack`.
"""
tf.@op function unpack(v7503; name=nothing, num=nothing, T=nothing, axis=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Unpack") 
                    begin  
                        begin  
                            v7503 = convert(TensorFlow.Tensor{Any}, v7503) 
                            begin  
                            end
                        end
                        begin  
                            (v7503,) = tf.tf_promote(v7503)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7503)
                        end
                    end 
                    begin  
                        begin  
                            if num !== nothing 
                                desc["num"] = Base.Int(num)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if axis !== nothing 
                                desc["axis"] = Base.Int(axis)
                            end
                        end
                    end
                end), name, "Unpack") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     host_cast(x)

Cast x of type SrcT to y of DstT.

_HostCast requires its input and produces its output in host memory.
"""
tf.@op function host_cast(v7504; name=nothing, SrcT=nothing, DstT=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("_HostCast") 
                    begin  
                        begin  
                            v7504 = convert(TensorFlow.Tensor{Any}, v7504) 
                            begin  
                            end
                        end
                        begin  
                            (v7504,) = tf.tf_promote(v7504)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7504)
                        end
                    end 
                    begin  
                        begin  
                            if SrcT !== nothing 
                                desc["SrcT"] = Base.identity(SrcT)
                            end
                        end
                        begin  
                            if DstT !== nothing 
                                desc["DstT"] = Base.identity(DstT)
                            end
                        end
                    end
                end), name, "_HostCast") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tensor_array_write(handle, index, value, flow_in)




"""
tf.@op function tensor_array_write(v7505, v7506, v7507, v7508; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArrayWrite") 
                    begin  
                        begin  
                            v7505 = convert(TensorFlow.Tensor{Any}, v7505) 
                            begin  
                            end
                        end
                        begin  
                            v7506 = convert(TensorFlow.Tensor{Any}, v7506) 
                            begin  
                            end
                        end
                        begin  
                            v7507 = convert(TensorFlow.Tensor{Any}, v7507) 
                            begin  
                            end
                        end
                        begin  
                            v7508 = convert(TensorFlow.Tensor{Any}, v7508) 
                            begin  
                            end
                        end
                        begin  
                            (v7507,) = tf.tf_promote(v7507)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7505)
                        end
                        begin  
                            tf.add_input(desc, v7506)
                        end
                        begin  
                            tf.add_input(desc, v7507)
                        end
                        begin  
                            tf.add_input(desc, v7508)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TensorArrayWrite") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tfr_reader(; container=, shared_name=, compression_type=)

A Reader that outputs the records from a TensorFlow Records file.


"""
tf.@op function tfr_reader(; name=nothing, container=nothing, shared_name=nothing, compression_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TFRecordReader") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                        begin  
                            if compression_type !== nothing 
                                desc["compression_type"] = Base.String(compression_type)
                            end
                        end
                    end
                end), name, "TFRecordReader") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fill(dims, value)

Creates a tensor filled with a scalar value.

This operation creates a tensor of shape `dims` and fills it with `value`.

For example:

```prettyprint
# Output tensor has shape [2, 3].
fill([2, 3], 9) ==> [[9, 9, 9]
                     [9, 9, 9]]
```
"""
tf.@op function fill(v7509, v7510; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Fill") 
                    begin  
                        begin  
                            v7509 = convert(TensorFlow.Tensor{Any}, v7509) 
                            begin  
                            end
                        end
                        begin  
                            v7510 = convert(TensorFlow.Tensor{Any}, v7510) 
                            begin  
                            end
                        end
                        begin  
                            (v7510,) = tf.tf_promote(v7510)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7509)
                        end
                        begin  
                            tf.add_input(desc, v7510)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Fill") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     is_finite(x)

Returns which elements of x are finite.

@compatibility(numpy)
Equivalent to np.isfinite
@end_compatibility
"""
tf.@op function is_finite(v7511; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("IsFinite") 
                    begin  
                        begin  
                            v7511 = convert(TensorFlow.Tensor{Any}, v7511) 
                            begin  
                            end
                        end
                        begin  
                            (v7511,) = tf.tf_promote(v7511)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7511)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "IsFinite") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_add(ref, indices, updates; use_locking=false)

Adds sparse updates to a variable reference.

This operation computes

    # Scalar indices
    ref[indices, ...] += updates[...]

    # Vector indices (for each i)
    ref[indices[i], ...] += updates[i, ...]

    # High rank indices (for each i, ..., j)
    ref[indices[i, ..., j], ...] += updates[i, ..., j, ...]

This operation outputs `ref` after the update is done.
This makes it easier to chain operations that need to use the reset value.

Duplicate entries are handled correctly: if multiple `indices` reference
the same location, their contributions add.

Requires `updates.shape = indices.shape + ref.shape[1:]`.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/ScatterAdd.png" alt>
</div>
"""
tf.@op function scatter_add(v7512, v7513, v7514; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ScatterAdd") 
                    begin  
                        begin  
                            v7512 = convert(TensorFlow.Tensor{Any}, v7512) 
                            begin  
                            end
                        end
                        begin  
                            v7513 = convert(TensorFlow.Tensor{Any}, v7513) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7514 = convert(TensorFlow.Tensor{Any}, v7514) 
                            begin  
                            end
                        end
                        begin  
                            (v7512, v7514) = tf.tf_promote(v7512, v7514)
                        end
                        begin  
                            (v7513,) = tf.tf_promote(v7513)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7512)
                        end
                        begin  
                            tf.add_input(desc, v7513)
                        end
                        begin  
                            tf.add_input(desc, v7514)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ScatterAdd") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     strided_slice_assign(ref, begin, end, strides, value; begin_mask=0, end_mask=0, ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0)

Assign `value` to the sliced l-value reference of `ref`.

The values of `value` are assigned to the positions in the variable
`ref` that are selected by the slice parameters. The slice parameters
`begin, `end`, `strides`, etc. work exactly as in `StridedSlice`.

NOTE this op currently does not support broadcasting and so `value`'s
shape must be exactly the shape produced by the slice of `ref`.
"""
tf.@op function strided_slice_assign(v7515, v7516, v7517, v7518, v7519; name=nothing, T=nothing, Index=nothing, begin_mask=nothing, end_mask=nothing, ellipsis_mask=nothing, new_axis_mask=nothing, shrink_axis_mask=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StridedSliceAssign") 
                    begin  
                        begin  
                            v7515 = convert(TensorFlow.Tensor{Any}, v7515) 
                            begin  
                            end
                        end
                        begin  
                            v7516 = convert(TensorFlow.Tensor{Any}, v7516) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7517 = convert(TensorFlow.Tensor{Any}, v7517) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7518 = convert(TensorFlow.Tensor{Any}, v7518) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7519 = convert(TensorFlow.Tensor{Any}, v7519) 
                            begin  
                            end
                        end
                        begin  
                            (v7515, v7519) = tf.tf_promote(v7515, v7519)
                        end
                        begin  
                            (v7516, v7517, v7518) = tf.tf_promote(v7516, v7517, v7518)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7515)
                        end
                        begin  
                            tf.add_input(desc, v7516)
                        end
                        begin  
                            tf.add_input(desc, v7517)
                        end
                        begin  
                            tf.add_input(desc, v7518)
                        end
                        begin  
                            tf.add_input(desc, v7519)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Index !== nothing 
                                desc["Index"] = Base.identity(Index)
                            end
                        end
                        begin  
                            if begin_mask !== nothing 
                                desc["begin_mask"] = Base.Int(begin_mask)
                            end
                        end
                        begin  
                            if end_mask !== nothing 
                                desc["end_mask"] = Base.Int(end_mask)
                            end
                        end
                        begin  
                            if ellipsis_mask !== nothing 
                                desc["ellipsis_mask"] = Base.Int(ellipsis_mask)
                            end
                        end
                        begin  
                            if new_axis_mask !== nothing 
                                desc["new_axis_mask"] = Base.Int(new_axis_mask)
                            end
                        end
                        begin  
                            if shrink_axis_mask !== nothing 
                                desc["shrink_axis_mask"] = Base.Int(shrink_axis_mask)
                            end
                        end
                    end
                end), name, "StridedSliceAssign") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     conj(input; T=Complex{Float32})

Returns the complex conjugate of a complex number.

Given a tensor `input` of complex numbers, this operation returns a tensor of
complex numbers that are the complex conjugate of each element in `input`. The
complex numbers in `input` must be of the form \\(a + bj\\), where *a* is the
real part and *b* is the imaginary part.

The complex conjugate returned by this operation is of the form \\(a - bj\\).

For example:

```
# tensor 'input' is [-2.25 + 4.75j, 3.25 + 5.75j]
tf.conj(input) ==> [-2.25 - 4.75j, 3.25 - 5.75j]
```
"""
tf.@op function conj(v7520; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Conj") 
                    begin  
                        begin  
                            v7520 = convert(TensorFlow.Tensor{Complex{Float32}}, v7520) 
                            begin  
                            end
                        end
                        begin  
                            (v7520,) = tf.tf_promote(v7520)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7520)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Conj") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     softmax(logits)

Computes softmax activations.

For each batch `i` and class `j` we have

    softmax[i, j] = exp(logits[i, j]) / sum_j(exp(logits[i, j]))
"""
tf.@op function softmax(v7521; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Softmax") 
                    begin  
                        begin  
                            v7521 = convert(TensorFlow.Tensor{Any}, v7521) 
                            begin  
                            end
                        end
                        begin  
                            (v7521,) = tf.tf_promote(v7521)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7521)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Softmax") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     rfft_3d(input, fft_length)

Compute the 3-dimensional discrete Fourier Transform of a real-valued signal

over the inner-most 3 dimensions of `input`.

Since the DFT of a real signal is Hermitian-symmetric, `RFFT3D` only returns the
`fft_length / 2 + 1` unique components of the FFT for the inner-most dimension
of `output`: the zero-frequency term, followed by the `fft_length / 2`
positive-frequency terms.
"""
tf.@op function rfft_3d(v7522, v7523; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RFFT3D") 
                    begin  
                        begin  
                            v7522 = convert(TensorFlow.Tensor{Any}, v7522) 
                            begin  
                            end
                        end
                        begin  
                            v7523 = convert(TensorFlow.Tensor{Any}, v7523) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7522)
                        end
                        begin  
                            tf.add_input(desc, v7523)
                        end
                    end 
                    begin  
                    end
                end), name, "RFFT3D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resize_bicubic(images, size; align_corners=false)

Resize `images` to `size` using bicubic interpolation.

Input images can be of different types but output images are always float.
"""
tf.@op function resize_bicubic(v7524, v7525; name=nothing, T=nothing, align_corners=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResizeBicubic") 
                    begin  
                        begin  
                            v7524 = convert(TensorFlow.Tensor{Any}, v7524) 
                            begin  
                            end
                        end
                        begin  
                            v7525 = convert(TensorFlow.Tensor{Any}, v7525) 
                            begin  
                            end
                        end
                        begin  
                            (v7524,) = tf.tf_promote(v7524)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7524)
                        end
                        begin  
                            tf.add_input(desc, v7525)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if align_corners !== nothing 
                                desc["align_corners"] = Base.Bool(align_corners)
                            end
                        end
                    end
                end), name, "ResizeBicubic") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     take_many_sparse_from_tensors_map(sparse_handles; container=, shared_name=)

Read `SparseTensors` from a `SparseTensorsMap` and concatenate them.

The input `sparse_handles` must be an `int64` matrix of shape `[N, 1]` where
`N` is the minibatch size and the rows correspond to the output handles of
`AddSparseToTensorsMap` or `AddManySparseToTensorsMap`.  The ranks of the
original `SparseTensor` objects that went into the given input ops must all
match.  When the final `SparseTensor` is created, it has rank one
higher than the ranks of the incoming `SparseTensor` objects
(they have been concatenated along a new row dimension on the left).

The output `SparseTensor` object's shape values for all dimensions but the
first are the max across the input `SparseTensor` objects' shape values
for the corresponding dimensions.  Its first shape value is `N`, the minibatch
size.

The input `SparseTensor` objects' indices are assumed ordered in
standard lexicographic order.  If this is not the case, after this
step run `SparseReorder` to restore index ordering.

For example, if the handles represent an input, which is a `[2, 3]` matrix
representing two original `SparseTensor` objects:

```
    index = [ 0]
            [10]
            [20]
    values = [1, 2, 3]
    shape = [50]
```

and

```
    index = [ 2]
            [10]
    values = [4, 5]
    shape = [30]
```

then the final `SparseTensor` will be:

```
    index = [0  0]
            [0 10]
            [0 20]
            [1  2]
            [1 10]
    values = [1, 2, 3, 4, 5]
    shape = [2 50]
```
"""
tf.@op function take_many_sparse_from_tensors_map(v7526; name=nothing, dtype=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TakeManySparseFromTensorsMap") 
                    begin  
                        begin  
                            v7526 = convert(TensorFlow.Tensor{Any}, v7526) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7526)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "TakeManySparseFromTensorsMap") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     sparse_reduce_sum_sparse(input_indices, input_values, input_shape, reduction_axes; keep_dims=false)

Computes the sum of elements across dimensions of a SparseTensor.

This Op takes a SparseTensor and is the sparse counterpart to
`tf.reduce_sum()`.  In contrast to SparseReduceSum, this Op returns a
SparseTensor.

Reduces `sp_input` along the dimensions given in `reduction_axes`.  Unless
`keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
`reduction_axes`. If `keep_dims` is true, the reduced dimensions are retained
with length 1.

If `reduction_axes` has no entries, all dimensions are reduced, and a tensor
with a single element is returned.  Additionally, the axes can be negative,
which are interpreted according to the indexing rules in Python.
"""
tf.@op function sparse_reduce_sum_sparse(v7527, v7528, v7529, v7530; name=nothing, keep_dims=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseReduceSumSparse") 
                    begin  
                        begin  
                            v7527 = convert(TensorFlow.Tensor{Any}, v7527) 
                            begin  
                            end
                        end
                        begin  
                            v7528 = convert(TensorFlow.Tensor{Any}, v7528) 
                            begin  
                            end
                        end
                        begin  
                            v7529 = convert(TensorFlow.Tensor{Any}, v7529) 
                            begin  
                            end
                        end
                        begin  
                            v7530 = convert(TensorFlow.Tensor{Any}, v7530) 
                            begin  
                            end
                        end
                        begin  
                            (v7528,) = tf.tf_promote(v7528)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7527)
                        end
                        begin  
                            tf.add_input(desc, v7528)
                        end
                        begin  
                            tf.add_input(desc, v7529)
                        end
                        begin  
                            tf.add_input(desc, v7530)
                        end
                    end 
                    begin  
                        begin  
                            if keep_dims !== nothing 
                                desc["keep_dims"] = Base.Bool(keep_dims)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseReduceSumSparse") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     batch_matrix_diag_part(input)




"""
tf.@op function batch_matrix_diag_part(v7531; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchMatrixDiagPart") 
                    begin  
                        begin  
                            v7531 = convert(TensorFlow.Tensor{Any}, v7531) 
                            begin  
                            end
                        end
                        begin  
                            (v7531,) = tf.tf_promote(v7531)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7531)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchMatrixDiagPart") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     stack_push(handle, elem; swap_memory=false)

Push an element onto the stack.


"""
tf.@op function stack_push(v7532, v7533; name=nothing, T=nothing, swap_memory=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StackPush") 
                    begin  
                        begin  
                            v7532 = convert(TensorFlow.Tensor{Any}, v7532) 
                            begin  
                            end
                        end
                        begin  
                            v7533 = convert(TensorFlow.Tensor{Any}, v7533) 
                            begin  
                            end
                        end
                        begin  
                            (v7533,) = tf.tf_promote(v7533)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7532)
                        end
                        begin  
                            tf.add_input(desc, v7533)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if swap_memory !== nothing 
                                desc["swap_memory"] = Base.Bool(swap_memory)
                            end
                        end
                    end
                end), name, "StackPush") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     placeholder_v2()

A placeholder op for a value that will be fed into the computation.

N.B. This operation will fail with an error if it is executed. It is
intended as a way to represent a value that will always be fed, and to
provide attrs that enable the fed value to be checked at runtime.
"""
tf.@op function placeholder_v2(; name=nothing, dtype=nothing, shape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("PlaceholderV2") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if shape !== nothing 
                                desc["shape"] = Base.identity(shape)
                            end
                        end
                    end
                end), name, "PlaceholderV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     queue_dequeue_v2(handle; timeout_ms=-1)

Dequeues a tuple of one or more tensors from the given queue.

This operation has k outputs, where k is the number of components
in the tuples stored in the given queue, and output i is the ith
component of the dequeued tuple.

N.B. If the queue is empty, this operation will block until an element
has been dequeued (or 'timeout_ms' elapses, if specified).
"""
tf.@op function queue_dequeue_v2(v7534; name=nothing, component_types=nothing, timeout_ms=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueDequeueV2") 
                    begin  
                        begin  
                            v7534 = convert(TensorFlow.Tensor{Any}, v7534) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7534)
                        end
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if timeout_ms !== nothing 
                                desc["timeout_ms"] = Base.Int(timeout_ms)
                            end
                        end
                    end
                end), name, "QueueDequeueV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     transpose(x, perm; Tperm=Int32)

Shuffle dimensions of x according to a permutation.

The output `y` has the same rank as `x`. The shapes of `x` and `y` satisfy:
  `y.shape[i] == x.shape[perm[i]] for i in [0, 1, ..., rank(x) - 1]`
"""
tf.@op function transpose(v7535, v7536; name=nothing, T=nothing, Tperm=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Transpose") 
                    begin  
                        begin  
                            v7535 = convert(TensorFlow.Tensor{Any}, v7535) 
                            begin  
                            end
                        end
                        begin  
                            v7536 = convert(TensorFlow.Tensor{Int32}, v7536) 
                            begin  
                            end
                        end
                        begin  
                            (v7536,) = tf.tf_promote(v7536)
                        end
                        begin  
                            (v7535,) = tf.tf_promote(v7535)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7535)
                        end
                        begin  
                            tf.add_input(desc, v7536)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tperm !== nothing 
                                desc["Tperm"] = Base.identity(Tperm)
                            end
                        end
                    end
                end), name, "Transpose") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     decode_csv(records, record_defaults; field_delim=,)

Convert CSV records to tensors. Each column maps to one tensor.

RFC 4180 format is expected for the CSV records.
(https://tools.ietf.org/html/rfc4180)
Note that we allow leading and trailing spaces with int or float field.
"""
tf.@op function decode_csv(v7537, v7538; name=nothing, OUT_TYPE=nothing, field_delim=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DecodeCSV") 
                    begin  
                        begin  
                            v7537 = convert(TensorFlow.Tensor{Any}, v7537) 
                            begin  
                            end
                        end
                        begin  
                            v7538 = convert.(TensorFlow.Tensor{Any}, v7538) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7537)
                        end
                        begin  
                            tf.add_input(desc, v7538)
                        end
                    end 
                    begin  
                        begin  
                            if OUT_TYPE !== nothing 
                                desc["OUT_TYPE"] = Base.identity.OUT_TYPE
                            end
                        end
                        begin  
                            if field_delim !== nothing 
                                desc["field_delim"] = Base.String(field_delim)
                            end
                        end
                    end
                end), name, "DecodeCSV") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     ifft(input)

Compute the inverse 1-dimensional discrete Fourier Transform over the inner-most

dimension of `input`.
"""
tf.@op function ifft(v7539; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("IFFT") 
                    begin  
                        begin  
                            v7539 = convert(TensorFlow.Tensor{Any}, v7539) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7539)
                        end
                    end 
                    begin  
                    end
                end), name, "IFFT") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     lookup_table_find(table_handle, keys, default_value)

Looks up keys in a table, outputs the corresponding values.

The tensor `keys` must of the same type as the keys of the table.
The output `values` is of the type of the table values.

The scalar `default_value` is the value output for keys not present in the
table. It must also be of the same type as the table values.
"""
tf.@op function lookup_table_find(v7540, v7541, v7542; name=nothing, Tin=nothing, Tout=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LookupTableFind") 
                    begin  
                        begin  
                            v7540 = convert(TensorFlow.Tensor{Any}, v7540) 
                            begin  
                            end
                        end
                        begin  
                            v7541 = convert(TensorFlow.Tensor{Any}, v7541) 
                            begin  
                            end
                        end
                        begin  
                            v7542 = convert(TensorFlow.Tensor{Any}, v7542) 
                            begin  
                            end
                        end
                        begin  
                            (v7541,) = tf.tf_promote(v7541)
                        end
                        begin  
                            (v7542,) = tf.tf_promote(v7542)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7540)
                        end
                        begin  
                            tf.add_input(desc, v7541)
                        end
                        begin  
                            tf.add_input(desc, v7542)
                        end
                    end 
                    begin  
                        begin  
                            if Tin !== nothing 
                                desc["Tin"] = Base.identity(Tin)
                            end
                        end
                        begin  
                            if Tout !== nothing 
                                desc["Tout"] = Base.identity(Tout)
                            end
                        end
                    end
                end), name, "LookupTableFind") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_add(a_indices, a_values, a_shape, b_indices, b_values, b_shape, thresh)

Adds two `SparseTensor` objects to produce another `SparseTensor`.

The input `SparseTensor` objects' indices are assumed ordered in standard
lexicographic order.  If this is not the case, before this step run
`SparseReorder` to restore index ordering.

By default, if two values sum to zero at some index, the output `SparseTensor`
would still include that particular location in its index, storing a zero in the
corresponding value slot.  To override this, callers can specify `thresh`,
indicating that if the sum has a magnitude strictly smaller than `thresh`, its
corresponding value and index would then not be included.  In particular,
`thresh == 0` (default) means everything is kept and actual thresholding happens
only for a positive value.

In the following shapes, `nnz` is the count after taking `thresh` into account.
"""
tf.@op function sparse_add(v7543, v7544, v7545, v7546, v7547, v7548, v7549; name=nothing, T=nothing, Treal=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseAdd") 
                    begin  
                        begin  
                            v7543 = convert(TensorFlow.Tensor{Any}, v7543) 
                            begin  
                            end
                        end
                        begin  
                            v7544 = convert(TensorFlow.Tensor{Any}, v7544) 
                            begin  
                            end
                        end
                        begin  
                            v7545 = convert(TensorFlow.Tensor{Any}, v7545) 
                            begin  
                            end
                        end
                        begin  
                            v7546 = convert(TensorFlow.Tensor{Any}, v7546) 
                            begin  
                            end
                        end
                        begin  
                            v7547 = convert(TensorFlow.Tensor{Any}, v7547) 
                            begin  
                            end
                        end
                        begin  
                            v7548 = convert(TensorFlow.Tensor{Any}, v7548) 
                            begin  
                            end
                        end
                        begin  
                            v7549 = convert(TensorFlow.Tensor{Any}, v7549) 
                            begin  
                            end
                        end
                        begin  
                            (v7549,) = tf.tf_promote(v7549)
                        end
                        begin  
                            (v7544, v7547) = tf.tf_promote(v7544, v7547)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7543)
                        end
                        begin  
                            tf.add_input(desc, v7544)
                        end
                        begin  
                            tf.add_input(desc, v7545)
                        end
                        begin  
                            tf.add_input(desc, v7546)
                        end
                        begin  
                            tf.add_input(desc, v7547)
                        end
                        begin  
                            tf.add_input(desc, v7548)
                        end
                        begin  
                            tf.add_input(desc, v7549)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Treal !== nothing 
                                desc["Treal"] = Base.identity(Treal)
                            end
                        end
                    end
                end), name, "SparseAdd") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     quantized_relu_6(features, min_features, max_features; out_type=?)

Computes Quantized Rectified Linear 6: `min(max(features, 0), 6)`


"""
tf.@op function quantized_relu_6(v7550, v7551, v7552; name=nothing, Tinput=nothing, out_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedRelu6") 
                    begin  
                        begin  
                            v7550 = convert(TensorFlow.Tensor{Any}, v7550) 
                            begin  
                            end
                        end
                        begin  
                            v7551 = convert(TensorFlow.Tensor{Any}, v7551) 
                            begin  
                            end
                        end
                        begin  
                            v7552 = convert(TensorFlow.Tensor{Any}, v7552) 
                            begin  
                            end
                        end
                        begin  
                            (v7550,) = tf.tf_promote(v7550)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7550)
                        end
                        begin  
                            tf.add_input(desc, v7551)
                        end
                        begin  
                            tf.add_input(desc, v7552)
                        end
                    end 
                    begin  
                        begin  
                            if Tinput !== nothing 
                                desc["Tinput"] = Base.identity(Tinput)
                            end
                        end
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                    end
                end), name, "QuantizedRelu6") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     ctcg_decoder(inputs, sequence_length; merge_repeated=false)

Performs greedy decoding on the logits given in inputs.

A note about the attribute merge_repeated: if enabled, when
consecutive logits' maximum indices are the same, only the first of
these is emitted.  Labeling the blank '*', the sequence "A B B * B B"
becomes "A B B" if merge_repeated = True and "A B B B B" if
merge_repeated = False.

Regardless of the value of merge_repeated, if the maximum index of a given
time and batch corresponds to the blank, index `(num_classes - 1)`, no new
element is emitted.
"""
tf.@op function ctcg_decoder(v7553, v7554; name=nothing, merge_repeated=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("CTCGreedyDecoder") 
                    begin  
                        begin  
                            v7553 = convert(TensorFlow.Tensor{Any}, v7553) 
                            begin  
                            end
                        end
                        begin  
                            v7554 = convert(TensorFlow.Tensor{Any}, v7554) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7553)
                        end
                        begin  
                            tf.add_input(desc, v7554)
                        end
                    end 
                    begin  
                        begin  
                            if merge_repeated !== nothing 
                                desc["merge_repeated"] = Base.Bool(merge_repeated)
                            end
                        end
                    end
                end), name, "CTCGreedyDecoder") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3), tf.Tensor(op, 4))
        end
    end

"""
     sparse_sparse_maximum(a_indices, a_values, a_shape, b_indices, b_values, b_shape)

Returns the element-wise max of two SparseTensors.

Assumes the two SparseTensors have the same shape, i.e., no broadcasting.
"""
tf.@op function sparse_sparse_maximum(v7555, v7556, v7557, v7558, v7559, v7560; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseSparseMaximum") 
                    begin  
                        begin  
                            v7555 = convert(TensorFlow.Tensor{Any}, v7555) 
                            begin  
                            end
                        end
                        begin  
                            v7556 = convert(TensorFlow.Tensor{Any}, v7556) 
                            begin  
                            end
                        end
                        begin  
                            v7557 = convert(TensorFlow.Tensor{Any}, v7557) 
                            begin  
                            end
                        end
                        begin  
                            v7558 = convert(TensorFlow.Tensor{Any}, v7558) 
                            begin  
                            end
                        end
                        begin  
                            v7559 = convert(TensorFlow.Tensor{Any}, v7559) 
                            begin  
                            end
                        end
                        begin  
                            v7560 = convert(TensorFlow.Tensor{Any}, v7560) 
                            begin  
                            end
                        end
                        begin  
                            (v7556, v7559) = tf.tf_promote(v7556, v7559)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7555)
                        end
                        begin  
                            tf.add_input(desc, v7556)
                        end
                        begin  
                            tf.add_input(desc, v7557)
                        end
                        begin  
                            tf.add_input(desc, v7558)
                        end
                        begin  
                            tf.add_input(desc, v7559)
                        end
                        begin  
                            tf.add_input(desc, v7560)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseSparseMaximum") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     immutable_const_()

Returns immutable tensor from memory region.

The current implementation memmaps the tensor from a file.
"""
tf.@op function immutable_const_(; name=nothing, dtype=nothing, shape=nothing, memory_region_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ImmutableConst") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if shape !== nothing 
                                desc["shape"] = Base.identity(shape)
                            end
                        end
                        begin  
                            if memory_region_name !== nothing 
                                desc["memory_region_name"] = Base.String(memory_region_name)
                            end
                        end
                    end
                end), name, "ImmutableConst") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_norm_with_global_normalization(t, m, v, beta, gamma)

Batch normalization.

This op is deprecated. Prefer `tf.nn.batch_normalization`.
"""
tf.@op function batch_norm_with_global_normalization(v7561, v7562, v7563, v7564, v7565; name=nothing, T=nothing, variance_epsilon=nothing, scale_after_normalization=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchNormWithGlobalNormalization") 
                    begin  
                        begin  
                            v7561 = convert(TensorFlow.Tensor{Any}, v7561) 
                            begin  
                            end
                        end
                        begin  
                            v7562 = convert(TensorFlow.Tensor{Any}, v7562) 
                            begin  
                            end
                        end
                        begin  
                            v7563 = convert(TensorFlow.Tensor{Any}, v7563) 
                            begin  
                            end
                        end
                        begin  
                            v7564 = convert(TensorFlow.Tensor{Any}, v7564) 
                            begin  
                            end
                        end
                        begin  
                            v7565 = convert(TensorFlow.Tensor{Any}, v7565) 
                            begin  
                            end
                        end
                        begin  
                            (v7561, v7562, v7563, v7564, v7565) = tf.tf_promote(v7561, v7562, v7563, v7564, v7565)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7561)
                        end
                        begin  
                            tf.add_input(desc, v7562)
                        end
                        begin  
                            tf.add_input(desc, v7563)
                        end
                        begin  
                            tf.add_input(desc, v7564)
                        end
                        begin  
                            tf.add_input(desc, v7565)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if variance_epsilon !== nothing 
                                desc["variance_epsilon"] = Base.identity(variance_epsilon)
                            end
                        end
                        begin  
                            if scale_after_normalization !== nothing 
                                desc["scale_after_normalization"] = Base.Bool(scale_after_normalization)
                            end
                        end
                    end
                end), name, "BatchNormWithGlobalNormalization") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     cholesky(input)

Computes the Cholesky decomposition of one or more square matrices.

The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions
form square matrices, with the same constraints as the single matrix Cholesky
decomposition above. The output is a tensor of the same shape as the input
containing the Cholesky decompositions for all input submatrices `[..., :, :]`.
"""
tf.@op function cholesky(v7566; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Cholesky") 
                    begin  
                        begin  
                            v7566 = convert(TensorFlow.Tensor{Any}, v7566) 
                            begin  
                            end
                        end
                        begin  
                            (v7566,) = tf.tf_promote(v7566)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7566)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Cholesky") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     avg_pool_3d_grad(orig_input_shape, grad)

Computes gradients of average pooling function.


"""
tf.@op function avg_pool_3d_grad(v7567, v7568; name=nothing, ksize=nothing, strides=nothing, padding=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AvgPool3DGrad") 
                    begin  
                        begin  
                            v7567 = convert(TensorFlow.Tensor{Any}, v7567) 
                            begin  
                            end
                        end
                        begin  
                            v7568 = convert(TensorFlow.Tensor{Any}, v7568) 
                            begin  
                            end
                        end
                        begin  
                            (v7568,) = tf.tf_promote(v7568)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7567)
                        end
                        begin  
                            tf.add_input(desc, v7568)
                        end
                    end 
                    begin  
                        begin  
                            if ksize !== nothing 
                                desc["ksize"] = Base.identity.ksize
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "AvgPool3DGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_apply_centered_rmsp(var, mg, ms, mom, lr, rho, momentum, epsilon, grad; use_locking=false)

Update '*var' according to the centered RMSProp algorithm.

The centered RMSProp algorithm uses an estimate of the centered second moment
(i.e., the variance) for normalization, as opposed to regular RMSProp, which
uses the (uncentered) second moment. This often helps with training, but is
slightly more expensive in terms of computation and memory.

Note that in dense implementation of this algorithm, mg, ms, and mom will
update even if the grad is zero, but in this sparse implementation, mg, ms,
and mom will not update in iterations during which the grad is zero.

mean_square = decay * mean_square + (1-decay) * gradient ** 2
mean_grad = decay * mean_grad + (1-decay) * gradient

Delta = learning_rate * gradient / sqrt(mean_square + epsilon - mean_grad ** 2)

mg <- rho * mg_{t-1} + (1-rho) * grad
ms <- rho * ms_{t-1} + (1-rho) * grad * grad
mom <- momentum * mom_{t-1} + lr * grad / sqrt(ms - mg * mg + epsilon)
var <- var - mom
"""
tf.@op function resource_apply_centered_rmsp(v7569, v7570, v7571, v7572, v7573, v7574, v7575, v7576, v7577; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceApplyCenteredRMSProp") 
                    begin  
                        begin  
                            v7569 = convert(TensorFlow.Tensor{Any}, v7569) 
                            begin  
                            end
                        end
                        begin  
                            v7570 = convert(TensorFlow.Tensor{Any}, v7570) 
                            begin  
                            end
                        end
                        begin  
                            v7571 = convert(TensorFlow.Tensor{Any}, v7571) 
                            begin  
                            end
                        end
                        begin  
                            v7572 = convert(TensorFlow.Tensor{Any}, v7572) 
                            begin  
                            end
                        end
                        begin  
                            v7573 = convert(TensorFlow.Tensor{Any}, v7573) 
                            begin  
                            end
                        end
                        begin  
                            v7574 = convert(TensorFlow.Tensor{Any}, v7574) 
                            begin  
                            end
                        end
                        begin  
                            v7575 = convert(TensorFlow.Tensor{Any}, v7575) 
                            begin  
                            end
                        end
                        begin  
                            v7576 = convert(TensorFlow.Tensor{Any}, v7576) 
                            begin  
                            end
                        end
                        begin  
                            v7577 = convert(TensorFlow.Tensor{Any}, v7577) 
                            begin  
                            end
                        end
                        begin  
                            (v7573, v7574, v7575, v7576, v7577) = tf.tf_promote(v7573, v7574, v7575, v7576, v7577)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7569)
                        end
                        begin  
                            tf.add_input(desc, v7570)
                        end
                        begin  
                            tf.add_input(desc, v7571)
                        end
                        begin  
                            tf.add_input(desc, v7572)
                        end
                        begin  
                            tf.add_input(desc, v7573)
                        end
                        begin  
                            tf.add_input(desc, v7574)
                        end
                        begin  
                            tf.add_input(desc, v7575)
                        end
                        begin  
                            tf.add_input(desc, v7576)
                        end
                        begin  
                            tf.add_input(desc, v7577)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceApplyCenteredRMSProp") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     parameterized_truncated_normal(shape, means, stdevs, minvals, maxvals; seed=0, seed2=0)

Outputs random values from a normal distribution. The parameters may each be a

scalar which applies to the entire output, or a vector of length shape[0] which
stores the parameters for each batch.
"""
tf.@op function parameterized_truncated_normal(v7578, v7579, v7580, v7581, v7582; name=nothing, seed=nothing, seed2=nothing, dtype=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ParameterizedTruncatedNormal") 
                    begin  
                        begin  
                            v7578 = convert(TensorFlow.Tensor{Any}, v7578) 
                            begin  
                            end
                        end
                        begin  
                            v7579 = convert(TensorFlow.Tensor{Any}, v7579) 
                            begin  
                            end
                        end
                        begin  
                            v7580 = convert(TensorFlow.Tensor{Any}, v7580) 
                            begin  
                            end
                        end
                        begin  
                            v7581 = convert(TensorFlow.Tensor{Any}, v7581) 
                            begin  
                            end
                        end
                        begin  
                            v7582 = convert(TensorFlow.Tensor{Any}, v7582) 
                            begin  
                            end
                        end
                        begin  
                            (v7579, v7580, v7581, v7582) = tf.tf_promote(v7579, v7580, v7581, v7582)
                        end
                        begin  
                            (v7578,) = tf.tf_promote(v7578)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7578)
                        end
                        begin  
                            tf.add_input(desc, v7579)
                        end
                        begin  
                            tf.add_input(desc, v7580)
                        end
                        begin  
                            tf.add_input(desc, v7581)
                        end
                        begin  
                            tf.add_input(desc, v7582)
                        end
                    end 
                    begin  
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "ParameterizedTruncatedNormal") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     greater_equal(x, y)

Returns the truth value of (x >= y) element-wise.

*NOTE*: `GreaterEqual` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function greater_equal(v7583, v7584; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("GreaterEqual") 
                    begin  
                        begin  
                            v7583 = convert(TensorFlow.Tensor{Any}, v7583) 
                            begin  
                            end
                        end
                        begin  
                            v7584 = convert(TensorFlow.Tensor{Any}, v7584) 
                            begin  
                            end
                        end
                        begin  
                            (v7583, v7584) = tf.tf_promote(v7583, v7584)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7583)
                        end
                        begin  
                            tf.add_input(desc, v7584)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "GreaterEqual") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     diag_part(input)

Returns the diagonal part of the tensor.

This operation returns a tensor with the `diagonal` part
of the `input`. The `diagonal` part is computed as follows:

Assume `input` has dimensions `[D1,..., Dk, D1,..., Dk]`, then the output is a
tensor of rank `k` with dimensions `[D1,..., Dk]` where:

`diagonal[i1,..., ik] = input[i1, ..., ik, i1,..., ik]`.

For example:

```prettyprint
# 'input' is [[1, 0, 0, 0]
              [0, 2, 0, 0]
              [0, 0, 3, 0]
              [0, 0, 0, 4]]

tf.diag_part(input) ==> [1, 2, 3, 4]
```
"""
tf.@op function diag_part(v7585; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DiagPart") 
                    begin  
                        begin  
                            v7585 = convert(TensorFlow.Tensor{Any}, v7585) 
                            begin  
                            end
                        end
                        begin  
                            (v7585,) = tf.tf_promote(v7585)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7585)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "DiagPart") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     placeholder_with_default(input)

A placeholder op that passes through `input` when its output is not fed.


"""
tf.@op function placeholder_with_default(v7586; name=nothing, dtype=nothing, shape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("PlaceholderWithDefault") 
                    begin  
                        begin  
                            v7586 = convert(TensorFlow.Tensor{Any}, v7586) 
                            begin  
                            end
                        end
                        begin  
                            (v7586,) = tf.tf_promote(v7586)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7586)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if shape !== nothing 
                                desc["shape"] = Base.identity(shape)
                            end
                        end
                    end
                end), name, "PlaceholderWithDefault") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_apply_adagrad(var, accum, lr, grad; use_locking=false)

Update '*var' according to the adagrad scheme.

accum += grad * grad
var -= lr * grad * (1 / sqrt(accum))
"""
tf.@op function resource_apply_adagrad(v7587, v7588, v7589, v7590; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceApplyAdagrad") 
                    begin  
                        begin  
                            v7587 = convert(TensorFlow.Tensor{Any}, v7587) 
                            begin  
                            end
                        end
                        begin  
                            v7588 = convert(TensorFlow.Tensor{Any}, v7588) 
                            begin  
                            end
                        end
                        begin  
                            v7589 = convert(TensorFlow.Tensor{Any}, v7589) 
                            begin  
                            end
                        end
                        begin  
                            v7590 = convert(TensorFlow.Tensor{Any}, v7590) 
                            begin  
                            end
                        end
                        begin  
                            (v7589, v7590) = tf.tf_promote(v7589, v7590)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7587)
                        end
                        begin  
                            tf.add_input(desc, v7588)
                        end
                        begin  
                            tf.add_input(desc, v7589)
                        end
                        begin  
                            tf.add_input(desc, v7590)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceApplyAdagrad") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     queue_dequeue(handle; timeout_ms=-1)

Dequeues a tuple of one or more tensors from the given queue.

This operation has k outputs, where k is the number of components
in the tuples stored in the given queue, and output i is the ith
component of the dequeued tuple.

N.B. If the queue is empty, this operation will block until an element
has been dequeued (or 'timeout_ms' elapses, if specified).
"""
tf.@op function queue_dequeue(v7591; name=nothing, component_types=nothing, timeout_ms=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QueueDequeue") 
                    begin  
                        begin  
                            v7591 = convert(TensorFlow.Tensor{Any}, v7591) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7591)
                        end
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if timeout_ms !== nothing 
                                desc["timeout_ms"] = Base.Int(timeout_ms)
                            end
                        end
                    end
                end), name, "QueueDequeue") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_tensor_dense_mat_mul(a_indices, a_values, a_shape, b; adjoint_a=false, adjoint_b=false)

Multiply SparseTensor (of rank 2) "A" by dense matrix "B".

No validity checking is performed on the indices of A.  However, the following
input format is recommended for optimal behavior:

if adjoint_a == false:
  A should be sorted in lexicographically increasing order.  Use SparseReorder
  if you're not sure.
if adjoint_a == true:
  A should be sorted in order of increasing dimension 1 (i.e., "column major"
  order instead of "row major" order).
"""
tf.@op function sparse_tensor_dense_mat_mul(v7592, v7593, v7594, v7595; name=nothing, T=nothing, adjoint_a=nothing, adjoint_b=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseTensorDenseMatMul") 
                    begin  
                        begin  
                            v7592 = convert(TensorFlow.Tensor{Any}, v7592) 
                            begin  
                            end
                        end
                        begin  
                            v7593 = convert(TensorFlow.Tensor{Any}, v7593) 
                            begin  
                            end
                        end
                        begin  
                            v7594 = convert(TensorFlow.Tensor{Any}, v7594) 
                            begin  
                            end
                        end
                        begin  
                            v7595 = convert(TensorFlow.Tensor{Any}, v7595) 
                            begin  
                            end
                        end
                        begin  
                            (v7593, v7595) = tf.tf_promote(v7593, v7595)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7592)
                        end
                        begin  
                            tf.add_input(desc, v7593)
                        end
                        begin  
                            tf.add_input(desc, v7594)
                        end
                        begin  
                            tf.add_input(desc, v7595)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if adjoint_a !== nothing 
                                desc["adjoint_a"] = Base.Bool(adjoint_a)
                            end
                        end
                        begin  
                            if adjoint_b !== nothing 
                                desc["adjoint_b"] = Base.Bool(adjoint_b)
                            end
                        end
                    end
                end), name, "SparseTensorDenseMatMul") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     equal(x, y)

Returns the truth value of (x == y) element-wise.

*NOTE*: `Equal` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function equal(v7596, v7597; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Equal") 
                    begin  
                        begin  
                            v7596 = convert(TensorFlow.Tensor{Any}, v7596) 
                            begin  
                            end
                        end
                        begin  
                            v7597 = convert(TensorFlow.Tensor{Any}, v7597) 
                            begin  
                            end
                        end
                        begin  
                            (v7596, v7597) = tf.tf_promote(v7596, v7597)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7596)
                        end
                        begin  
                            tf.add_input(desc, v7597)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Equal") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fractional_max_pool(value; pseudo_random=false, overlapping=false, deterministic=false, seed=0, seed2=0)

Performs fractional max pooling on the input.

Fractional max pooling is slightly different than regular max pooling.  In
regular max pooling, you downsize an input set by taking the maximum value of
smaller N x N subsections of the set (often 2x2), and try to reduce the set by
a factor of N, where N is an integer.  Fractional max pooling, as you might
expect from the word "fractional", means that the overall reduction ratio N
does not have to be an integer.

The sizes of the pooling regions are generated randomly but are fairly uniform.
For example, let's look at the height dimension, and the constraints on the
list of rows that will be pool boundaries.

First we define the following:

1.  input_row_length : the number of rows from the input set
2.  output_row_length : which will be smaller than the input
3.  alpha = input_row_length / output_row_length : our reduction ratio
4.  K = floor(alpha)
5.  row_pooling_sequence : this is the result list of pool boundary rows

Then, row_pooling_sequence should satisfy:

1.  a[0] = 0 : the first value of the sequence is 0
2.  a[end] = input_row_length : the last value of the sequence is the size
3.  K <= (a[i+1] - a[i]) <= K+1 : all intervals are K or K+1 size
4.  length(row_pooling_sequence) = output_row_length+1

For more details on fractional max pooling, see this paper:
[Benjamin Graham, Fractional Max-Pooling](http://arxiv.org/abs/1412.6071)
"""
tf.@op function fractional_max_pool(v7598; name=nothing, pooling_ratio=nothing, pseudo_random=nothing, overlapping=nothing, deterministic=nothing, seed=nothing, seed2=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FractionalMaxPool") 
                    begin  
                        begin  
                            v7598 = convert(TensorFlow.Tensor{Any}, v7598) 
                            begin  
                            end
                        end
                        begin  
                            (v7598,) = tf.tf_promote(v7598)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7598)
                        end
                    end 
                    begin  
                        begin  
                            if pooling_ratio !== nothing 
                                desc["pooling_ratio"] = Base.identity.pooling_ratio
                            end
                        end
                        begin  
                            if pseudo_random !== nothing 
                                desc["pseudo_random"] = Base.Bool(pseudo_random)
                            end
                        end
                        begin  
                            if overlapping !== nothing 
                                desc["overlapping"] = Base.Bool(overlapping)
                            end
                        end
                        begin  
                            if deterministic !== nothing 
                                desc["deterministic"] = Base.Bool(deterministic)
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "FractionalMaxPool") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     scatter_nd(indices, updates, shape)

Creates a new tensor by applying sparse `updates` to individual

values or slices within a zero tensor of the given `shape` tensor according to
indices.  This operator is the inverse of the [tf.gather_nd](#gather_nd)
operator which extracts values or slices from a given tensor.

TODO(simister): Add a link to Variable.__getitem__ documentation on slice
syntax.

`shape` is a `TensorShape` with rank `P` and `indices` is a `Tensor` of rank
`Q`.

`indices` must be integer tensor, containing indices into `shape`.
It must be shape `[d_0, ..., d_{Q-2}, K]` where `0 < K <= P`.

The innermost dimension of `indices` (with length `K`) corresponds to
indices into elements (if `K = P`) or slices (if `K < P`) along the `K`th
dimension of `shape`.

`updates` is Tensor of rank `Q-1+P-K` with shape:

```
[d_0, ..., d_{Q-2}, shape[K], ..., shape[P-1]].
```

The simplest form of scatter is to insert individual elements in a tensor by
index. For example, say we want to insert 4 scattered elements in a rank-1
tensor with 8 elements.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/ScatterNd1.png" alt>
</div>

In Python, this scatter operation would look like this:

    indices = tf.constant([[4], [3], [1], [7]])
    updates = tf.constant([9, 10, 11, 12])
    shape = tf.constant([8])
    scatter = tf.scatter_nd(indices, updates, shape)
    with tf.Session() as sess:
      print sess.run(scatter)

The resulting tensor would look like this:

    [0, 11, 0, 10, 9, 0, 0, 12]

We can also, insert entire slices of a higher rank tensor all at once. For
example, if we wanted to insert two slices in the first dimension of a
rank-3 tensor with two matrices of new values.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/ScatterNd2.png" alt>
</div>

In Python, this scatter operation would look like this:

    indices = tf.constant([[0], [2]])
    updates = tf.constant([[[5, 5, 5, 5], [6, 6, 6, 6],
                            [7, 7, 7, 7], [8, 8, 8, 8]],
                           [[5, 5, 5, 5], [6, 6, 6, 6],
                            [7, 7, 7, 7], [8, 8, 8, 8]]])
    shape = tf.constant([4, 4, 4])
    scatter = tf.scatter_nd(indices, updates, shape)
    with tf.Session() as sess:
      print sess.run(scatter)

The resulting tensor would look like this:

    [[[5, 5, 5, 5], [6, 6, 6, 6], [7, 7, 7, 7], [8, 8, 8, 8]],
     [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
     [[5, 5, 5, 5], [6, 6, 6, 6], [7, 7, 7, 7], [8, 8, 8, 8]],
     [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]
"""
tf.@op function scatter_nd(v7599, v7600, v7601; name=nothing, T=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ScatterNd") 
                    begin  
                        begin  
                            v7599 = convert(TensorFlow.Tensor{Any}, v7599) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7600 = convert(TensorFlow.Tensor{Any}, v7600) 
                            begin  
                            end
                        end
                        begin  
                            v7601 = convert(TensorFlow.Tensor{Any}, v7601) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7600,) = tf.tf_promote(v7600)
                        end
                        begin  
                            (v7599, v7601) = tf.tf_promote(v7599, v7601)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7599)
                        end
                        begin  
                            tf.add_input(desc, v7600)
                        end
                        begin  
                            tf.add_input(desc, v7601)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "ScatterNd") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     thread_unsafe_unigram_candidate_sampler(true_classes; seed=0, seed2=0)

Generates labels for candidate sampling with a learned unigram distribution.

See explanations of candidate sampling and the data formats at
go/candidate-sampling.

For each batch, this op picks a single set of sampled candidate labels.

The advantages of sampling candidates per-batch are simplicity and the
possibility of efficient dense matrix multiplication. The disadvantage is that
the sampled candidates must be chosen independently of the context and of the
true labels.
"""
tf.@op function thread_unsafe_unigram_candidate_sampler(v7602; name=nothing, num_true=nothing, num_sampled=nothing, unique=nothing, range_max=nothing, seed=nothing, seed2=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ThreadUnsafeUnigramCandidateSampler") 
                    begin  
                        begin  
                            v7602 = convert(TensorFlow.Tensor{Any}, v7602) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7602)
                        end
                    end 
                    begin  
                        begin  
                            if num_true !== nothing 
                                desc["num_true"] = Base.Int(num_true)
                            end
                        end
                        begin  
                            if num_sampled !== nothing 
                                desc["num_sampled"] = Base.Int(num_sampled)
                            end
                        end
                        begin  
                            if unique !== nothing 
                                desc["unique"] = Base.Bool(unique)
                            end
                        end
                        begin  
                            if range_max !== nothing 
                                desc["range_max"] = Base.Int(range_max)
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                    end
                end), name, "ThreadUnsafeUnigramCandidateSampler") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     batch_self_adjoint_eig(input)




"""
tf.@op function batch_self_adjoint_eig(v7603; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchSelfAdjointEig") 
                    begin  
                        begin  
                            v7603 = convert(TensorFlow.Tensor{Any}, v7603) 
                            begin  
                            end
                        end
                        begin  
                            (v7603,) = tf.tf_promote(v7603)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7603)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BatchSelfAdjointEig") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_softmax(sp_indices, sp_values, sp_shape)

Applies softmax to a batched N-D `SparseTensor`.

The inputs represent an N-D SparseTensor  with logical shape `[..., B, C]`
(where `N >= 2`), and with indices sorted in the canonical lexicographic order.

This op is equivalent to applying the normal `tf.nn.softmax()` to each innermost
logical submatrix with shape `[B, C]`, but with the catch that *the implicitly
zero elements do not participate*.  Specifically, the algorithm is equivalent
to the following:

  (1) Applies `tf.nn.softmax()` to a densified view of each innermost submatrix
      with shape `[B, C]`, along the size-C dimension;
  (2) Masks out the original implicitly-zero locations;
  (3) Renormalizes the remaining elements.

Hence, the `SparseTensor` result has exactly the same non-zero indices and
shape.
"""
tf.@op function sparse_softmax(v7604, v7605, v7606; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseSoftmax") 
                    begin  
                        begin  
                            v7604 = convert(TensorFlow.Tensor{Any}, v7604) 
                            begin  
                            end
                        end
                        begin  
                            v7605 = convert(TensorFlow.Tensor{Any}, v7605) 
                            begin  
                            end
                        end
                        begin  
                            v7606 = convert(TensorFlow.Tensor{Any}, v7606) 
                            begin  
                            end
                        end
                        begin  
                            (v7605,) = tf.tf_promote(v7605)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7604)
                        end
                        begin  
                            tf.add_input(desc, v7605)
                        end
                        begin  
                            tf.add_input(desc, v7606)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseSoftmax") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     set_size(set_indices, set_values, set_shape; validate_indices=true)

Number of unique elements along last dimension of input `set`.

Input `set` is a `SparseTensor` represented by `set_indices`, `set_values`,
and `set_shape`. The last dimension contains values in a set, duplicates are
allowed but ignored.

If `validate_indices` is `True`, this op validates the order and range of `set`
indices.
"""
tf.@op function set_size(v7607, v7608, v7609; name=nothing, validate_indices=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SetSize") 
                    begin  
                        begin  
                            v7607 = convert(TensorFlow.Tensor{Any}, v7607) 
                            begin  
                            end
                        end
                        begin  
                            v7608 = convert(TensorFlow.Tensor{Any}, v7608) 
                            begin  
                            end
                        end
                        begin  
                            v7609 = convert(TensorFlow.Tensor{Any}, v7609) 
                            begin  
                            end
                        end
                        begin  
                            (v7608,) = tf.tf_promote(v7608)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7607)
                        end
                        begin  
                            tf.add_input(desc, v7608)
                        end
                        begin  
                            tf.add_input(desc, v7609)
                        end
                    end 
                    begin  
                        begin  
                            if validate_indices !== nothing 
                                desc["validate_indices"] = Base.Bool(validate_indices)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SetSize") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     assert(condition, data; summarize=3)

Asserts that the given condition is true.

If `condition` evaluates to false, print the list of tensors in `data`.
`summarize` determines how many entries of the tensors to print.
"""
tf.@op function assert(v7610, v7611; name=nothing, T=nothing, summarize=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Assert") 
                    begin  
                        begin  
                            v7610 = convert(TensorFlow.Tensor{Any}, v7610) 
                            begin  
                            end
                        end
                        begin  
                            v7611 = convert.(TensorFlow.Tensor{Any}, v7611) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7610)
                        end
                        begin  
                            tf.add_input(desc, v7611)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity.T
                            end
                        end
                        begin  
                            if summarize !== nothing 
                                desc["summarize"] = Base.Int(summarize)
                            end
                        end
                    end
                end), name, "Assert") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     parallel_concat(values)

Concatenates a list of `N` tensors along the first dimension.

The input tensors are all required to have size 1 in the first dimension.

For example:

```prettyprint
# 'x' is [[1, 4]]
# 'y' is [[2, 5]]
# 'z' is [[3, 6]]
parallel_concat([x, y, z]) => [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.
```

The difference between concat and parallel_concat is that concat requires all
of the inputs be computed before the operation will begin but doesn't require
that the input shapes be known during graph construction.  Parallel concat
will copy pieces of the input into the output as they become available, in
some situations this can provide a performance benefit.
"""
tf.@op function parallel_concat(v7612; name=nothing, N=nothing, T=nothing, shape=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ParallelConcat") 
                    begin  
                        begin  
                            v7612 = convert.(TensorFlow.Tensor{Any}, v7612) 
                            begin  
                            end
                        end
                        begin  
                            (v7612,) = tf.tf_promote(v7612)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7612)
                        end
                    end 
                    begin  
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if shape !== nothing 
                                desc["shape"] = Base.identity(shape)
                            end
                        end
                    end
                end), name, "ParallelConcat") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     select(condition, t, e)

Selects elements from `t` or `e`, depending on `condition`.

The `t`, and `e` tensors must all have the same shape, and the
output will also have that shape.

The `condition` tensor must be a scalar if `t` and `e` are scalars.
If `t` and `e` are vectors or higher rank, then `condition` must be either a
scalar, a vector with size matching the first dimension of `t`, or must have
the same shape as `t`.

The `condition` tensor acts as a mask that chooses, based on the value at each
element, whether the corresponding element / row in the output should be
taken from `t` (if true) or `e` (if false).

If `condition` is a vector and `t` and `e` are higher rank matrices, then
it chooses which row (outer dimension) to copy from `t` and `e`.
If `condition` has the same shape as `t` and `e`, then it chooses which
element to copy from `t` and `e`.

For example:

```prettyprint
# 'condition' tensor is [[True,  False]
#                        [False, True]]
# 't' is [[1, 2],
#         [3, 4]]
# 'e' is [[5, 6],
#         [7, 8]]
select(condition, t, e) ==> [[1, 6],
                             [7, 4]]


# 'condition' tensor is [True, False]
# 't' is [[1, 2],
#         [3, 4]]
# 'e' is [[5, 6],
#         [7, 8]]
select(condition, t, e) ==> [[1, 2],
                             [7, 8]]

```
"""
tf.@op function select(v7613, v7614, v7615; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Select") 
                    begin  
                        begin  
                            v7613 = convert(TensorFlow.Tensor{Any}, v7613) 
                            begin  
                            end
                        end
                        begin  
                            v7614 = convert(TensorFlow.Tensor{Any}, v7614) 
                            begin  
                            end
                        end
                        begin  
                            v7615 = convert(TensorFlow.Tensor{Any}, v7615) 
                            begin  
                            end
                        end
                        begin  
                            (v7614, v7615) = tf.tf_promote(v7614, v7615)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7613)
                        end
                        begin  
                            tf.add_input(desc, v7614)
                        end
                        begin  
                            tf.add_input(desc, v7615)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Select") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_inverse(input; adjoint=false)

Computes the inverse of one or more square invertible matrices or their

adjoints (conjugate transposes).

The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions
form square matrices. The output is a tensor of the same shape as the input
containing the inverse for all input submatrices `[..., :, :]`.

The op uses LU decomposition with partial pivoting to compute the inverses.

If a matrix is not invertible there is no guarantee what the op does. It
may detect the condition and raise an exception or it may simply return a
garbage result.
"""
tf.@op function matrix_inverse(v7616; name=nothing, adjoint=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MatrixInverse") 
                    begin  
                        begin  
                            v7616 = convert(TensorFlow.Tensor{Any}, v7616) 
                            begin  
                            end
                        end
                        begin  
                            (v7616,) = tf.tf_promote(v7616)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7616)
                        end
                    end 
                    begin  
                        begin  
                            if adjoint !== nothing 
                                desc["adjoint"] = Base.Bool(adjoint)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MatrixInverse") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     requantize(input, input_min, input_max, requested_output_min, requested_output_max)

Convert the quantized 'input' tensor into a lower-precision 'output', using the

output range specified with 'requested_output_min' and 'requested_output_max'.

[input_min, input_max] are scalar floats that specify the range for the float
interpretation of the 'input' data. For example, if input_min is -1.0f and
input_max is 1.0f, and we are dealing with quint16 quantized data, then a 0
value in the 16-bit data should be interpreted as -1.0f, and a 65535 means 1.0f.
"""
tf.@op function requantize(v7617, v7618, v7619, v7620, v7621; name=nothing, Tinput=nothing, out_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Requantize") 
                    begin  
                        begin  
                            v7617 = convert(TensorFlow.Tensor{Any}, v7617) 
                            begin  
                            end
                        end
                        begin  
                            v7618 = convert(TensorFlow.Tensor{Any}, v7618) 
                            begin  
                            end
                        end
                        begin  
                            v7619 = convert(TensorFlow.Tensor{Any}, v7619) 
                            begin  
                            end
                        end
                        begin  
                            v7620 = convert(TensorFlow.Tensor{Any}, v7620) 
                            begin  
                            end
                        end
                        begin  
                            v7621 = convert(TensorFlow.Tensor{Any}, v7621) 
                            begin  
                            end
                        end
                        begin  
                            (v7617,) = tf.tf_promote(v7617)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7617)
                        end
                        begin  
                            tf.add_input(desc, v7618)
                        end
                        begin  
                            tf.add_input(desc, v7619)
                        end
                        begin  
                            tf.add_input(desc, v7620)
                        end
                        begin  
                            tf.add_input(desc, v7621)
                        end
                    end 
                    begin  
                        begin  
                            if Tinput !== nothing 
                                desc["Tinput"] = Base.identity(Tinput)
                            end
                        end
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                    end
                end), name, "Requantize") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     initialize_table_from_text_file(table_handle, filename; vocab_size=-1, delimiter=	)

Initializes a table from a text file.

It inserts one key-value pair into the table for each line of the file.
The key and value is extracted from the whole line content, elements from the
split line based on `delimiter` or the line number (starting from zero).
Where to extract the key and value from a line is specified by `key_index` and
`value_index`.

- A value of -1 means use the line number(starting from zero), expects `int64`.
- A value of -2 means use the whole line content, expects `string`.
- A value >= 0 means use the index (starting at zero) of the split line based
  on `delimiter`.
"""
tf.@op function initialize_table_from_text_file(v7622, v7623; name=nothing, key_index=nothing, value_index=nothing, vocab_size=nothing, delimiter=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("InitializeTableFromTextFile") 
                    begin  
                        begin  
                            v7622 = convert(TensorFlow.Tensor{Any}, v7622) 
                            begin  
                            end
                        end
                        begin  
                            v7623 = convert(TensorFlow.Tensor{Any}, v7623) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7622)
                        end
                        begin  
                            tf.add_input(desc, v7623)
                        end
                    end 
                    begin  
                        begin  
                            if key_index !== nothing 
                                desc["key_index"] = Base.Int(key_index)
                            end
                        end
                        begin  
                            if value_index !== nothing 
                                desc["value_index"] = Base.Int(value_index)
                            end
                        end
                        begin  
                            if vocab_size !== nothing 
                                desc["vocab_size"] = Base.Int(vocab_size)
                            end
                        end
                        begin  
                            if delimiter !== nothing 
                                desc["delimiter"] = Base.String(delimiter)
                            end
                        end
                    end
                end), name, "InitializeTableFromTextFile") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     unstage(; container=, shared_name=)

Op is similar to a lightweight Dequeue.  The basic funtionality is similar to

dequeue with many fewer capabilities and options.  This Op is optimized for
performance.
"""
tf.@op function unstage(; name=nothing, dtypes=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Unstage") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if dtypes !== nothing 
                                desc["dtypes"] = Base.identity.dtypes
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "Unstage") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_apply_adagrad_da(var, gradient_accumulator, gradient_squared_accumulator, grad, indices, lr, l1, l2, global_step; use_locking=false)

Update entries in '*var' and '*accum' according to the proximal adagrad scheme.


"""
tf.@op function sparse_apply_adagrad_da(v7624, v7625, v7626, v7627, v7628, v7629, v7630, v7631, v7632; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseApplyAdagradDA") 
                    begin  
                        begin  
                            v7624 = convert(TensorFlow.Tensor{Any}, v7624) 
                            begin  
                            end
                        end
                        begin  
                            v7625 = convert(TensorFlow.Tensor{Any}, v7625) 
                            begin  
                            end
                        end
                        begin  
                            v7626 = convert(TensorFlow.Tensor{Any}, v7626) 
                            begin  
                            end
                        end
                        begin  
                            v7627 = convert(TensorFlow.Tensor{Any}, v7627) 
                            begin  
                            end
                        end
                        begin  
                            v7628 = convert(TensorFlow.Tensor{Any}, v7628) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7629 = convert(TensorFlow.Tensor{Any}, v7629) 
                            begin  
                            end
                        end
                        begin  
                            v7630 = convert(TensorFlow.Tensor{Any}, v7630) 
                            begin  
                            end
                        end
                        begin  
                            v7631 = convert(TensorFlow.Tensor{Any}, v7631) 
                            begin  
                            end
                        end
                        begin  
                            v7632 = convert(TensorFlow.Tensor{Any}, v7632) 
                            begin  
                            end
                        end
                        begin  
                            (v7624, v7625, v7626, v7627, v7629, v7630, v7631) = tf.tf_promote(v7624, v7625, v7626, v7627, v7629, v7630, v7631)
                        end
                        begin  
                            (v7628,) = tf.tf_promote(v7628)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7624)
                        end
                        begin  
                            tf.add_input(desc, v7625)
                        end
                        begin  
                            tf.add_input(desc, v7626)
                        end
                        begin  
                            tf.add_input(desc, v7627)
                        end
                        begin  
                            tf.add_input(desc, v7628)
                        end
                        begin  
                            tf.add_input(desc, v7629)
                        end
                        begin  
                            tf.add_input(desc, v7630)
                        end
                        begin  
                            tf.add_input(desc, v7631)
                        end
                        begin  
                            tf.add_input(desc, v7632)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "SparseApplyAdagradDA") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     min(input, reduction_indices; keep_dims=false, Tidx=Int32)

Computes the minimum of elements across dimensions of a tensor.

Reduces `input` along the dimensions given in `reduction_indices`. Unless
`keep_dims` is true, the rank of the tensor is reduced by 1 for each entry in
`reduction_indices`. If `keep_dims` is true, the reduced dimensions are
retained with length 1.
"""
tf.@op function min(v7633, v7634; name=nothing, keep_dims=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Min") 
                    begin  
                        begin  
                            v7633 = convert(TensorFlow.Tensor{Any}, v7633) 
                            begin  
                            end
                        end
                        begin  
                            v7634 = convert(TensorFlow.Tensor{Int32}, v7634) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7633,) = tf.tf_promote(v7633)
                        end
                        begin  
                            (v7634,) = tf.tf_promote(v7634)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7633)
                        end
                        begin  
                            tf.add_input(desc, v7634)
                        end
                    end 
                    begin  
                        begin  
                            if keep_dims !== nothing 
                                desc["keep_dims"] = Base.Bool(keep_dims)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "Min") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     lookup_table_size(table_handle)

Computes the number of elements in the given table.


"""
tf.@op function lookup_table_size(v7635; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LookupTableSize") 
                    begin  
                        begin  
                            v7635 = convert(TensorFlow.Tensor{Any}, v7635) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7635)
                        end
                    end 
                    begin  
                    end
                end), name, "LookupTableSize") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fft(input)

Compute the 1-dimensional discrete Fourier Transform over the inner-most

dimension of `input`.
"""
tf.@op function fft(v7636; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FFT") 
                    begin  
                        begin  
                            v7636 = convert(TensorFlow.Tensor{Any}, v7636) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7636)
                        end
                    end 
                    begin  
                    end
                end), name, "FFT") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fake_quant_with_min_max_args(inputs; min=nothing, max=nothing)

Fake-quantize the 'inputs' tensor, type float to 'outputs' tensor of same type.

Attributes [min; max] define the clamping range for the 'inputs' data.  Op
divides this range into 255 steps (total of 256 values), then replaces each
'inputs' value with the closest of the quantized step values.

Quantization is called fake since the output is still in floating point.
"""
tf.@op function fake_quant_with_min_max_args(v7637; name=nothing, min=nothing, max=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FakeQuantWithMinMaxArgs") 
                    begin  
                        begin  
                            v7637 = convert(TensorFlow.Tensor{Any}, v7637) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7637)
                        end
                    end 
                    begin  
                        begin  
                            if min !== nothing 
                                desc["min"] = Base.identity(min)
                            end
                        end
                        begin  
                            if max !== nothing 
                                desc["max"] = Base.identity(max)
                            end
                        end
                    end
                end), name, "FakeQuantWithMinMaxArgs") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_apply_gradient_descent(var, alpha, delta; use_locking=false)

Update '*var' by subtracting 'alpha' * 'delta' from it.


"""
tf.@op function resource_apply_gradient_descent(v7638, v7639, v7640; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceApplyGradientDescent") 
                    begin  
                        begin  
                            v7638 = convert(TensorFlow.Tensor{Any}, v7638) 
                            begin  
                            end
                        end
                        begin  
                            v7639 = convert(TensorFlow.Tensor{Any}, v7639) 
                            begin  
                            end
                        end
                        begin  
                            v7640 = convert(TensorFlow.Tensor{Any}, v7640) 
                            begin  
                            end
                        end
                        begin  
                            (v7639, v7640) = tf.tf_promote(v7639, v7640)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7638)
                        end
                        begin  
                            tf.add_input(desc, v7639)
                        end
                        begin  
                            tf.add_input(desc, v7640)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceApplyGradientDescent") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     relu_6g(gradients, features)

Computes rectified linear 6 gradients for a Relu6 operation.


"""
tf.@op function relu_6g(v7641, v7642; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Relu6Grad") 
                    begin  
                        begin  
                            v7641 = convert(TensorFlow.Tensor{Any}, v7641) 
                            begin  
                            end
                        end
                        begin  
                            v7642 = convert(TensorFlow.Tensor{Any}, v7642) 
                            begin  
                            end
                        end
                        begin  
                            (v7641, v7642) = tf.tf_promote(v7641, v7642)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7641)
                        end
                        begin  
                            tf.add_input(desc, v7642)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Relu6Grad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     lrng(input_grads, input_image, output_image; depth_radius=5, bias=nothing, alpha=nothing, beta=nothing, T=Float32)

Gradients for Local Response Normalization.


"""
tf.@op function lrng(v7643, v7644, v7645; name=nothing, depth_radius=nothing, bias=nothing, alpha=nothing, beta=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LRNGrad") 
                    begin  
                        begin  
                            v7643 = convert(TensorFlow.Tensor{Float32}, v7643) 
                            begin  
                            end
                        end
                        begin  
                            v7644 = convert(TensorFlow.Tensor{Float32}, v7644) 
                            begin  
                            end
                        end
                        begin  
                            v7645 = convert(TensorFlow.Tensor{Float32}, v7645) 
                            begin  
                            end
                        end
                        begin  
                            (v7643, v7644, v7645) = tf.tf_promote(v7643, v7644, v7645)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7643)
                        end
                        begin  
                            tf.add_input(desc, v7644)
                        end
                        begin  
                            tf.add_input(desc, v7645)
                        end
                    end 
                    begin  
                        begin  
                            if depth_radius !== nothing 
                                desc["depth_radius"] = Base.Int(depth_radius)
                            end
                        end
                        begin  
                            if bias !== nothing 
                                desc["bias"] = Base.identity(bias)
                            end
                        end
                        begin  
                            if alpha !== nothing 
                                desc["alpha"] = Base.identity(alpha)
                            end
                        end
                        begin  
                            if beta !== nothing 
                                desc["beta"] = Base.identity(beta)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "LRNGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     broadcast_gradient_args(s0, s1; T=Int32)

Return the reduction indices for computing gradients of s0 op s1 with broadcast.

This is typically used by gradient computations for a broadcasting operation.
"""
tf.@op function broadcast_gradient_args(v7646, v7647; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BroadcastGradientArgs") 
                    begin  
                        begin  
                            v7646 = convert(TensorFlow.Tensor{Int32}, v7646) 
                            begin  
                            end
                        end
                        begin  
                            v7647 = convert(TensorFlow.Tensor{Int32}, v7647) 
                            begin  
                            end
                        end
                        begin  
                            (v7646, v7647) = tf.tf_promote(v7646, v7647)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7646)
                        end
                        begin  
                            tf.add_input(desc, v7647)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BroadcastGradientArgs") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     decode_raw(bytes; little_endian=true)

Reinterpret the bytes of a string as a vector of numbers.


"""
tf.@op function decode_raw(v7648; name=nothing, out_type=nothing, little_endian=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DecodeRaw") 
                    begin  
                        begin  
                            v7648 = convert(TensorFlow.Tensor{Any}, v7648) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7648)
                        end
                    end 
                    begin  
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                        begin  
                            if little_endian !== nothing 
                                desc["little_endian"] = Base.Bool(little_endian)
                            end
                        end
                    end
                end), name, "DecodeRaw") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fake_quant_with_min_max_vars_per_channel_gradient(gradients, inputs, min, max)

Compute gradients for a FakeQuantWithMinMaxVarsPerChannel operation.


"""
tf.@op function fake_quant_with_min_max_vars_per_channel_gradient(v7649, v7650, v7651, v7652; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FakeQuantWithMinMaxVarsPerChannelGradient") 
                    begin  
                        begin  
                            v7649 = convert(TensorFlow.Tensor{Any}, v7649) 
                            begin  
                            end
                        end
                        begin  
                            v7650 = convert(TensorFlow.Tensor{Any}, v7650) 
                            begin  
                            end
                        end
                        begin  
                            v7651 = convert(TensorFlow.Tensor{Any}, v7651) 
                            begin  
                            end
                        end
                        begin  
                            v7652 = convert(TensorFlow.Tensor{Any}, v7652) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7649)
                        end
                        begin  
                            tf.add_input(desc, v7650)
                        end
                        begin  
                            tf.add_input(desc, v7651)
                        end
                        begin  
                            tf.add_input(desc, v7652)
                        end
                    end 
                    begin  
                    end
                end), name, "FakeQuantWithMinMaxVarsPerChannelGradient") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     initialize_table(table_handle, keys, values)

Table initializer that takes two tensors for keys and values respectively.


"""
tf.@op function initialize_table(v7653, v7654, v7655; name=nothing, Tkey=nothing, Tval=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("InitializeTable") 
                    begin  
                        begin  
                            v7653 = convert(TensorFlow.Tensor{Any}, v7653) 
                            begin  
                            end
                        end
                        begin  
                            v7654 = convert(TensorFlow.Tensor{Any}, v7654) 
                            begin  
                            end
                        end
                        begin  
                            v7655 = convert(TensorFlow.Tensor{Any}, v7655) 
                            begin  
                            end
                        end
                        begin  
                            (v7655,) = tf.tf_promote(v7655)
                        end
                        begin  
                            (v7654,) = tf.tf_promote(v7654)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7653)
                        end
                        begin  
                            tf.add_input(desc, v7654)
                        end
                        begin  
                            tf.add_input(desc, v7655)
                        end
                    end 
                    begin  
                        begin  
                            if Tkey !== nothing 
                                desc["Tkey"] = Base.identity(Tkey)
                            end
                        end
                        begin  
                            if Tval !== nothing 
                                desc["Tval"] = Base.identity(Tval)
                            end
                        end
                    end
                end), name, "InitializeTable") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     array_to_list(input)

Converts an array of tensors to a list of tensors.


"""
tf.@op function array_to_list(v7656; name=nothing, T=nothing, N=nothing, out_types=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("_ArrayToList") 
                    begin  
                        begin  
                            v7656 = convert.(TensorFlow.Tensor{Any}, v7656) 
                            begin  
                            end
                        end
                        begin  
                            (v7656,) = tf.tf_promote(v7656)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7656)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                        begin  
                            if out_types !== nothing 
                                desc["out_types"] = Base.identity.out_types
                            end
                        end
                    end
                end), name, "_ArrayToList") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     fifoq(; shapes=Int64[], capacity=-1, container=, shared_name=)

A queue that produces elements in first-in first-out order.


"""
tf.@op function fifoq(; name=nothing, component_types=nothing, shapes=nothing, capacity=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FIFOQueue") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if shapes !== nothing 
                                desc["shapes"] = Base.identity.shapes
                            end
                        end
                        begin  
                            if capacity !== nothing 
                                desc["capacity"] = Base.Int(capacity)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "FIFOQueue") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     expand_dims(input, dim; Tdim=Int32)

Inserts a dimension of 1 into a tensor's shape.

Given a tensor `input`, this operation inserts a dimension of 1 at the
dimension index `dim` of `input`'s shape. The dimension index `dim` starts at
zero; if you specify a negative number for `dim` it is counted backward from
the end.

This operation is useful if you want to add a batch dimension to a single
element. For example, if you have a single image of shape `[height, width,
channels]`, you can make it a batch of 1 image with `expand_dims(image, 0)`,
which will make the shape `[1, height, width, channels]`.

Other examples:

```prettyprint
# 't' is a tensor of shape [2]
shape(expand_dims(t, 0)) ==> [1, 2]
shape(expand_dims(t, 1)) ==> [2, 1]
shape(expand_dims(t, -1)) ==> [2, 1]

# 't2' is a tensor of shape [2, 3, 5]
shape(expand_dims(t2, 0)) ==> [1, 2, 3, 5]
shape(expand_dims(t2, 2)) ==> [2, 3, 1, 5]
shape(expand_dims(t2, 3)) ==> [2, 3, 5, 1]
```

This operation requires that:

`-1-input.dims() <= dim <= input.dims()`

This operation is related to `squeeze()`, which removes dimensions of
size 1.
"""
tf.@op function expand_dims(v7657, v7658; name=nothing, T=nothing, Tdim=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ExpandDims") 
                    begin  
                        begin  
                            v7657 = convert(TensorFlow.Tensor{Any}, v7657) 
                            begin  
                            end
                        end
                        begin  
                            v7658 = convert(TensorFlow.Tensor{Int32}, v7658) 
                            begin  
                            end
                        end
                        begin  
                            (v7657,) = tf.tf_promote(v7657)
                        end
                        begin  
                            (v7658,) = tf.tf_promote(v7658)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7657)
                        end
                        begin  
                            tf.add_input(desc, v7658)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tdim !== nothing 
                                desc["Tdim"] = Base.identity(Tdim)
                            end
                        end
                    end
                end), name, "ExpandDims") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_sparse_apply_proximal_gradient_descent(var, alpha, l1, l2, grad, indices; use_locking=false)

Sparse update '*var' as FOBOS algorithm with fixed learning rate.

That is for rows we have grad for, we update var as follows:
prox_v = var - alpha * grad
var = sign(prox_v)/(1+alpha*l2) * max{|prox_v|-alpha*l1,0}
"""
tf.@op function resource_sparse_apply_proximal_gradient_descent(v7659, v7660, v7661, v7662, v7663, v7664; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceSparseApplyProximalGradientDescent") 
                    begin  
                        begin  
                            v7659 = convert(TensorFlow.Tensor{Any}, v7659) 
                            begin  
                            end
                        end
                        begin  
                            v7660 = convert(TensorFlow.Tensor{Any}, v7660) 
                            begin  
                            end
                        end
                        begin  
                            v7661 = convert(TensorFlow.Tensor{Any}, v7661) 
                            begin  
                            end
                        end
                        begin  
                            v7662 = convert(TensorFlow.Tensor{Any}, v7662) 
                            begin  
                            end
                        end
                        begin  
                            v7663 = convert(TensorFlow.Tensor{Any}, v7663) 
                            begin  
                            end
                        end
                        begin  
                            v7664 = convert(TensorFlow.Tensor{Any}, v7664) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7660, v7661, v7662, v7663) = tf.tf_promote(v7660, v7661, v7662, v7663)
                        end
                        begin  
                            (v7664,) = tf.tf_promote(v7664)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7659)
                        end
                        begin  
                            tf.add_input(desc, v7660)
                        end
                        begin  
                            tf.add_input(desc, v7661)
                        end
                        begin  
                            tf.add_input(desc, v7662)
                        end
                        begin  
                            tf.add_input(desc, v7663)
                        end
                        begin  
                            tf.add_input(desc, v7664)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceSparseApplyProximalGradientDescent") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     dilation_2d_backprop_filter(input, filter, out_backprop)

Computes the gradient of morphological 2-D dilation with respect to the filter.


"""
tf.@op function dilation_2d_backprop_filter(v7665, v7666, v7667; name=nothing, T=nothing, strides=nothing, rates=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Dilation2DBackpropFilter") 
                    begin  
                        begin  
                            v7665 = convert(TensorFlow.Tensor{Any}, v7665) 
                            begin  
                            end
                        end
                        begin  
                            v7666 = convert(TensorFlow.Tensor{Any}, v7666) 
                            begin  
                            end
                        end
                        begin  
                            v7667 = convert(TensorFlow.Tensor{Any}, v7667) 
                            begin  
                            end
                        end
                        begin  
                            (v7665, v7666, v7667) = tf.tf_promote(v7665, v7666, v7667)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7665)
                        end
                        begin  
                            tf.add_input(desc, v7666)
                        end
                        begin  
                            tf.add_input(desc, v7667)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if rates !== nothing 
                                desc["rates"] = Base.identity.rates
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "Dilation2DBackpropFilter") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     enter(data; is_constant=false, parallel_iterations=10)

Creates or finds a child frame, and makes `data` available to the child frame.

This op is used together with `Exit` to create loops in the graph.
The unique `frame_name` is used by the `Executor` to identify frames. If
`is_constant` is true, `output` is a constant in the child frame; otherwise
it may be changed in the child frame. At most `parallel_iterations` iterations
are run in parallel in the child frame.
"""
tf.@op function enter(v7668; name=nothing, T=nothing, frame_name=nothing, is_constant=nothing, parallel_iterations=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Enter") 
                    begin  
                        begin  
                            v7668 = convert(TensorFlow.Tensor{Any}, v7668) 
                            begin  
                            end
                        end
                        begin  
                            (v7668,) = tf.tf_promote(v7668)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7668)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if frame_name !== nothing 
                                desc["frame_name"] = Base.String(frame_name)
                            end
                        end
                        begin  
                            if is_constant !== nothing 
                                desc["is_constant"] = Base.Bool(is_constant)
                            end
                        end
                        begin  
                            if parallel_iterations !== nothing 
                                desc["parallel_iterations"] = Base.Int(parallel_iterations)
                            end
                        end
                    end
                end), name, "Enter") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     inv_grad(x, y)

Computes the gradient for the inverse of `x` wrt its input.

Specifically, `grad = -dy * y*y`, where `y = 1/x`, and `dy`
is the corresponding input gradient.
"""
tf.@op function inv_grad(v7669, v7670; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("InvGrad") 
                    begin  
                        begin  
                            v7669 = convert(TensorFlow.Tensor{Any}, v7669) 
                            begin  
                            end
                        end
                        begin  
                            v7670 = convert(TensorFlow.Tensor{Any}, v7670) 
                            begin  
                            end
                        end
                        begin  
                            (v7669, v7670) = tf.tf_promote(v7669, v7670)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7669)
                        end
                        begin  
                            tf.add_input(desc, v7670)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "InvGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     non_max_suppression(boxes, scores, max_output_size; iou_threshold=nothing)

Greedily selects a subset of bounding boxes in descending order of score,

pruning away boxes that have high intersection-over-union (IOU) overlap
with previously selected boxes.  Bounding boxes are supplied as
[y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any
diagonal pair of box corners and the coordinates can be provided as normalized
(i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm
is agnostic to where the origin is in the coordinate system.  Note that this
algorithm is invariant to orthogonal transformations and translations
of the coordinate system; thus translating or reflections of the coordinate
system result in the same boxes being selected by the algorithm.

The output of this operation is a set of integers indexing into the input
collection of bounding boxes representing the selected boxes.  The bounding
box coordinates corresponding to the selected indices can then be obtained
using the `tf.gather operation`.  For example:

  selected_indices = tf.image.non_max_suppression(
      boxes, scores, max_output_size, iou_threshold)
  selected_boxes = tf.gather(boxes, selected_indices)
"""
tf.@op function non_max_suppression(v7671, v7672, v7673; name=nothing, iou_threshold=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("NonMaxSuppression") 
                    begin  
                        begin  
                            v7671 = convert(TensorFlow.Tensor{Any}, v7671) 
                            begin  
                            end
                        end
                        begin  
                            v7672 = convert(TensorFlow.Tensor{Any}, v7672) 
                            begin  
                            end
                        end
                        begin  
                            v7673 = convert(TensorFlow.Tensor{Any}, v7673) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7671)
                        end
                        begin  
                            tf.add_input(desc, v7672)
                        end
                        begin  
                            tf.add_input(desc, v7673)
                        end
                    end 
                    begin  
                        begin  
                            if iou_threshold !== nothing 
                                desc["iou_threshold"] = Base.identity(iou_threshold)
                            end
                        end
                    end
                end), name, "NonMaxSuppression") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tanh(x)

Computes hyperbolic tangent of `x` element-wise.


"""
tf.@op function tanh(v7674; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Tanh") 
                    begin  
                        begin  
                            v7674 = convert(TensorFlow.Tensor{Any}, v7674) 
                            begin  
                            end
                        end
                        begin  
                            (v7674,) = tf.tf_promote(v7674)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7674)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Tanh") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     tan(x)

Computes tan of x element-wise.


"""
tf.@op function tan(v7675; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Tan") 
                    begin  
                        begin  
                            v7675 = convert(TensorFlow.Tensor{Any}, v7675) 
                            begin  
                            end
                        end
                        begin  
                            (v7675,) = tf.tf_promote(v7675)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7675)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Tan") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     bias_add_grad(out_backprop; data_format=NHWC)

The backward operation for "BiasAdd" on the "bias" tensor.

It accumulates all the values from out_backprop into the feature dimension.
For NHWC data format, the feature dimension is the last. For NCHW data format,
the feature dimension is the third-to-last.
"""
tf.@op function bias_add_grad(v7676; name=nothing, T=nothing, data_format=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BiasAddGrad") 
                    begin  
                        begin  
                            v7676 = convert(TensorFlow.Tensor{Any}, v7676) 
                            begin  
                            end
                        end
                        begin  
                            (v7676,) = tf.tf_promote(v7676)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7676)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                    end
                end), name, "BiasAddGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     symbolic_gradient(input)

Computes the gradient function for function f via backpropagation.


"""
tf.@op function symbolic_gradient(v7677; name=nothing, Tin=nothing, Tout=nothing, f=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SymbolicGradient") 
                    begin  
                        begin  
                            v7677 = convert.(TensorFlow.Tensor{Any}, v7677) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7677)
                        end
                    end 
                    begin  
                        begin  
                            if Tin !== nothing 
                                desc["Tin"] = Base.identity.Tin
                            end
                        end
                        begin  
                            if Tout !== nothing 
                                desc["Tout"] = Base.identity.Tout
                            end
                        end
                        begin  
                            if f !== nothing 
                                desc["f"] = Base.identity(f)
                            end
                        end
                    end
                end), name, "SymbolicGradient") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reader_serialize_state_v2(reader_handle)

Produce a string tensor that encodes the state of a Reader.

Not all Readers support being serialized, so this can produce an
Unimplemented error.
"""
tf.@op function reader_serialize_state_v2(v7678; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderSerializeStateV2") 
                    begin  
                        begin  
                            v7678 = convert(TensorFlow.Tensor{Any}, v7678) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7678)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderSerializeStateV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     square(x)

Computes square of x element-wise.

I.e., \\(y = x * x = x^2\\).
"""
tf.@op function square(v7679; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Square") 
                    begin  
                        begin  
                            v7679 = convert(TensorFlow.Tensor{Any}, v7679) 
                            begin  
                            end
                        end
                        begin  
                            (v7679,) = tf.tf_promote(v7679)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7679)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Square") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     l_2l(t)

L2 Loss.

Computes half the L2 norm of a tensor without the `sqrt`:

    output = sum(t ** 2) / 2
"""
tf.@op function l_2l(v7680; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("L2Loss") 
                    begin  
                        begin  
                            v7680 = convert(TensorFlow.Tensor{Any}, v7680) 
                            begin  
                            end
                        end
                        begin  
                            (v7680,) = tf.tf_promote(v7680)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7680)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "L2Loss") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resize_area(images, size; align_corners=false)

Resize `images` to `size` using area interpolation.

Input images can be of different types but output images are always float.
"""
tf.@op function resize_area(v7681, v7682; name=nothing, T=nothing, align_corners=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResizeArea") 
                    begin  
                        begin  
                            v7681 = convert(TensorFlow.Tensor{Any}, v7681) 
                            begin  
                            end
                        end
                        begin  
                            v7682 = convert(TensorFlow.Tensor{Any}, v7682) 
                            begin  
                            end
                        end
                        begin  
                            (v7681,) = tf.tf_promote(v7681)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7681)
                        end
                        begin  
                            tf.add_input(desc, v7682)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if align_corners !== nothing 
                                desc["align_corners"] = Base.Bool(align_corners)
                            end
                        end
                    end
                end), name, "ResizeArea") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     batch_fft_3d(input)




"""
tf.@op function batch_fft_3d(v7683; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchFFT3D") 
                    begin  
                        begin  
                            v7683 = convert(TensorFlow.Tensor{Any}, v7683) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7683)
                        end
                    end 
                    begin  
                    end
                end), name, "BatchFFT3D") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     apply_adadelta(var, accum, accum_update, lr, rho, epsilon, grad; use_locking=false)

Update '*var' according to the adadelta scheme.

accum = rho() * accum + (1 - rho()) * grad.square();
update = (update_accum + epsilon).sqrt() * (accum + epsilon()).rsqrt() * grad;
update_accum = rho() * update_accum + (1 - rho()) * update.square();
var -= update;
"""
tf.@op function apply_adadelta(v7684, v7685, v7686, v7687, v7688, v7689, v7690; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ApplyAdadelta") 
                    begin  
                        begin  
                            v7684 = convert(TensorFlow.Tensor{Any}, v7684) 
                            begin  
                            end
                        end
                        begin  
                            v7685 = convert(TensorFlow.Tensor{Any}, v7685) 
                            begin  
                            end
                        end
                        begin  
                            v7686 = convert(TensorFlow.Tensor{Any}, v7686) 
                            begin  
                            end
                        end
                        begin  
                            v7687 = convert(TensorFlow.Tensor{Any}, v7687) 
                            begin  
                            end
                        end
                        begin  
                            v7688 = convert(TensorFlow.Tensor{Any}, v7688) 
                            begin  
                            end
                        end
                        begin  
                            v7689 = convert(TensorFlow.Tensor{Any}, v7689) 
                            begin  
                            end
                        end
                        begin  
                            v7690 = convert(TensorFlow.Tensor{Any}, v7690) 
                            begin  
                            end
                        end
                        begin  
                            (v7684, v7685, v7686, v7687, v7688, v7689, v7690) = tf.tf_promote(v7684, v7685, v7686, v7687, v7688, v7689, v7690)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7684)
                        end
                        begin  
                            tf.add_input(desc, v7685)
                        end
                        begin  
                            tf.add_input(desc, v7686)
                        end
                        begin  
                            tf.add_input(desc, v7687)
                        end
                        begin  
                            tf.add_input(desc, v7688)
                        end
                        begin  
                            tf.add_input(desc, v7689)
                        end
                        begin  
                            tf.add_input(desc, v7690)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ApplyAdadelta") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     depthwise_conv_2d_native_backprop_input(input_sizes, filter, out_backprop; data_format=NHWC)

Computes the gradients of depthwise convolution with respect to the input.


"""
tf.@op function depthwise_conv_2d_native_backprop_input(v7691, v7692, v7693; name=nothing, T=nothing, strides=nothing, padding=nothing, data_format=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DepthwiseConv2dNativeBackpropInput") 
                    begin  
                        begin  
                            v7691 = convert(TensorFlow.Tensor{Any}, v7691) 
                            begin  
                            end
                        end
                        begin  
                            v7692 = convert(TensorFlow.Tensor{Any}, v7692) 
                            begin  
                            end
                        end
                        begin  
                            v7693 = convert(TensorFlow.Tensor{Any}, v7693) 
                            begin  
                            end
                        end
                        begin  
                            (v7692, v7693) = tf.tf_promote(v7692, v7693)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7691)
                        end
                        begin  
                            tf.add_input(desc, v7692)
                        end
                        begin  
                            tf.add_input(desc, v7693)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                        begin  
                            if data_format !== nothing 
                                desc["data_format"] = Base.String(data_format)
                            end
                        end
                    end
                end), name, "DepthwiseConv2dNativeBackpropInput") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_apply_rmsp(var, ms, mom, lr, rho, momentum, epsilon, grad; use_locking=false)

Update '*var' according to the RMSProp algorithm.

Note that in dense implementation of this algorithm, ms and mom will
update even if the grad is zero, but in this sparse implementation, ms
and mom will not update in iterations during which the grad is zero.

mean_square = decay * mean_square + (1-decay) * gradient ** 2
Delta = learning_rate * gradient / sqrt(mean_square + epsilon)

ms <- rho * ms_{t-1} + (1-rho) * grad * grad
mom <- momentum * mom_{t-1} + lr * grad / sqrt(ms + epsilon)
var <- var - mom
"""
tf.@op function resource_apply_rmsp(v7694, v7695, v7696, v7697, v7698, v7699, v7700, v7701; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceApplyRMSProp") 
                    begin  
                        begin  
                            v7694 = convert(TensorFlow.Tensor{Any}, v7694) 
                            begin  
                            end
                        end
                        begin  
                            v7695 = convert(TensorFlow.Tensor{Any}, v7695) 
                            begin  
                            end
                        end
                        begin  
                            v7696 = convert(TensorFlow.Tensor{Any}, v7696) 
                            begin  
                            end
                        end
                        begin  
                            v7697 = convert(TensorFlow.Tensor{Any}, v7697) 
                            begin  
                            end
                        end
                        begin  
                            v7698 = convert(TensorFlow.Tensor{Any}, v7698) 
                            begin  
                            end
                        end
                        begin  
                            v7699 = convert(TensorFlow.Tensor{Any}, v7699) 
                            begin  
                            end
                        end
                        begin  
                            v7700 = convert(TensorFlow.Tensor{Any}, v7700) 
                            begin  
                            end
                        end
                        begin  
                            v7701 = convert(TensorFlow.Tensor{Any}, v7701) 
                            begin  
                            end
                        end
                        begin  
                            (v7697, v7698, v7699, v7700, v7701) = tf.tf_promote(v7697, v7698, v7699, v7700, v7701)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7694)
                        end
                        begin  
                            tf.add_input(desc, v7695)
                        end
                        begin  
                            tf.add_input(desc, v7696)
                        end
                        begin  
                            tf.add_input(desc, v7697)
                        end
                        begin  
                            tf.add_input(desc, v7698)
                        end
                        begin  
                            tf.add_input(desc, v7699)
                        end
                        begin  
                            tf.add_input(desc, v7700)
                        end
                        begin  
                            tf.add_input(desc, v7701)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceApplyRMSProp") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     audio_summary(tag, tensor; max_outputs=3)

Outputs a `Summary` protocol buffer with audio.

The summary has up to `max_outputs` summary values containing audio. The
audio is built from `tensor` which must be 3-D with shape `[batch_size,
frames, channels]` or 2-D with shape `[batch_size, frames]`. The values are
assumed to be in the range of `[-1.0, 1.0]` with a sample rate of `sample_rate`.

The `tag` argument is a scalar `Tensor` of type `string`.  It is used to
build the `tag` of the summary values:

*  If `max_outputs` is 1, the summary value tag is '*tag*/audio'.
*  If `max_outputs` is greater than 1, the summary value tags are
   generated sequentially as '*tag*/audio/0', '*tag*/audio/1', etc.
"""
tf.@op function audio_summary(v7702, v7703; name=nothing, sample_rate=nothing, max_outputs=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AudioSummary") 
                    begin  
                        begin  
                            v7702 = convert(TensorFlow.Tensor{Any}, v7702) 
                            begin  
                            end
                        end
                        begin  
                            v7703 = convert(TensorFlow.Tensor{Any}, v7703) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7702)
                        end
                        begin  
                            tf.add_input(desc, v7703)
                        end
                    end 
                    begin  
                        begin  
                            if sample_rate !== nothing 
                                desc["sample_rate"] = Base.identity(sample_rate)
                            end
                        end
                        begin  
                            if max_outputs !== nothing 
                                desc["max_outputs"] = Base.Int(max_outputs)
                            end
                        end
                    end
                end), name, "AudioSummary") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     squared_difference(x, y)

Returns (x - y)(x - y) element-wise.

*NOTE*: `SquaredDifference` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function squared_difference(v7704, v7705; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SquaredDifference") 
                    begin  
                        begin  
                            v7704 = convert(TensorFlow.Tensor{Any}, v7704) 
                            begin  
                            end
                        end
                        begin  
                            v7705 = convert(TensorFlow.Tensor{Any}, v7705) 
                            begin  
                            end
                        end
                        begin  
                            (v7704, v7705) = tf.tf_promote(v7704, v7705)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7704)
                        end
                        begin  
                            tf.add_input(desc, v7705)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SquaredDifference") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     apply_momentum(var, accum, lr, grad, momentum; use_locking=false, use_nesterov=false)

Update '*var' according to the momentum scheme. Set use_nesterov = True if you

want to use Nesterov momentum.

accum = accum * momentum + grad
var -= lr * accum
"""
tf.@op function apply_momentum(v7706, v7707, v7708, v7709, v7710; name=nothing, T=nothing, use_locking=nothing, use_nesterov=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ApplyMomentum") 
                    begin  
                        begin  
                            v7706 = convert(TensorFlow.Tensor{Any}, v7706) 
                            begin  
                            end
                        end
                        begin  
                            v7707 = convert(TensorFlow.Tensor{Any}, v7707) 
                            begin  
                            end
                        end
                        begin  
                            v7708 = convert(TensorFlow.Tensor{Any}, v7708) 
                            begin  
                            end
                        end
                        begin  
                            v7709 = convert(TensorFlow.Tensor{Any}, v7709) 
                            begin  
                            end
                        end
                        begin  
                            v7710 = convert(TensorFlow.Tensor{Any}, v7710) 
                            begin  
                            end
                        end
                        begin  
                            (v7706, v7707, v7708, v7709, v7710) = tf.tf_promote(v7706, v7707, v7708, v7709, v7710)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7706)
                        end
                        begin  
                            tf.add_input(desc, v7707)
                        end
                        begin  
                            tf.add_input(desc, v7708)
                        end
                        begin  
                            tf.add_input(desc, v7709)
                        end
                        begin  
                            tf.add_input(desc, v7710)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                        begin  
                            if use_nesterov !== nothing 
                                desc["use_nesterov"] = Base.Bool(use_nesterov)
                            end
                        end
                    end
                end), name, "ApplyMomentum") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reader_read(reader_handle, queue_handle)

Returns the next record (key, value pair) produced by a Reader.

Will dequeue from the input queue if necessary (e.g. when the
Reader needs to start reading from a new file since it has finished
with the previous file).
"""
tf.@op function reader_read(v7711, v7712; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderRead") 
                    begin  
                        begin  
                            v7711 = convert(TensorFlow.Tensor{Any}, v7711) 
                            begin  
                            end
                        end
                        begin  
                            v7712 = convert(TensorFlow.Tensor{Any}, v7712) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7711)
                        end
                        begin  
                            tf.add_input(desc, v7712)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderRead") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     scatter_nd_update(ref, indices, updates; use_locking=true)

Applies sparse `updates` to individual values or slices within a given

variable according to `indices`.

`ref` is a `Tensor` with rank `P` and `indices` is a `Tensor` of rank `Q`.

`indices` must be integer tensor, containing indices into `ref`.
It must be shape `[d_0, ..., d_{Q-2}, K]` where `0 < K <= P`.

The innermost dimension of `indices` (with length `K`) corresponds to
indices into elements (if `K = P`) or slices (if `K < P`) along the `K`th
dimension of `ref`.

`updates` is `Tensor` of rank `Q-1+P-K` with shape:

```
[d_0, ..., d_{Q-2}, ref.shape[K], ..., ref.shape[P-1]].
```

For example, say we want to update 4 scattered elements to a rank-1 tensor to
8 elements. In Python, that update would look like this:

    ref = tf.Variable([1, 2, 3, 4, 5, 6, 7, 8])
    indices = tf.constant([[4], [3], [1] ,[7]])
    updates = tf.constant([9, 10, 11, 12])
    update = tf.scatter_nd_update(ref, indices, updates)
    with tf.Session() as sess:
      print sess.run(update)

The resulting update to ref would look like this:

    [1, 11, 3, 10, 9, 6, 7, 12]

See [tf.scatter_nd](#scatter_nd) for more details about how to make updates to
slices.
"""
tf.@op function scatter_nd_update(v7713, v7714, v7715; name=nothing, T=nothing, Tindices=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ScatterNdUpdate") 
                    begin  
                        begin  
                            v7713 = convert(TensorFlow.Tensor{Any}, v7713) 
                            begin  
                            end
                        end
                        begin  
                            v7714 = convert(TensorFlow.Tensor{Any}, v7714) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7715 = convert(TensorFlow.Tensor{Any}, v7715) 
                            begin  
                            end
                        end
                        begin  
                            (v7713, v7715) = tf.tf_promote(v7713, v7715)
                        end
                        begin  
                            (v7714,) = tf.tf_promote(v7714)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7713)
                        end
                        begin  
                            tf.add_input(desc, v7714)
                        end
                        begin  
                            tf.add_input(desc, v7715)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ScatterNdUpdate") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     dynamic_stitch(indices, data)

Interleave the values from the `data` tensors into a single tensor.

Builds a merged tensor such that

```python
    merged[indices[m][i, ..., j], ...] = data[m][i, ..., j, ...]
```

For example, if each `indices[m]` is scalar or vector, we have

```python
    # Scalar indices:
    merged[indices[m], ...] = data[m][...]

    # Vector indices:
    merged[indices[m][i], ...] = data[m][i, ...]
```

Each `data[i].shape` must start with the corresponding `indices[i].shape`,
and the rest of `data[i].shape` must be constant w.r.t. `i`.  That is, we
must have `data[i].shape = indices[i].shape + constant`.  In terms of this
`constant`, the output shape is

    merged.shape = [max(indices)] + constant

Values are merged in order, so if an index appears in both `indices[m][i]` and
`indices[n][j]` for `(m,i) < (n,j)` the slice `data[n][j]` will appear in the
merged result.

For example:

```python
    indices[0] = 6
    indices[1] = [4, 1]
    indices[2] = [[5, 2], [0, 3]]
    data[0] = [61, 62]
    data[1] = [[41, 42], [11, 12]]
    data[2] = [[[51, 52], [21, 22]], [[1, 2], [31, 32]]]
    merged = [[1, 2], [11, 12], [21, 22], [31, 32], [41, 42],
              [51, 52], [61, 62]]
```

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/DynamicStitch.png" alt>
</div>
"""
tf.@op function dynamic_stitch(v7716, v7717; name=nothing, N=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DynamicStitch") 
                    begin  
                        begin  
                            v7716 = convert.(TensorFlow.Tensor{Any}, v7716) 
                            begin  
                            end
                        end
                        begin  
                            v7717 = convert.(TensorFlow.Tensor{Any}, v7717) 
                            begin  
                            end
                        end
                        begin  
                            (v7717,) = tf.tf_promote(v7717)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7716)
                        end
                        begin  
                            tf.add_input(desc, v7717)
                        end
                    end 
                    begin  
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "DynamicStitch") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_accumulator_take_gradient(handle, num_required)

Extracts the average sparse gradient in the given SparseConditionalAccumulator,

provided that sufficient (i.e., more than num_required) gradients have been
accumulated. The op will blocks until sufficient gradients have been
accumulated. If the accumulator has already aggregated more than num_required
gradients, it will return its average of the accumulated gradients.
Also automatically increments the recorded global_step in the accumulator by 1,
and resets the aggregate to 0.
"""
tf.@op function sparse_accumulator_take_gradient(v7718, v7719; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseAccumulatorTakeGradient") 
                    begin  
                        begin  
                            v7718 = convert(TensorFlow.Tensor{Any}, v7718) 
                            begin  
                            end
                        end
                        begin  
                            v7719 = convert(TensorFlow.Tensor{Any}, v7719) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7718)
                        end
                        begin  
                            tf.add_input(desc, v7719)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "SparseAccumulatorTakeGradient") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     fractional_max_pool_grad(orig_input, orig_output, out_backprop, row_pooling_sequence, col_pooling_sequence; overlapping=false)

Computes gradient of the FractionalMaxPool function.


"""
tf.@op function fractional_max_pool_grad(v7720, v7721, v7722, v7723, v7724; name=nothing, overlapping=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("FractionalMaxPoolGrad") 
                    begin  
                        begin  
                            v7720 = convert(TensorFlow.Tensor{Any}, v7720) 
                            begin  
                            end
                        end
                        begin  
                            v7721 = convert(TensorFlow.Tensor{Any}, v7721) 
                            begin  
                            end
                        end
                        begin  
                            v7722 = convert(TensorFlow.Tensor{Any}, v7722) 
                            begin  
                            end
                        end
                        begin  
                            v7723 = convert(TensorFlow.Tensor{Any}, v7723) 
                            begin  
                            end
                        end
                        begin  
                            v7724 = convert(TensorFlow.Tensor{Any}, v7724) 
                            begin  
                            end
                        end
                        begin  
                            (v7720, v7721, v7722) = tf.tf_promote(v7720, v7721, v7722)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7720)
                        end
                        begin  
                            tf.add_input(desc, v7721)
                        end
                        begin  
                            tf.add_input(desc, v7722)
                        end
                        begin  
                            tf.add_input(desc, v7723)
                        end
                        begin  
                            tf.add_input(desc, v7724)
                        end
                    end 
                    begin  
                        begin  
                            if overlapping !== nothing 
                                desc["overlapping"] = Base.Bool(overlapping)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "FractionalMaxPoolGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     accumulator_set_global_step(handle, new_global_step)

Updates the accumulator with a new value for global_step. Logs warning if the

accumulator's value is already higher than new_global_step.
"""
tf.@op function accumulator_set_global_step(v7725, v7726; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AccumulatorSetGlobalStep") 
                    begin  
                        begin  
                            v7725 = convert(TensorFlow.Tensor{Any}, v7725) 
                            begin  
                            end
                        end
                        begin  
                            v7726 = convert(TensorFlow.Tensor{Any}, v7726) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7725)
                        end
                        begin  
                            tf.add_input(desc, v7726)
                        end
                    end 
                    begin  
                    end
                end), name, "AccumulatorSetGlobalStep") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     random_standard_normal(shape; seed=0, seed2=0)

Outputs random values from a normal distribution.

The generated values will have mean 0 and standard deviation 1.
"""
tf.@op function random_standard_normal(v7727; name=nothing, seed=nothing, seed2=nothing, dtype=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RandomStandardNormal") 
                    begin  
                        begin  
                            v7727 = convert(TensorFlow.Tensor{Any}, v7727) 
                            begin  
                            end
                        end
                        begin  
                            (v7727,) = tf.tf_promote(v7727)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7727)
                        end
                    end 
                    begin  
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "RandomStandardNormal") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     gather(params, indices; validate_indices=true)

Gather slices from `params` according to `indices`.

`indices` must be an integer tensor of any dimension (usually 0-D or 1-D).
Produces an output tensor with shape `indices.shape + params.shape[1:]` where:

```python
    # Scalar indices
    output[:, ..., :] = params[indices, :, ... :]

    # Vector indices
    output[i, :, ..., :] = params[indices[i], :, ... :]

    # Higher rank indices
    output[i, ..., j, :, ... :] = params[indices[i, ..., j], :, ..., :]
```

If `indices` is a permutation and `len(indices) == params.shape[0]` then
this operation will permute `params` accordingly.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/Gather.png" alt>
</div>
"""
tf.@op function gather(v7728, v7729; name=nothing, validate_indices=nothing, Tparams=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Gather") 
                    begin  
                        begin  
                            v7728 = convert(TensorFlow.Tensor{Any}, v7728) 
                            begin  
                            end
                        end
                        begin  
                            v7729 = convert(TensorFlow.Tensor{Any}, v7729) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7728,) = tf.tf_promote(v7728)
                        end
                        begin  
                            (v7729,) = tf.tf_promote(v7729)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7728)
                        end
                        begin  
                            tf.add_input(desc, v7729)
                        end
                    end 
                    begin  
                        begin  
                            if validate_indices !== nothing 
                                desc["validate_indices"] = Base.Bool(validate_indices)
                            end
                        end
                        begin  
                            if Tparams !== nothing 
                                desc["Tparams"] = Base.identity(Tparams)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "Gather") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     quantized_mat_mul(a, b, min_a, max_a, min_b, max_b; Toutput=?, transpose_a=false, transpose_b=false, Tactivation=?)

Perform a quantized matrix multiplication of  `a` by the matrix `b`.

The inputs must be two-dimensional matrices and the inner dimension of
`a` (after being transposed if `transpose_a` is non-zero) must match the
outer dimension of `b` (after being transposed if `transposed_b` is
non-zero).
"""
tf.@op function quantized_mat_mul(v7730, v7731, v7732, v7733, v7734, v7735; name=nothing, T1=nothing, T2=nothing, Toutput=nothing, transpose_a=nothing, transpose_b=nothing, Tactivation=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedMatMul") 
                    begin  
                        begin  
                            v7730 = convert(TensorFlow.Tensor{Any}, v7730) 
                            begin  
                            end
                        end
                        begin  
                            v7731 = convert(TensorFlow.Tensor{Any}, v7731) 
                            begin  
                            end
                        end
                        begin  
                            v7732 = convert(TensorFlow.Tensor{Any}, v7732) 
                            begin  
                            end
                        end
                        begin  
                            v7733 = convert(TensorFlow.Tensor{Any}, v7733) 
                            begin  
                            end
                        end
                        begin  
                            v7734 = convert(TensorFlow.Tensor{Any}, v7734) 
                            begin  
                            end
                        end
                        begin  
                            v7735 = convert(TensorFlow.Tensor{Any}, v7735) 
                            begin  
                            end
                        end
                        begin  
                            (v7730,) = tf.tf_promote(v7730)
                        end
                        begin  
                            (v7731,) = tf.tf_promote(v7731)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7730)
                        end
                        begin  
                            tf.add_input(desc, v7731)
                        end
                        begin  
                            tf.add_input(desc, v7732)
                        end
                        begin  
                            tf.add_input(desc, v7733)
                        end
                        begin  
                            tf.add_input(desc, v7734)
                        end
                        begin  
                            tf.add_input(desc, v7735)
                        end
                    end 
                    begin  
                        begin  
                            if T1 !== nothing 
                                desc["T1"] = Base.identity(T1)
                            end
                        end
                        begin  
                            if T2 !== nothing 
                                desc["T2"] = Base.identity(T2)
                            end
                        end
                        begin  
                            if Toutput !== nothing 
                                desc["Toutput"] = Base.identity(Toutput)
                            end
                        end
                        begin  
                            if transpose_a !== nothing 
                                desc["transpose_a"] = Base.Bool(transpose_a)
                            end
                        end
                        begin  
                            if transpose_b !== nothing 
                                desc["transpose_b"] = Base.Bool(transpose_b)
                            end
                        end
                        begin  
                            if Tactivation !== nothing 
                                desc["Tactivation"] = Base.identity(Tactivation)
                            end
                        end
                    end
                end), name, "QuantizedMatMul") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     resource_apply_adagrad_da(var, gradient_accumulator, gradient_squared_accumulator, grad, lr, l1, l2, global_step; use_locking=false)

Update '*var' according to the proximal adagrad scheme.


"""
tf.@op function resource_apply_adagrad_da(v7736, v7737, v7738, v7739, v7740, v7741, v7742, v7743; name=nothing, T=nothing, use_locking=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceApplyAdagradDA") 
                    begin  
                        begin  
                            v7736 = convert(TensorFlow.Tensor{Any}, v7736) 
                            begin  
                            end
                        end
                        begin  
                            v7737 = convert(TensorFlow.Tensor{Any}, v7737) 
                            begin  
                            end
                        end
                        begin  
                            v7738 = convert(TensorFlow.Tensor{Any}, v7738) 
                            begin  
                            end
                        end
                        begin  
                            v7739 = convert(TensorFlow.Tensor{Any}, v7739) 
                            begin  
                            end
                        end
                        begin  
                            v7740 = convert(TensorFlow.Tensor{Any}, v7740) 
                            begin  
                            end
                        end
                        begin  
                            v7741 = convert(TensorFlow.Tensor{Any}, v7741) 
                            begin  
                            end
                        end
                        begin  
                            v7742 = convert(TensorFlow.Tensor{Any}, v7742) 
                            begin  
                            end
                        end
                        begin  
                            v7743 = convert(TensorFlow.Tensor{Any}, v7743) 
                            begin  
                            end
                        end
                        begin  
                            (v7739, v7740, v7741, v7742) = tf.tf_promote(v7739, v7740, v7741, v7742)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7736)
                        end
                        begin  
                            tf.add_input(desc, v7737)
                        end
                        begin  
                            tf.add_input(desc, v7738)
                        end
                        begin  
                            tf.add_input(desc, v7739)
                        end
                        begin  
                            tf.add_input(desc, v7740)
                        end
                        begin  
                            tf.add_input(desc, v7741)
                        end
                        begin  
                            tf.add_input(desc, v7742)
                        end
                        begin  
                            tf.add_input(desc, v7743)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                    end
                end), name, "ResourceApplyAdagradDA") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     accumulator_apply_gradient(handle, local_step, gradient)

Applies a gradient to a given accumulator. Does not add if local_step is lesser

than the accumulator's global_step.
"""
tf.@op function accumulator_apply_gradient(v7744, v7745, v7746; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("AccumulatorApplyGradient") 
                    begin  
                        begin  
                            v7744 = convert(TensorFlow.Tensor{Any}, v7744) 
                            begin  
                            end
                        end
                        begin  
                            v7745 = convert(TensorFlow.Tensor{Any}, v7745) 
                            begin  
                            end
                        end
                        begin  
                            v7746 = convert(TensorFlow.Tensor{Any}, v7746) 
                            begin  
                            end
                        end
                        begin  
                            (v7746,) = tf.tf_promote(v7746)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7744)
                        end
                        begin  
                            tf.add_input(desc, v7745)
                        end
                        begin  
                            tf.add_input(desc, v7746)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "AccumulatorApplyGradient") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     squeeze(input; squeeze_dims=Int64[])

Removes dimensions of size 1 from the shape of a tensor.

Given a tensor `input`, this operation returns a tensor of the same type with
all dimensions of size 1 removed. If you don't want to remove all size 1
dimensions, you can remove specific size 1 dimensions by specifying
`squeeze_dims`.

For example:

```prettyprint
# 't' is a tensor of shape [1, 2, 1, 3, 1, 1]
shape(squeeze(t)) ==> [2, 3]
```

Or, to remove specific size 1 dimensions:

```prettyprint
# 't' is a tensor of shape [1, 2, 1, 3, 1, 1]
shape(squeeze(t, [2, 4])) ==> [1, 2, 3, 1]
```
"""
tf.@op function squeeze(v7747; name=nothing, T=nothing, squeeze_dims=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Squeeze") 
                    begin  
                        begin  
                            v7747 = convert(TensorFlow.Tensor{Any}, v7747) 
                            begin  
                            end
                        end
                        begin  
                            (v7747,) = tf.tf_promote(v7747)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7747)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if squeeze_dims !== nothing 
                                desc["squeeze_dims"] = Base.identity.squeeze_dims
                            end
                        end
                    end
                end), name, "Squeeze") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sdca_optimizer(sparse_example_indices, sparse_feature_indices, sparse_feature_values, dense_features, example_weights, example_labels, sparse_indices, sparse_weights, dense_weights, example_state_data; adaptative=false)

Distributed version of Stochastic Dual Coordinate Ascent (SDCA) optimizer for

linear models with L1 + L2 regularization. As global optimization objective is
strongly-convex, the optimizer optimizes the dual objective at each step. The
optimizer applies each update one example at a time. Examples are sampled
uniformly, and the optimizer is learning rate free and enjoys linear convergence
rate.

Proximal Stochastic Dual Coordinate Ascent, Shalev-Shwartz, Shai; Zhang, Tong.
2012 arXiv1211.2717S: http://arxiv.org/pdf/1211.2717v1.pdf

  Loss objective = \sum f_{i}(wx_{i}) + (l2 / 2) * |w|^2 + l1 * |w|

Adding vs. Averaging in Distributed Primal-Dual Optimization.
Chenxin Ma, Virginia Smith, Martin Jaggi, Michael I. Jordan, Peter Richtarik,
Martin Takac http://arxiv.org/abs/1502.03508

Stochastic Dual Coordinate Ascent with Adaptive Probabilities
Dominik Csiba, Zheng Qu, Peter Richtarik https://arxiv.org/abs/1502.08053
"""
tf.@op function sdca_optimizer(v7748, v7749, v7750, v7751, v7752, v7753, v7754, v7755, v7756, v7757; name=nothing, loss_type=nothing, adaptative=nothing, num_sparse_features=nothing, num_sparse_features_with_values=nothing, num_dense_features=nothing, l1=nothing, l2=nothing, num_loss_partitions=nothing, num_inner_iterations=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SdcaOptimizer") 
                    begin  
                        begin  
                            v7748 = convert.(TensorFlow.Tensor{Any}, v7748) 
                            begin  
                            end
                        end
                        begin  
                            v7749 = convert.(TensorFlow.Tensor{Any}, v7749) 
                            begin  
                            end
                        end
                        begin  
                            v7750 = convert.(TensorFlow.Tensor{Any}, v7750) 
                            begin  
                            end
                        end
                        begin  
                            v7751 = convert.(TensorFlow.Tensor{Any}, v7751) 
                            begin  
                            end
                        end
                        begin  
                            v7752 = convert(TensorFlow.Tensor{Any}, v7752) 
                            begin  
                            end
                        end
                        begin  
                            v7753 = convert(TensorFlow.Tensor{Any}, v7753) 
                            begin  
                            end
                        end
                        begin  
                            v7754 = convert.(TensorFlow.Tensor{Any}, v7754) 
                            begin  
                            end
                        end
                        begin  
                            v7755 = convert.(TensorFlow.Tensor{Any}, v7755) 
                            begin  
                            end
                        end
                        begin  
                            v7756 = convert.(TensorFlow.Tensor{Any}, v7756) 
                            begin  
                            end
                        end
                        begin  
                            v7757 = convert(TensorFlow.Tensor{Any}, v7757) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7748)
                        end
                        begin  
                            tf.add_input(desc, v7749)
                        end
                        begin  
                            tf.add_input(desc, v7750)
                        end
                        begin  
                            tf.add_input(desc, v7751)
                        end
                        begin  
                            tf.add_input(desc, v7752)
                        end
                        begin  
                            tf.add_input(desc, v7753)
                        end
                        begin  
                            tf.add_input(desc, v7754)
                        end
                        begin  
                            tf.add_input(desc, v7755)
                        end
                        begin  
                            tf.add_input(desc, v7756)
                        end
                        begin  
                            tf.add_input(desc, v7757)
                        end
                    end 
                    begin  
                        begin  
                            if loss_type !== nothing 
                                desc["loss_type"] = Base.String(loss_type)
                            end
                        end
                        begin  
                            if adaptative !== nothing 
                                desc["adaptative"] = Base.Bool(adaptative)
                            end
                        end
                        begin  
                            if num_sparse_features !== nothing 
                                desc["num_sparse_features"] = Base.Int(num_sparse_features)
                            end
                        end
                        begin  
                            if num_sparse_features_with_values !== nothing 
                                desc["num_sparse_features_with_values"] = Base.Int(num_sparse_features_with_values)
                            end
                        end
                        begin  
                            if num_dense_features !== nothing 
                                desc["num_dense_features"] = Base.Int(num_dense_features)
                            end
                        end
                        begin  
                            if l1 !== nothing 
                                desc["l1"] = Base.identity(l1)
                            end
                        end
                        begin  
                            if l2 !== nothing 
                                desc["l2"] = Base.identity(l2)
                            end
                        end
                        begin  
                            if num_loss_partitions !== nothing 
                                desc["num_loss_partitions"] = Base.Int(num_loss_partitions)
                            end
                        end
                        begin  
                            if num_inner_iterations !== nothing 
                                desc["num_inner_iterations"] = Base.Int(num_inner_iterations)
                            end
                        end
                    end
                end), name, "SdcaOptimizer") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     matrix_diag_part(input)

Returns the batched diagonal part of a batched tensor.

This operation returns a tensor with the `diagonal` part
of the batched `input`. The `diagonal` part is computed as follows:

Assume `input` has `k` dimensions `[I, J, K, ..., M, N]`, then the output is a
tensor of rank `k - 1` with dimensions `[I, J, K, ..., min(M, N)]` where:

`diagonal[i, j, k, ..., n] = input[i, j, k, ..., n, n]`.

The input must be at least a matrix.

For example:

```prettyprint
# 'input' is [[[1, 0, 0, 0]
               [0, 2, 0, 0]
               [0, 0, 3, 0]
               [0, 0, 0, 4]],
              [[5, 0, 0, 0]
               [0, 6, 0, 0]
               [0, 0, 7, 0]
               [0, 0, 0, 8]]]

and input.shape = (2, 4, 4)

tf.matrix_diag_part(input) ==> [[1, 2, 3, 4], [5, 6, 7, 8]]

which has shape (2, 4)
```
"""
tf.@op function matrix_diag_part(v7758; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MatrixDiagPart") 
                    begin  
                        begin  
                            v7758 = convert(TensorFlow.Tensor{Any}, v7758) 
                            begin  
                            end
                        end
                        begin  
                            (v7758,) = tf.tf_promote(v7758)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7758)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "MatrixDiagPart") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     no_op()

Does nothing. Only useful as a placeholder for control edges.


"""
tf.@op function no_op(; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("NoOp") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                    end
                end), name, "NoOp") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     quantized_conv_2d(input, filter, min_input, max_input, min_filter, max_filter; out_type=?)

Computes a 2D convolution given quantized 4D input and filter tensors.

The inputs are quantized tensors where the lowest value represents the real
number of the associated minimum, and the highest represents the maximum.
This means that you can only interpret the quantized output in the same way, by
taking the returned minimum and maximum values into account.
"""
tf.@op function quantized_conv_2d(v7759, v7760, v7761, v7762, v7763, v7764; name=nothing, Tinput=nothing, Tfilter=nothing, out_type=nothing, strides=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedConv2D") 
                    begin  
                        begin  
                            v7759 = convert(TensorFlow.Tensor{Any}, v7759) 
                            begin  
                            end
                        end
                        begin  
                            v7760 = convert(TensorFlow.Tensor{Any}, v7760) 
                            begin  
                            end
                        end
                        begin  
                            v7761 = convert(TensorFlow.Tensor{Any}, v7761) 
                            begin  
                            end
                        end
                        begin  
                            v7762 = convert(TensorFlow.Tensor{Any}, v7762) 
                            begin  
                            end
                        end
                        begin  
                            v7763 = convert(TensorFlow.Tensor{Any}, v7763) 
                            begin  
                            end
                        end
                        begin  
                            v7764 = convert(TensorFlow.Tensor{Any}, v7764) 
                            begin  
                            end
                        end
                        begin  
                            (v7760,) = tf.tf_promote(v7760)
                        end
                        begin  
                            (v7759,) = tf.tf_promote(v7759)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7759)
                        end
                        begin  
                            tf.add_input(desc, v7760)
                        end
                        begin  
                            tf.add_input(desc, v7761)
                        end
                        begin  
                            tf.add_input(desc, v7762)
                        end
                        begin  
                            tf.add_input(desc, v7763)
                        end
                        begin  
                            tf.add_input(desc, v7764)
                        end
                    end 
                    begin  
                        begin  
                            if Tinput !== nothing 
                                desc["Tinput"] = Base.identity(Tinput)
                            end
                        end
                        begin  
                            if Tfilter !== nothing 
                                desc["Tfilter"] = Base.identity(Tfilter)
                            end
                        end
                        begin  
                            if out_type !== nothing 
                                desc["out_type"] = Base.identity(out_type)
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "QuantizedConv2D") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     identity_reader_v2(; container=, shared_name=)

A Reader that outputs the queued work as both the key and value.

To use, enqueue strings in a Queue.  ReaderRead will take the front
work string and output (work, work).
"""
tf.@op function identity_reader_v2(; name=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("IdentityReaderV2") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "IdentityReaderV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     zeta(x, q)

Compute the Hurwitz zeta function \\(\zeta(x, q)\\).

The Hurwitz zeta function is defined as:

```
\zeta(x, q) = \sum_{n=0}^{\infty} (q + n)^{-x}
```
"""
tf.@op function zeta(v7765, v7766; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Zeta") 
                    begin  
                        begin  
                            v7765 = convert(TensorFlow.Tensor{Any}, v7765) 
                            begin  
                            end
                        end
                        begin  
                            v7766 = convert(TensorFlow.Tensor{Any}, v7766) 
                            begin  
                            end
                        end
                        begin  
                            (v7765, v7766) = tf.tf_promote(v7765, v7766)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7765)
                        end
                        begin  
                            tf.add_input(desc, v7766)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Zeta") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     reader_num_work_units_completed_v2(reader_handle)

Returns the number of work units this Reader has finished processing.


"""
tf.@op function reader_num_work_units_completed_v2(v7767; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ReaderNumWorkUnitsCompletedV2") 
                    begin  
                        begin  
                            v7767 = convert(TensorFlow.Tensor{Any}, v7767) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7767)
                        end
                    end 
                    begin  
                    end
                end), name, "ReaderNumWorkUnitsCompletedV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     resource_apply_momentum(var, accum, lr, grad, momentum; use_locking=false, use_nesterov=false)

Update '*var' according to the momentum scheme. Set use_nesterov = True if you

want to use Nesterov momentum.

accum = accum * momentum + grad
var -= lr * accum
"""
tf.@op function resource_apply_momentum(v7768, v7769, v7770, v7771, v7772; name=nothing, T=nothing, use_locking=nothing, use_nesterov=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("ResourceApplyMomentum") 
                    begin  
                        begin  
                            v7768 = convert(TensorFlow.Tensor{Any}, v7768) 
                            begin  
                            end
                        end
                        begin  
                            v7769 = convert(TensorFlow.Tensor{Any}, v7769) 
                            begin  
                            end
                        end
                        begin  
                            v7770 = convert(TensorFlow.Tensor{Any}, v7770) 
                            begin  
                            end
                        end
                        begin  
                            v7771 = convert(TensorFlow.Tensor{Any}, v7771) 
                            begin  
                            end
                        end
                        begin  
                            v7772 = convert(TensorFlow.Tensor{Any}, v7772) 
                            begin  
                            end
                        end
                        begin  
                            (v7770, v7771, v7772) = tf.tf_promote(v7770, v7771, v7772)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7768)
                        end
                        begin  
                            tf.add_input(desc, v7769)
                        end
                        begin  
                            tf.add_input(desc, v7770)
                        end
                        begin  
                            tf.add_input(desc, v7771)
                        end
                        begin  
                            tf.add_input(desc, v7772)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if use_locking !== nothing 
                                desc["use_locking"] = Base.Bool(use_locking)
                            end
                        end
                        begin  
                            if use_nesterov !== nothing 
                                desc["use_nesterov"] = Base.Bool(use_nesterov)
                            end
                        end
                    end
                end), name, "ResourceApplyMomentum") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     log_1p(x)

Computes natural logarithm of (1 + x) element-wise.

I.e., \\(y = \log_e (1 + x)\\).
"""
tf.@op function log_1p(v7773; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Log1p") 
                    begin  
                        begin  
                            v7773 = convert(TensorFlow.Tensor{Any}, v7773) 
                            begin  
                            end
                        end
                        begin  
                            (v7773,) = tf.tf_promote(v7773)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7773)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Log1p") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_to_dense(sparse_indices, output_shape, sparse_values, default_value; validate_indices=true)

Converts a sparse representation into a dense tensor.

Builds an array `dense` with shape `output_shape` such that

```prettyprint
# If sparse_indices is scalar
dense[i] = (i == sparse_indices ? sparse_values : default_value)

# If sparse_indices is a vector, then for each i
dense[sparse_indices[i]] = sparse_values[i]

# If sparse_indices is an n by d matrix, then for each i in [0, n)
dense[sparse_indices[i][0], ..., sparse_indices[i][d-1]] = sparse_values[i]
```

All other values in `dense` are set to `default_value`.  If `sparse_values` is a
scalar, all sparse indices are set to this single value.

Indices should be sorted in lexicographic order, and indices must not
contain any repeats. If `validate_indices` is true, these properties
are checked during execution.
"""
tf.@op function sparse_to_dense(v7774, v7775, v7776, v7777; name=nothing, validate_indices=nothing, T=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseToDense") 
                    begin  
                        begin  
                            v7774 = convert(TensorFlow.Tensor{Any}, v7774) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7775 = convert(TensorFlow.Tensor{Any}, v7775) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7776 = convert(TensorFlow.Tensor{Any}, v7776) 
                            begin  
                            end
                        end
                        begin  
                            v7777 = convert(TensorFlow.Tensor{Any}, v7777) 
                            begin  
                            end
                        end
                        begin  
                            (v7776, v7777) = tf.tf_promote(v7776, v7777)
                        end
                        begin  
                            (v7774, v7775) = tf.tf_promote(v7774, v7775)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7774)
                        end
                        begin  
                            tf.add_input(desc, v7775)
                        end
                        begin  
                            tf.add_input(desc, v7776)
                        end
                        begin  
                            tf.add_input(desc, v7777)
                        end
                    end 
                    begin  
                        begin  
                            if validate_indices !== nothing 
                                desc["validate_indices"] = Base.Bool(validate_indices)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "SparseToDense") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sample_distorted_bounding_box(image_size, bounding_boxes; seed=0, seed2=0, min_object_covered=nothing, aspect_ratio_range=Int64[], area_range=Int64[], max_attempts=100, use_image_if_no_bounding_boxes=false)

Generate a single randomly distorted bounding box for an image.

Bounding box annotations are often supplied in addition to ground-truth labels
in image recognition or object localization tasks. A common technique for
training such a system is to randomly distort an image while preserving
its content, i.e. *data augmentation*. This Op outputs a randomly distorted
localization of an object, i.e. bounding box, given an `image_size`,
`bounding_boxes` and a series of constraints.

The output of this Op is a single bounding box that may be used to crop the
original image. The output is returned as 3 tensors: `begin`, `size` and
`bboxes`. The first 2 tensors can be fed directly into `tf.slice` to crop the
image. The latter may be supplied to `tf.image.draw_bounding_boxes` to visualize
what the bounding box looks like.

Bounding boxes are supplied and returned as `[y_min, x_min, y_max, x_max]`. The
bounding box coordinates are floats in `[0.0, 1.0]` relative to the width and
height of the underlying image.

For example,

```python
    # Generate a single distorted bounding box.
    begin, size, bbox_for_draw = tf.image.sample_distorted_bounding_box(
        tf.shape(image),
        bounding_boxes=bounding_boxes)

    # Draw the bounding box in an image summary.
    image_with_box = tf.image.draw_bounding_boxes(tf.expand_dims(image, 0),
                                                  bbox_for_draw)
    tf.image_summary('images_with_box', image_with_box)

    # Employ the bounding box to distort the image.
    distorted_image = tf.slice(image, begin, size)
```

Note that if no bounding box information is available, setting
`use_image_if_no_bounding_boxes = true` will assume there is a single implicit
bounding box covering the whole image. If `use_image_if_no_bounding_boxes` is
false and no bounding boxes are supplied, an error is raised.
"""
tf.@op function sample_distorted_bounding_box(v7778, v7779; name=nothing, T=nothing, seed=nothing, seed2=nothing, min_object_covered=nothing, aspect_ratio_range=nothing, area_range=nothing, max_attempts=nothing, use_image_if_no_bounding_boxes=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SampleDistortedBoundingBox") 
                    begin  
                        begin  
                            v7778 = convert(TensorFlow.Tensor{Any}, v7778) 
                            begin  
                            end
                        end
                        begin  
                            v7779 = convert(TensorFlow.Tensor{Any}, v7779) 
                            begin  
                            end
                        end
                        begin  
                            (v7778,) = tf.tf_promote(v7778)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7778)
                        end
                        begin  
                            tf.add_input(desc, v7779)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if seed !== nothing 
                                desc["seed"] = Base.Int(seed)
                            end
                        end
                        begin  
                            if seed2 !== nothing 
                                desc["seed2"] = Base.Int(seed2)
                            end
                        end
                        begin  
                            if min_object_covered !== nothing 
                                desc["min_object_covered"] = Base.identity(min_object_covered)
                            end
                        end
                        begin  
                            if aspect_ratio_range !== nothing 
                                desc["aspect_ratio_range"] = Base.identity.aspect_ratio_range
                            end
                        end
                        begin  
                            if area_range !== nothing 
                                desc["area_range"] = Base.identity.area_range
                            end
                        end
                        begin  
                            if max_attempts !== nothing 
                                desc["max_attempts"] = Base.Int(max_attempts)
                            end
                        end
                        begin  
                            if use_image_if_no_bounding_boxes !== nothing 
                                desc["use_image_if_no_bounding_boxes"] = Base.Bool(use_image_if_no_bounding_boxes)
                            end
                        end
                    end
                end), name, "SampleDistortedBoundingBox") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     tensor_array_split_v3(handle, value, lengths, flow_in)

Split the data from the input value into TensorArray elements.

Assuming that `lengths` takes on values

  ```(n0, n1, ..., n(T-1))```

and that `value` has shape

  ```(n0 + n1 + ... + n(T-1) x d0 x d1 x ...)```,

this splits values into a TensorArray with T tensors.

TensorArray index t will be the subtensor of values with starting position

  ```(n0 + n1 + ... + n(t-1), 0, 0, ...)```

and having size

  ```nt x d0 x d1 x ...```
"""
tf.@op function tensor_array_split_v3(v7780, v7781, v7782, v7783; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArraySplitV3") 
                    begin  
                        begin  
                            v7780 = convert(TensorFlow.Tensor{Any}, v7780) 
                            begin  
                            end
                        end
                        begin  
                            v7781 = convert(TensorFlow.Tensor{Any}, v7781) 
                            begin  
                            end
                        end
                        begin  
                            v7782 = convert(TensorFlow.Tensor{Any}, v7782) 
                            begin  
                            end
                        end
                        begin  
                            v7783 = convert(TensorFlow.Tensor{Any}, v7783) 
                            begin  
                            end
                        end
                        begin  
                            (v7781,) = tf.tf_promote(v7781)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7780)
                        end
                        begin  
                            tf.add_input(desc, v7781)
                        end
                        begin  
                            tf.add_input(desc, v7782)
                        end
                        begin  
                            tf.add_input(desc, v7783)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TensorArraySplitV3") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sdca_shrink_l_1(weights)

Applies L1 regularization shrink step on the parameters.


"""
tf.@op function sdca_shrink_l_1(v7784; name=nothing, num_features=nothing, l1=nothing, l2=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SdcaShrinkL1") 
                    begin  
                        begin  
                            v7784 = convert.(TensorFlow.Tensor{Any}, v7784) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7784)
                        end
                    end 
                    begin  
                        begin  
                            if num_features !== nothing 
                                desc["num_features"] = Base.Int(num_features)
                            end
                        end
                        begin  
                            if l1 !== nothing 
                                desc["l1"] = Base.identity(l1)
                            end
                        end
                        begin  
                            if l2 !== nothing 
                                desc["l2"] = Base.identity(l2)
                            end
                        end
                    end
                end), name, "SdcaShrinkL1") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     tfr_reader_v2(; container=, shared_name=, compression_type=)

A Reader that outputs the records from a TensorFlow Records file.


"""
tf.@op function tfr_reader_v2(; name=nothing, container=nothing, shared_name=nothing, compression_type=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TFRecordReaderV2") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                        begin  
                            if compression_type !== nothing 
                                desc["compression_type"] = Base.String(compression_type)
                            end
                        end
                    end
                end), name, "TFRecordReaderV2") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     stack_close(handle)

Delete the stack from its resource container.


"""
tf.@op function stack_close(v7785; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("StackClose") 
                    begin  
                        begin  
                            v7785 = convert(TensorFlow.Tensor{Any}, v7785) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7785)
                        end
                    end 
                    begin  
                    end
                end), name, "StackClose") 
        begin  
            op = tf.Operation(desc) 
            ()
        end
    end

"""
     mirror_pad_grad(input, paddings; Tpaddings=Int32)

Gradient op for `MirrorPad` op. This op folds a mirror-padded tensor.

This operation folds the padded areas of `input` by `MirrorPad` according to the
`paddings` you specify. `paddings` must be the same as `paddings` argument
given to the corresponding `MirrorPad` op.

The folded size of each dimension D of the output is:

`input.dim_size(D) - paddings(D, 0) - paddings(D, 1)`

For example:

```prettyprint
# 't' is [[1, 2, 3], [4, 5, 6], [7, 8, 9]].
# 'paddings' is [[0, 1]], [0, 1]].
# 'mode' is SYMMETRIC.
# rank of 't' is 2.
pad(t, paddings) ==> [[ 1,  5]
                      [11, 28]]
```
"""
tf.@op function mirror_pad_grad(v7786, v7787; name=nothing, T=nothing, Tpaddings=nothing, mode=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("MirrorPadGrad") 
                    begin  
                        begin  
                            v7786 = convert(TensorFlow.Tensor{Any}, v7786) 
                            begin  
                            end
                        end
                        begin  
                            v7787 = convert(TensorFlow.Tensor{Int32}, v7787) 
                            begin  
                            end
                        end
                        begin  
                            (v7786,) = tf.tf_promote(v7786)
                        end
                        begin  
                            (v7787,) = tf.tf_promote(v7787)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7786)
                        end
                        begin  
                            tf.add_input(desc, v7787)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tpaddings !== nothing 
                                desc["Tpaddings"] = Base.identity(Tpaddings)
                            end
                        end
                        begin  
                            if mode !== nothing 
                                desc["mode"] = Base.String(mode)
                            end
                        end
                    end
                end), name, "MirrorPadGrad") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     broadcast_args(s0, s1; T=Int32)

Return the shape of s0 op s1 with broadcast.

Given `s0` and `s1`, tensors that represent shapes, compute `r0`, the
broadcasted shape. `s0`, `s1` and `r0` are all integer vectors.
"""
tf.@op function broadcast_args(v7788, v7789; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BroadcastArgs") 
                    begin  
                        begin  
                            v7788 = convert(TensorFlow.Tensor{Int32}, v7788) 
                            begin  
                            end
                        end
                        begin  
                            v7789 = convert(TensorFlow.Tensor{Int32}, v7789) 
                            begin  
                            end
                        end
                        begin  
                            (v7788, v7789) = tf.tf_promote(v7788, v7789)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7788)
                        end
                        begin  
                            tf.add_input(desc, v7789)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "BroadcastArgs") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     deserialize_many_sparse(serialized_sparse)

Deserialize and concatenate `SparseTensors` from a serialized minibatch.

The input `serialized_sparse` must be a string matrix of shape `[N x 3]` where
`N` is the minibatch size and the rows correspond to packed outputs of
`SerializeSparse`.  The ranks of the original `SparseTensor` objects
must all match.  When the final `SparseTensor` is created, it has rank one
higher than the ranks of the incoming `SparseTensor` objects
(they have been concatenated along a new row dimension).

The output `SparseTensor` object's shape values for all dimensions but the
first are the max across the input `SparseTensor` objects' shape values
for the corresponding dimensions.  Its first shape value is `N`, the minibatch
size.

The input `SparseTensor` objects' indices are assumed ordered in
standard lexicographic order.  If this is not the case, after this
step run `SparseReorder` to restore index ordering.

For example, if the serialized input is a `[2 x 3]` matrix representing two
original `SparseTensor` objects:

    index = [ 0]
            [10]
            [20]
    values = [1, 2, 3]
    shape = [50]

and

    index = [ 2]
            [10]
    values = [4, 5]
    shape = [30]

then the final deserialized `SparseTensor` will be:

    index = [0  0]
            [0 10]
            [0 20]
            [1  2]
            [1 10]
    values = [1, 2, 3, 4, 5]
    shape = [2 50]
"""
tf.@op function deserialize_many_sparse(v7790; name=nothing, dtype=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("DeserializeManySparse") 
                    begin  
                        begin  
                            v7790 = convert(TensorFlow.Tensor{Any}, v7790) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7790)
                        end
                    end 
                    begin  
                        begin  
                            if dtype !== nothing 
                                desc["dtype"] = Base.identity(dtype)
                            end
                        end
                    end
                end), name, "DeserializeManySparse") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     tensor_array_size(handle, flow_in)




"""
tf.@op function tensor_array_size(v7791, v7792; name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorArraySize") 
                    begin  
                        begin  
                            v7791 = convert(TensorFlow.Tensor{Any}, v7791) 
                            begin  
                            end
                        end
                        begin  
                            v7792 = convert(TensorFlow.Tensor{Any}, v7792) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7791)
                        end
                        begin  
                            tf.add_input(desc, v7792)
                        end
                    end 
                    begin  
                    end
                end), name, "TensorArraySize") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     segment_max(data, segment_ids)

Computes the maximum along segments of a tensor.

Read [the section on Segmentation](../../api_docs/python/math_ops.md#segmentation)
for an explanation of segments.

Computes a tensor such that
\\(output_i = \max_j(data_j)\\) where `max` is over `j` such
that `segment_ids[j] == i`.

If the max is empty for a given segment ID `i`, `output[i] = 0`.

<div style="width:70%; margin:auto; margin-bottom:10px; margin-top:20px;">
<img style="width:100%" src="../../images/SegmentMax.png" alt>
</div>
"""
tf.@op function segment_max(v7793, v7794; name=nothing, T=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SegmentMax") 
                    begin  
                        begin  
                            v7793 = convert(TensorFlow.Tensor{Any}, v7793) 
                            begin  
                            end
                        end
                        begin  
                            v7794 = convert(TensorFlow.Tensor{Any}, v7794) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7793,) = tf.tf_promote(v7793)
                        end
                        begin  
                            (v7794,) = tf.tf_promote(v7794)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7793)
                        end
                        begin  
                            tf.add_input(desc, v7794)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "SegmentMax") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     range(start, limit, delta; Tidx=Int32)

Creates a sequence of numbers.

This operation creates a sequence of numbers that begins at `start` and
extends by increments of `delta` up to but not including `limit`.

For example:

```
# 'start' is 3
# 'limit' is 18
# 'delta' is 3
tf.range(start, limit, delta) ==> [3, 6, 9, 12, 15]
```
"""
tf.@op function range(v7795, v7796, v7797; name=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Range") 
                    begin  
                        begin  
                            v7795 = convert(TensorFlow.Tensor{Int32}, v7795) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7796 = convert(TensorFlow.Tensor{Int32}, v7796) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7797 = convert(TensorFlow.Tensor{Int32}, v7797) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7795, v7796, v7797) = tf.tf_promote(v7795, v7796, v7797)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7795)
                        end
                        begin  
                            tf.add_input(desc, v7796)
                        end
                        begin  
                            tf.add_input(desc, v7797)
                        end
                    end 
                    begin  
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "Range") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     barrier_take_many(handle, num_elements; allow_small_batch=false, wait_for_incomplete=false, timeout_ms=-1)

Takes the given number of completed elements from a barrier.

This operation concatenates completed-element component tensors along
the 0th dimension to make a single component tensor.

Elements come out of the barrier when they are complete, and in the order
in which they were placed into the barrier.  The indices output provides
information about the batch in which each element was originally inserted
into the barrier.
"""
tf.@op function barrier_take_many(v7798, v7799; name=nothing, component_types=nothing, allow_small_batch=nothing, wait_for_incomplete=nothing, timeout_ms=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BarrierTakeMany") 
                    begin  
                        begin  
                            v7798 = convert(TensorFlow.Tensor{Any}, v7798) 
                            begin  
                            end
                        end
                        begin  
                            v7799 = convert(TensorFlow.Tensor{Any}, v7799) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7798)
                        end
                        begin  
                            tf.add_input(desc, v7799)
                        end
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if allow_small_batch !== nothing 
                                desc["allow_small_batch"] = Base.Bool(allow_small_batch)
                            end
                        end
                        begin  
                            if wait_for_incomplete !== nothing 
                                desc["wait_for_incomplete"] = Base.Bool(wait_for_incomplete)
                            end
                        end
                        begin  
                            if timeout_ms !== nothing 
                                desc["timeout_ms"] = Base.Int(timeout_ms)
                            end
                        end
                    end
                end), name, "BarrierTakeMany") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     sparse_to_sparse_set_operation(set1_indices, set1_values, set1_shape, set2_indices, set2_values, set2_shape; validate_indices=true)

Applies set operation along last dimension of 2 `SparseTensor` inputs.

See SetOperationOp::SetOperationFromContext for values of `set_operation`.

If `validate_indices` is `True`, `SparseToSparseSetOperation` validates the
order and range of `set1` and `set2` indices.

Input `set1` is a `SparseTensor` represented by `set1_indices`, `set1_values`,
and `set1_shape`. For `set1` ranked `n`, 1st `n-1` dimensions must be the same
as `set2`. Dimension `n` contains values in a set, duplicates are allowed but
ignored.

Input `set2` is a `SparseTensor` represented by `set2_indices`, `set2_values`,
and `set2_shape`. For `set2` ranked `n`, 1st `n-1` dimensions must be the same
as `set1`. Dimension `n` contains values in a set, duplicates are allowed but
ignored.

If `validate_indices` is `True`, this op validates the order and range of `set1`
and `set2` indices.

Output `result` is a `SparseTensor` represented by `result_indices`,
`result_values`, and `result_shape`. For `set1` and `set2` ranked `n`, this
has rank `n` and the same 1st `n-1` dimensions as `set1` and `set2`. The `nth`
dimension contains the result of `set_operation` applied to the corresponding
`[0...n-1]` dimension of `set`.
"""
tf.@op function sparse_to_sparse_set_operation(v7800, v7801, v7802, v7803, v7804, v7805; name=nothing, set_operation=nothing, validate_indices=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseToSparseSetOperation") 
                    begin  
                        begin  
                            v7800 = convert(TensorFlow.Tensor{Any}, v7800) 
                            begin  
                            end
                        end
                        begin  
                            v7801 = convert(TensorFlow.Tensor{Any}, v7801) 
                            begin  
                            end
                        end
                        begin  
                            v7802 = convert(TensorFlow.Tensor{Any}, v7802) 
                            begin  
                            end
                        end
                        begin  
                            v7803 = convert(TensorFlow.Tensor{Any}, v7803) 
                            begin  
                            end
                        end
                        begin  
                            v7804 = convert(TensorFlow.Tensor{Any}, v7804) 
                            begin  
                            end
                        end
                        begin  
                            v7805 = convert(TensorFlow.Tensor{Any}, v7805) 
                            begin  
                            end
                        end
                        begin  
                            (v7801, v7804) = tf.tf_promote(v7801, v7804)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7800)
                        end
                        begin  
                            tf.add_input(desc, v7801)
                        end
                        begin  
                            tf.add_input(desc, v7802)
                        end
                        begin  
                            tf.add_input(desc, v7803)
                        end
                        begin  
                            tf.add_input(desc, v7804)
                        end
                        begin  
                            tf.add_input(desc, v7805)
                        end
                    end 
                    begin  
                        begin  
                            if set_operation !== nothing 
                                desc["set_operation"] = Base.String(set_operation)
                            end
                        end
                        begin  
                            if validate_indices !== nothing 
                                desc["validate_indices"] = Base.Bool(validate_indices)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "SparseToSparseSetOperation") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     tensor_summary(tensor; description=, labels=Int64[], display_name=)

Outputs a `Summary` protocol buffer with a tensor.


"""
tf.@op function tensor_summary(v7806; name=nothing, T=nothing, description=nothing, labels=nothing, display_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TensorSummary") 
                    begin  
                        begin  
                            v7806 = convert(TensorFlow.Tensor{Any}, v7806) 
                            begin  
                            end
                        end
                        begin  
                            (v7806,) = tf.tf_promote(v7806)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7806)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if description !== nothing 
                                desc["description"] = Base.String(description)
                            end
                        end
                        begin  
                            if labels !== nothing 
                                desc["labels"] = Base.identity.labels
                            end
                        end
                        begin  
                            if display_name !== nothing 
                                desc["display_name"] = Base.String(display_name)
                            end
                        end
                    end
                end), name, "TensorSummary") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     remote_fused_graph_execute(values)

Execute a sub graph on a remote processor transferred by GraphTransferer.

The graph specifications are serialized by protobuf as graph_transfer_info.
The implementation / limitations may differ for each platform
and each available peripheral.
"""
tf.@op function remote_fused_graph_execute(v7807; name=nothing, M=nothing, N=nothing, T=nothing, U=nothing, serialized_graph_transfer_info=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("RemoteFusedGraphExecute") 
                    begin  
                        begin  
                            v7807 = convert.(TensorFlow.Tensor{Any}, v7807) 
                            begin  
                            end
                        end
                        begin  
                            (v7807,) = tf.tf_promote(v7807)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7807)
                        end
                    end 
                    begin  
                        begin  
                            if M !== nothing 
                                desc["M"] = Base.Int(M)
                            end
                        end
                        begin  
                            if N !== nothing 
                                desc["N"] = Base.Int(N)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if U !== nothing 
                                desc["U"] = Base.identity(U)
                            end
                        end
                        begin  
                            if serialized_graph_transfer_info !== nothing 
                                desc["serialized_graph_transfer_info"] = Base.String(serialized_graph_transfer_info)
                            end
                        end
                    end
                end), name, "RemoteFusedGraphExecute") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     sparse_tensor_dense_add(a_indices, a_values, a_shape, b)

Adds up a `SparseTensor` and a dense `Tensor`, producing a dense `Tensor`.

This Op does not require `a_indices` be sorted in standard lexicographic order.
"""
tf.@op function sparse_tensor_dense_add(v7808, v7809, v7810, v7811; name=nothing, T=nothing, Tindices=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("SparseTensorDenseAdd") 
                    begin  
                        begin  
                            v7808 = convert(TensorFlow.Tensor{Any}, v7808) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7809 = convert(TensorFlow.Tensor{Any}, v7809) 
                            begin  
                            end
                        end
                        begin  
                            v7810 = convert(TensorFlow.Tensor{Any}, v7810) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            v7811 = convert(TensorFlow.Tensor{Any}, v7811) 
                            begin  
                            end
                        end
                        begin  
                            (v7809, v7811) = tf.tf_promote(v7809, v7811)
                        end
                        begin  
                            (v7808, v7810) = tf.tf_promote(v7808, v7810)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7808)
                        end
                        begin  
                            tf.add_input(desc, v7809)
                        end
                        begin  
                            tf.add_input(desc, v7810)
                        end
                        begin  
                            tf.add_input(desc, v7811)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tindices !== nothing 
                                desc["Tindices"] = Base.identity(Tindices)
                            end
                        end
                    end
                end), name, "SparseTensorDenseAdd") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     quantized_avg_pool(input, min_input, max_input)

Produces the average pool of the input tensor for quantized types.


"""
tf.@op function quantized_avg_pool(v7812, v7813, v7814; name=nothing, T=nothing, ksize=nothing, strides=nothing, padding=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("QuantizedAvgPool") 
                    begin  
                        begin  
                            v7812 = convert(TensorFlow.Tensor{Any}, v7812) 
                            begin  
                            end
                        end
                        begin  
                            v7813 = convert(TensorFlow.Tensor{Any}, v7813) 
                            begin  
                            end
                        end
                        begin  
                            v7814 = convert(TensorFlow.Tensor{Any}, v7814) 
                            begin  
                            end
                        end
                        begin  
                            (v7812,) = tf.tf_promote(v7812)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7812)
                        end
                        begin  
                            tf.add_input(desc, v7813)
                        end
                        begin  
                            tf.add_input(desc, v7814)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if ksize !== nothing 
                                desc["ksize"] = Base.identity.ksize
                            end
                        end
                        begin  
                            if strides !== nothing 
                                desc["strides"] = Base.identity.strides
                            end
                        end
                        begin  
                            if padding !== nothing 
                                desc["padding"] = Base.String(padding)
                            end
                        end
                    end
                end), name, "QuantizedAvgPool") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3))
        end
    end

"""
     dequantize(input, min_range, max_range; mode=MIN_COMBINED)

Dequantize the 'input' tensor into a float Tensor.

[min_range, max_range] are scalar floats that specify the range for
the 'input' data. The 'mode' attribute controls exactly which calculations are
used to convert the float values to their quantized equivalents.

In 'MIN_COMBINED' mode, each value of the tensor will undergo the following:

```
if T == qint8, in[i] += (range(T) + 1)/ 2.0
out[i] = min_range + (in[i]* (max_range - min_range) / range(T))
```
here `range(T) = numeric_limits<T>::max() - numeric_limits<T>::min()`

*MIN_COMBINED Mode Example*

If the input comes from a QuantizedRelu6, the output type is
quint8 (range of 0-255) but the possible range of QuantizedRelu6 is
0-6.  The min_range and max_range values are therefore 0.0 and 6.0.
Dequantize on quint8 will take each value, cast to float, and multiply
by 6 / 255.
Note that if quantizedtype is qint8, the operation will additionally add
each value by 128 prior to casting.

If the mode is 'MIN_FIRST', then this approach is used:

```
number_of_steps = 1 << (# of bits in T)
range_adjust = number_of_steps / (number_of_steps - 1)
range = (range_max - range_min) * range_adjust
range_scale = range / number_of_steps
const double offset_input = static_cast<double>(input) - lowest_quantized;
result = range_min + ((input - numeric_limits<T>::min()) * range_scale)
```
"""
tf.@op function dequantize(v7815, v7816, v7817; name=nothing, T=nothing, mode=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Dequantize") 
                    begin  
                        begin  
                            v7815 = convert(TensorFlow.Tensor{Any}, v7815) 
                            begin  
                            end
                        end
                        begin  
                            v7816 = convert(TensorFlow.Tensor{Any}, v7816) 
                            begin  
                            end
                        end
                        begin  
                            v7817 = convert(TensorFlow.Tensor{Any}, v7817) 
                            begin  
                            end
                        end
                        begin  
                            (v7815,) = tf.tf_promote(v7815)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7815)
                        end
                        begin  
                            tf.add_input(desc, v7816)
                        end
                        begin  
                            tf.add_input(desc, v7817)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if mode !== nothing 
                                desc["mode"] = Base.String(mode)
                            end
                        end
                    end
                end), name, "Dequantize") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     prevent_gradient(input; message=)

An identity op that triggers an error if a gradient is requested.

When executed in a graph, this op outputs its input tensor as-is.

When building ops to compute gradients, the TensorFlow gradient system
will return an error when trying to lookup the gradient of this op,
because no gradient must ever be registered for this function.  This
op exists to prevent subtle bugs from silently returning unimplemented
gradients in some corner cases.
"""
tf.@op function prevent_gradient(v7818; name=nothing, T=nothing, message=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("PreventGradient") 
                    begin  
                        begin  
                            v7818 = convert(TensorFlow.Tensor{Any}, v7818) 
                            begin  
                            end
                        end
                        begin  
                            (v7818,) = tf.tf_promote(v7818)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7818)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if message !== nothing 
                                desc["message"] = Base.String(message)
                            end
                        end
                    end
                end), name, "PreventGradient") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     cumsum(x, axis; exclusive=false, reverse=false, Tidx=Int32)

Compute the cumulative sum of the tensor `x` along `axis`.

By default, this op performs an inclusive cumsum, which means that the first
element of the input is identical to the first element of the output:
```prettyprint
tf.cumsum([a, b, c]) ==> [a, a + b, a + b + c]
```

By setting the `exclusive` kwarg to `True`, an exclusive cumsum is
performed instead:
```prettyprint
tf.cumsum([a, b, c], exclusive=True) ==> [0, a, a + b]
```

By setting the `reverse` kwarg to `True`, the cumsum is performed in the
opposite direction:
```prettyprint
tf.cumsum([a, b, c], reverse=True) ==> [a + b + c, b + c, c]
```
This is more efficient than using separate `tf.reverse` ops.

The `reverse` and `exclusive` kwargs can also be combined:
```prettyprint
tf.cumsum([a, b, c], exclusive=True, reverse=True) ==> [b + c, c, 0]
```
"""
tf.@op function cumsum(v7819, v7820; name=nothing, exclusive=nothing, reverse=nothing, T=nothing, Tidx=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Cumsum") 
                    begin  
                        begin  
                            v7819 = convert(TensorFlow.Tensor{Any}, v7819) 
                            begin  
                            end
                        end
                        begin  
                            v7820 = convert(TensorFlow.Tensor{Int32}, v7820) 
                            begin  
                                converted = converted - 1
                            end
                        end
                        begin  
                            (v7819,) = tf.tf_promote(v7819)
                        end
                        begin  
                            (v7820,) = tf.tf_promote(v7820)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7819)
                        end
                        begin  
                            tf.add_input(desc, v7820)
                        end
                    end 
                    begin  
                        begin  
                            if exclusive !== nothing 
                                desc["exclusive"] = Base.Bool(exclusive)
                            end
                        end
                        begin  
                            if reverse !== nothing 
                                desc["reverse"] = Base.Bool(reverse)
                            end
                        end
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if Tidx !== nothing 
                                desc["Tidx"] = Base.identity(Tidx)
                            end
                        end
                    end
                end), name, "Cumsum") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     barrier(; shapes=Int64[], capacity=-1, container=, shared_name=)

Defines a barrier that persists across different graph executions.

A barrier represents a key-value map, where each key is a string, and
each value is a tuple of tensors.

At runtime, the barrier contains 'complete' and 'incomplete'
elements. A complete element has defined tensors for all components of
its value tuple, and may be accessed using BarrierTakeMany. An
incomplete element has some undefined components in its value tuple,
and may be updated using BarrierInsertMany.
"""
tf.@op function barrier(; name=nothing, component_types=nothing, shapes=nothing, capacity=nothing, container=nothing, shared_name=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Barrier") 
                    begin  
                    end 
                    begin  
                    end 
                    begin  
                        begin  
                            if component_types !== nothing 
                                desc["component_types"] = Base.identity.component_types
                            end
                        end
                        begin  
                            if shapes !== nothing 
                                desc["shapes"] = Base.identity.shapes
                            end
                        end
                        begin  
                            if capacity !== nothing 
                                desc["capacity"] = Base.Int(capacity)
                            end
                        end
                        begin  
                            if container !== nothing 
                                desc["container"] = Base.String(container)
                            end
                        end
                        begin  
                            if shared_name !== nothing 
                                desc["shared_name"] = Base.String(shared_name)
                            end
                        end
                    end
                end), name, "Barrier") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     div(x, y)

Returns x / y element-wise.

*NOTE*: `Div` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function div(v7821, v7822; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("Div") 
                    begin  
                        begin  
                            v7821 = convert(TensorFlow.Tensor{Any}, v7821) 
                            begin  
                            end
                        end
                        begin  
                            v7822 = convert(TensorFlow.Tensor{Any}, v7822) 
                            begin  
                            end
                        end
                        begin  
                            (v7821, v7822) = tf.tf_promote(v7821, v7822)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7821)
                        end
                        begin  
                            tf.add_input(desc, v7822)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "Div") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     truncate_div(x, y)

Returns x / y element-wise for integer types.

Truncation designates that negative numbers will round fractional quantities
toward zero. I.e. -7 / 5 = 1. This matches C semantics but it is different
than Python semantics. See `FloorDiv` for a division function that matches
Python Semantics.

*NOTE*: `TruncateDiv` supports broadcasting. More about broadcasting
[here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
"""
tf.@op function truncate_div(v7823, v7824; name=nothing, T=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("TruncateDiv") 
                    begin  
                        begin  
                            v7823 = convert(TensorFlow.Tensor{Any}, v7823) 
                            begin  
                            end
                        end
                        begin  
                            v7824 = convert(TensorFlow.Tensor{Any}, v7824) 
                            begin  
                            end
                        end
                        begin  
                            (v7823, v7824) = tf.tf_promote(v7823, v7824)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7823)
                        end
                        begin  
                            tf.add_input(desc, v7824)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                    end
                end), name, "TruncateDiv") 
        tf.Tensor(tf.Operation(desc))
    end

"""
     lookup_table_export(table_handle)

Outputs all keys and values in the table.


"""
tf.@op function lookup_table_export(v7825; name=nothing, Tkeys=nothing, Tvalues=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("LookupTableExport") 
                    begin  
                        begin  
                            v7825 = convert(TensorFlow.Tensor{Any}, v7825) 
                            begin  
                            end
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7825)
                        end
                    end 
                    begin  
                        begin  
                            if Tkeys !== nothing 
                                desc["Tkeys"] = Base.identity(Tkeys)
                            end
                        end
                        begin  
                            if Tvalues !== nothing 
                                desc["Tvalues"] = Base.identity(Tvalues)
                            end
                        end
                    end
                end), name, "LookupTableExport") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2))
        end
    end

"""
     batch_norm_with_global_normalization_grad(t, m, v, gamma, backprop)

Gradients for batch normalization.

This op is deprecated. See `tf.nn.batch_normalization`.
"""
tf.@op function batch_norm_with_global_normalization_grad(v7826, v7827, v7828, v7829, v7830; name=nothing, T=nothing, variance_epsilon=nothing, scale_after_normalization=nothing) 
        local desc 
        tf.with_op_name((()->begin  
                    desc = tf.NodeDescription("BatchNormWithGlobalNormalizationGrad") 
                    begin  
                        begin  
                            v7826 = convert(TensorFlow.Tensor{Any}, v7826) 
                            begin  
                            end
                        end
                        begin  
                            v7827 = convert(TensorFlow.Tensor{Any}, v7827) 
                            begin  
                            end
                        end
                        begin  
                            v7828 = convert(TensorFlow.Tensor{Any}, v7828) 
                            begin  
                            end
                        end
                        begin  
                            v7829 = convert(TensorFlow.Tensor{Any}, v7829) 
                            begin  
                            end
                        end
                        begin  
                            v7830 = convert(TensorFlow.Tensor{Any}, v7830) 
                            begin  
                            end
                        end
                        begin  
                            (v7826, v7827, v7828, v7829, v7830) = tf.tf_promote(v7826, v7827, v7828, v7829, v7830)
                        end
                    end 
                    begin  
                        begin  
                            tf.add_input(desc, v7826)
                        end
                        begin  
                            tf.add_input(desc, v7827)
                        end
                        begin  
                            tf.add_input(desc, v7828)
                        end
                        begin  
                            tf.add_input(desc, v7829)
                        end
                        begin  
                            tf.add_input(desc, v7830)
                        end
                    end 
                    begin  
                        begin  
                            if T !== nothing 
                                desc["T"] = Base.identity(T)
                            end
                        end
                        begin  
                            if variance_epsilon !== nothing 
                                desc["variance_epsilon"] = Base.identity(variance_epsilon)
                            end
                        end
                        begin  
                            if scale_after_normalization !== nothing 
                                desc["scale_after_normalization"] = Base.Bool(scale_after_normalization)
                            end
                        end
                    end
                end), name, "BatchNormWithGlobalNormalizationGrad") 
        begin  
            op = tf.Operation(desc) 
            (tf.Tensor(op, 1), tf.Tensor(op, 2), tf.Tensor(op, 3), tf.Tensor(op, 4), tf.Tensor(op, 5))
        end
    end

end
