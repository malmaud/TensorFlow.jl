# Autogenerated on 2018-08-22T19:25:49.359

module Ops
import TensorFlow
const tf = TensorFlow
"""
     equal(x, y)


"""
tf.@op function equal(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Equal")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "Equal")
        tf.Tensor(tf.Operation(desc))
    end

"""
     not_equal(x, y)


"""
tf.@op function not_equal(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("NotEqual")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "NotEqual")
        tf.Tensor(tf.Operation(desc))
    end

"""
     less_equal(x, y)


"""
tf.@op function less_equal(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("LessEqual")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "LessEqual")
        tf.Tensor(tf.Operation(desc))
    end

"""
     greater(x, y)


"""
tf.@op function greater(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Greater")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "Greater")
        tf.Tensor(tf.Operation(desc))
    end

"""
     greater_equal(x, y)


"""
tf.@op function greater_equal(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("GreaterEqual")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "GreaterEqual")
        tf.Tensor(tf.Operation(desc))
    end

"""
     less(x, y)


"""
tf.@op function less(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Less")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "Less")
        tf.Tensor(tf.Operation(desc))
    end

"""
     no_op()


"""
tf.@op function no_op(; name=nothing)
        local desc
        tf.with_op_name((()->desc = tf.NodeDescription("NoOp")), name, "NoOp")
        tf.Tensor(tf.Operation(desc))
    end

"""
     count_up_to(ref)


"""
tf.@op function count_up_to(ref_; name=nothing, limit=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("CountUpTo")
                    ref_ = convert(TensorFlow.Tensor{Any}, ref_)
                    (ref_,) = tf.tf_promote(ref_)
                    tf.add_input(desc, ref_)
                    if limit !== nothing
                        desc["limit"] = Base.Int(limit)
                    end
                end), name, "CountUpTo")
        tf.Tensor(tf.Operation(desc))
    end

"""
     decode_gif(contents)


"""
tf.@op function decode_gif(contents_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("DecodeGif")
                    contents_ = convert(TensorFlow.Tensor{String}, contents_)
                    tf.add_input(desc, contents_)
                end), name, "DecodeGif")
        tf.Tensor(tf.Operation(desc))
    end

"""
     decode_jpeg(contents; channels=0, ratio=1, fancy_upscaling=true, try_recover_truncated=false, acceptable_fraction=nothing, dct_method=)


"""
tf.@op function decode_jpeg(contents_; name=nothing, channels=nothing, ratio=nothing, fancy_upscaling=nothing, try_recover_truncated=nothing, acceptable_fraction=nothing, dct_method=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("DecodeJpeg")
                    contents_ = convert(TensorFlow.Tensor{String}, contents_)
                    tf.add_input(desc, contents_)
                    if channels !== nothing
                        desc["channels"] = Base.Int(channels)
                    end
                    if ratio !== nothing
                        desc["ratio"] = Base.Int(ratio)
                    end
                    if fancy_upscaling !== nothing
                        desc["fancy_upscaling"] = Base.Bool(fancy_upscaling)
                    end
                    if try_recover_truncated !== nothing
                        desc["try_recover_truncated"] = Base.Bool(try_recover_truncated)
                    end
                    if acceptable_fraction !== nothing
                        desc["acceptable_fraction"] = Base.identity(acceptable_fraction)
                    end
                    if dct_method !== nothing
                        desc["dct_method"] = Base.String(dct_method)
                    end
                end), name, "DecodeJpeg")
        tf.Tensor(tf.Operation(desc))
    end

"""
     encode_jpeg(image; format=, quality=95, progressive=false, optimize_size=false, chroma_downsampling=true, density_unit=in, x_density=300, y_density=300, xmp_metadata=)


"""
tf.@op function encode_jpeg(image_; name=nothing, format=nothing, quality=nothing, progressive=nothing, optimize_size=nothing, chroma_downsampling=nothing, density_unit=nothing, x_density=nothing, y_density=nothing, xmp_metadata=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("EncodeJpeg")
                    image_ = convert(TensorFlow.Tensor{UInt8}, image_)
                    tf.add_input(desc, image_)
                    if format !== nothing
                        desc["format"] = Base.String(format)
                    end
                    if quality !== nothing
                        desc["quality"] = Base.Int(quality)
                    end
                    if progressive !== nothing
                        desc["progressive"] = Base.Bool(progressive)
                    end
                    if optimize_size !== nothing
                        desc["optimize_size"] = Base.Bool(optimize_size)
                    end
                    if chroma_downsampling !== nothing
                        desc["chroma_downsampling"] = Base.Bool(chroma_downsampling)
                    end
                    if density_unit !== nothing
                        desc["density_unit"] = Base.String(density_unit)
                    end
                    if x_density !== nothing
                        desc["x_density"] = Base.Int(x_density)
                    end
                    if y_density !== nothing
                        desc["y_density"] = Base.Int(y_density)
                    end
                    if xmp_metadata !== nothing
                        desc["xmp_metadata"] = Base.String(xmp_metadata)
                    end
                end), name, "EncodeJpeg")
        tf.Tensor(tf.Operation(desc))
    end

"""
     encode_png(image; compression=-1)


"""
tf.@op function encode_png(image_; name=nothing, compression=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("EncodePng")
                    image_ = convert(TensorFlow.Tensor{UInt8}, image_)
                    (image_,) = tf.tf_promote(image_)
                    tf.add_input(desc, image_)
                    if compression !== nothing
                        desc["compression"] = Base.Int(compression)
                    end
                end), name, "EncodePng")
        tf.Tensor(tf.Operation(desc))
    end

"""
     resize_area(images, size; align_corners=false)


"""
tf.@op function resize_area(images_, size_; name=nothing, align_corners=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ResizeArea")
                    images_ = convert(TensorFlow.Tensor{Any}, images_)
                    size_ = convert(TensorFlow.Tensor{Int32}, size_)
                    (images_,) = tf.tf_promote(images_)
                    tf.add_input(desc, images_)
                    tf.add_input(desc, size_)
                    if align_corners !== nothing
                        desc["align_corners"] = Base.Bool(align_corners)
                    end
                end), name, "ResizeArea")
        tf.Tensor(tf.Operation(desc))
    end

"""
     resize_bicubic(images, size; align_corners=false)


"""
tf.@op function resize_bicubic(images_, size_; name=nothing, align_corners=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ResizeBicubic")
                    images_ = convert(TensorFlow.Tensor{Any}, images_)
                    size_ = convert(TensorFlow.Tensor{Int32}, size_)
                    (images_,) = tf.tf_promote(images_)
                    tf.add_input(desc, images_)
                    tf.add_input(desc, size_)
                    if align_corners !== nothing
                        desc["align_corners"] = Base.Bool(align_corners)
                    end
                end), name, "ResizeBicubic")
        tf.Tensor(tf.Operation(desc))
    end

"""
     resize_bilinear(images, size; align_corners=false)


"""
tf.@op function resize_bilinear(images_, size_; name=nothing, align_corners=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ResizeBilinear")
                    images_ = convert(TensorFlow.Tensor{Any}, images_)
                    size_ = convert(TensorFlow.Tensor{Int32}, size_)
                    (images_,) = tf.tf_promote(images_)
                    tf.add_input(desc, images_)
                    tf.add_input(desc, size_)
                    if align_corners !== nothing
                        desc["align_corners"] = Base.Bool(align_corners)
                    end
                end), name, "ResizeBilinear")
        tf.Tensor(tf.Operation(desc))
    end

"""
     resize_nearest_neighbor(images, size; align_corners=false)


"""
tf.@op function resize_nearest_neighbor(images_, size_; name=nothing, align_corners=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ResizeNearestNeighbor")
                    images_ = convert(TensorFlow.Tensor{Any}, images_)
                    size_ = convert(TensorFlow.Tensor{Int32}, size_)
                    (images_,) = tf.tf_promote(images_)
                    tf.add_input(desc, images_)
                    tf.add_input(desc, size_)
                    if align_corners !== nothing
                        desc["align_corners"] = Base.Bool(align_corners)
                    end
                end), name, "ResizeNearestNeighbor")
        tf.Tensor(tf.Operation(desc))
    end

"""
     extract_glimpse(input, size, offsets; centered=true, normalized=true, uniform_noise=true)


"""
tf.@op function extract_glimpse(input_, size_, offsets_; name=nothing, centered=nothing, normalized=nothing, uniform_noise=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ExtractGlimpse")
                    input_ = convert(TensorFlow.Tensor{Float32}, input_)
                    size_ = convert(TensorFlow.Tensor{Int32}, size_)
                    offsets_ = convert(TensorFlow.Tensor{Float32}, offsets_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, size_)
                    tf.add_input(desc, offsets_)
                    if centered !== nothing
                        desc["centered"] = Base.Bool(centered)
                    end
                    if normalized !== nothing
                        desc["normalized"] = Base.Bool(normalized)
                    end
                    if uniform_noise !== nothing
                        desc["uniform_noise"] = Base.Bool(uniform_noise)
                    end
                end), name, "ExtractGlimpse")
        tf.Tensor(tf.Operation(desc))
    end

"""
     crop_and_resize(image, boxes, box_ind, crop_size; method=bilinear, extrapolation_value=nothing)


"""
tf.@op function crop_and_resize(image_, boxes_, box_ind_, crop_size_; name=nothing, method=nothing, extrapolation_value=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("CropAndResize")
                    image_ = convert(TensorFlow.Tensor{Any}, image_)
                    boxes_ = convert(TensorFlow.Tensor{Float32}, boxes_)
                    box_ind_ = convert(TensorFlow.Tensor{Int32}, box_ind_)
                    crop_size_ = convert(TensorFlow.Tensor{Int32}, crop_size_)
                    (image_,) = tf.tf_promote(image_)
                    tf.add_input(desc, image_)
                    tf.add_input(desc, boxes_)
                    tf.add_input(desc, box_ind_)
                    tf.add_input(desc, crop_size_)
                    if method !== nothing
                        desc["method"] = Base.String(method)
                    end
                    if extrapolation_value !== nothing
                        desc["extrapolation_value"] = Base.identity(extrapolation_value)
                    end
                end), name, "CropAndResize")
        tf.Tensor(tf.Operation(desc))
    end

"""
     adjust_hue(images, delta)


"""
tf.@op function adjust_hue(images_, delta_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("AdjustHue")
                    images_ = convert(TensorFlow.Tensor{Float32}, images_)
                    delta_ = convert(TensorFlow.Tensor{Float32}, delta_)
                    tf.add_input(desc, images_)
                    tf.add_input(desc, delta_)
                end), name, "AdjustHue")
        tf.Tensor(tf.Operation(desc))
    end

"""
     adjust_saturation(images, scale)


"""
tf.@op function adjust_saturation(images_, scale_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("AdjustSaturation")
                    images_ = convert(TensorFlow.Tensor{Float32}, images_)
                    scale_ = convert(TensorFlow.Tensor{Float32}, scale_)
                    tf.add_input(desc, images_)
                    tf.add_input(desc, scale_)
                end), name, "AdjustSaturation")
        tf.Tensor(tf.Operation(desc))
    end

"""
     draw_bounding_boxes(images, boxes)


"""
tf.@op function draw_bounding_boxes(images_, boxes_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("DrawBoundingBoxes")
                    images_ = convert(TensorFlow.Tensor{Float32}, images_)
                    boxes_ = convert(TensorFlow.Tensor{Float32}, boxes_)
                    (images_,) = tf.tf_promote(images_)
                    tf.add_input(desc, images_)
                    tf.add_input(desc, boxes_)
                end), name, "DrawBoundingBoxes")
        tf.Tensor(tf.Operation(desc))
    end

"""
     non_max_suppression(boxes, scores, max_output_size; iou_threshold=nothing)


"""
tf.@op function non_max_suppression(boxes_, scores_, max_output_size_; name=nothing, iou_threshold=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("NonMaxSuppression")
                    boxes_ = convert(TensorFlow.Tensor{Float32}, boxes_)
                    scores_ = convert(TensorFlow.Tensor{Float32}, scores_)
                    max_output_size_ = convert(TensorFlow.Tensor{Int32}, max_output_size_)
                    tf.add_input(desc, boxes_)
                    tf.add_input(desc, scores_)
                    tf.add_input(desc, max_output_size_)
                    if iou_threshold !== nothing
                        desc["iou_threshold"] = Base.identity(iou_threshold)
                    end
                end), name, "NonMaxSuppression")
        tf.Tensor(tf.Operation(desc))
    end

"""
     sample_distorted_bounding_box(image_size, bounding_boxes; seed=0, seed2=0, min_object_covered=nothing, aspect_ratio_range=Int64[], area_range=Int64[], max_attempts=100, use_image_if_no_bounding_boxes=false)


"""
tf.@op function sample_distorted_bounding_box(image_size_, bounding_boxes_; name=nothing, seed=nothing, seed2=nothing, min_object_covered=nothing, aspect_ratio_range=nothing, area_range=nothing, max_attempts=nothing, use_image_if_no_bounding_boxes=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("SampleDistortedBoundingBox")
                    image_size_ = convert(TensorFlow.Tensor{Any}, image_size_)
                    bounding_boxes_ = convert(TensorFlow.Tensor{Float32}, bounding_boxes_)
                    (image_size_,) = tf.tf_promote(image_size_)
                    tf.add_input(desc, image_size_)
                    tf.add_input(desc, bounding_boxes_)
                    if seed !== nothing
                        desc["seed"] = Base.Int(seed)
                    end
                    if seed2 !== nothing
                        desc["seed2"] = Base.Int(seed2)
                    end
                    if min_object_covered !== nothing
                        desc["min_object_covered"] = Base.identity(min_object_covered)
                    end
                    if aspect_ratio_range !== nothing
                        desc["aspect_ratio_range"] = map(Base.identity, aspect_ratio_range)
                    end
                    if area_range !== nothing
                        desc["area_range"] = map(Base.identity, area_range)
                    end
                    if max_attempts !== nothing
                        desc["max_attempts"] = Base.Int(max_attempts)
                    end
                    if use_image_if_no_bounding_boxes !== nothing
                        desc["use_image_if_no_bounding_boxes"] = Base.Bool(use_image_if_no_bounding_boxes)
                    end
                end), name, "SampleDistortedBoundingBox")
        out = tf.Tensor[]
        op = tf.Operation(desc)
        for out_idx = 1:3
            push!(out, tf.Tensor(op, out_idx))
        end
        out
    end

"""
     logical_and(x, y)


"""
tf.@op function logical_and(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("LogicalAnd")
                    x_ = convert(TensorFlow.Tensor{Bool}, x_)
                    y_ = convert(TensorFlow.Tensor{Bool}, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "LogicalAnd")
        tf.Tensor(tf.Operation(desc))
    end

"""
     logical_not(x)


"""
tf.@op function logical_not(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("LogicalNot")
                    x_ = convert(TensorFlow.Tensor{Bool}, x_)
                    tf.add_input(desc, x_)
                end), name, "LogicalNot")
        tf.Tensor(tf.Operation(desc))
    end

"""
     logical_or(x, y)


"""
tf.@op function logical_or(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("LogicalOr")
                    x_ = convert(TensorFlow.Tensor{Bool}, x_)
                    y_ = convert(TensorFlow.Tensor{Bool}, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "LogicalOr")
        tf.Tensor(tf.Operation(desc))
    end

"""
     add_n(inputs)


"""
tf.@op function add_n(inputs_; name=nothing, N=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("AddN")
                    inputs_ = [convert(TensorFlow.Tensor{Any}, x) for x = inputs_]
                    (inputs_,) = tf.tf_promote(inputs_)
                    tf.add_input(desc, inputs_)
                    if N !== nothing
                        desc["N"] = Base.Int(N)
                    end
                end), name, "AddN")
        tf.Tensor(tf.Operation(desc))
    end

"""
     arg_min(input, dimension; output_type=Int64)


"""
tf.@op function arg_min(input_, dimension_; name=nothing, output_type=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ArgMin")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    dimension_ = convert(TensorFlow.Tensor{Int32}, dimension_)
                    dimension_ = dimension_ - convert(tf.Tensor{eltype(dimension_)}, 1)
                    (input_,) = tf.tf_promote(input_)
                    (dimension_,) = tf.tf_promote(dimension_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, dimension_)
                    if output_type !== nothing
                        desc["output_type"] = Base.identity(output_type)
                    end
                end), name, "ArgMin")
        tf.Tensor(tf.Operation(desc))
    end

"""
     arg_max(input, dimension; output_type=Int64)


"""
tf.@op function arg_max(input_, dimension_; name=nothing, output_type=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ArgMax")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    dimension_ = convert(TensorFlow.Tensor{Int32}, dimension_)
                    dimension_ = dimension_ - convert(tf.Tensor{eltype(dimension_)}, 1)
                    (input_,) = tf.tf_promote(input_)
                    (dimension_,) = tf.tf_promote(dimension_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, dimension_)
                    if output_type !== nothing
                        desc["output_type"] = Base.identity(output_type)
                    end
                end), name, "ArgMax")
        tf.Tensor(tf.Operation(desc))
    end

"""
     add(x, y)


"""
tf.@op function add(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Add")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "Add")
        tf.Tensor(tf.Operation(desc))
    end

"""
     sub(x, y)


"""
tf.@op function sub(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Sub")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "Sub")
        tf.Tensor(tf.Operation(desc))
    end

"""
     mat_mul(a, b; transpose_a=false, transpose_b=false)


"""
tf.@op function mat_mul(a_, b_; name=nothing, transpose_a=nothing, transpose_b=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("MatMul")
                    a_ = convert(TensorFlow.Tensor{Any}, a_)
                    b_ = convert(TensorFlow.Tensor{Any}, b_)
                    (a_, b_) = tf.tf_promote(a_, b_)
                    tf.add_input(desc, a_)
                    tf.add_input(desc, b_)
                    if transpose_a !== nothing
                        desc["transpose_a"] = Base.Bool(transpose_a)
                    end
                    if transpose_b !== nothing
                        desc["transpose_b"] = Base.Bool(transpose_b)
                    end
                end), name, "MatMul")
        tf.Tensor(tf.Operation(desc))
    end

"""
     mul(x, y)


"""
tf.@op function mul(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Mul")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "Mul")
        tf.Tensor(tf.Operation(desc))
    end

"""
     pow(x, y)


"""
tf.@op function pow(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Pow")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "Pow")
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_solve(matrix, rhs; adjoint=false)


"""
tf.@op function matrix_solve(matrix_, rhs_; name=nothing, adjoint=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("MatrixSolve")
                    matrix_ = convert(TensorFlow.Tensor{Any}, matrix_)
                    rhs_ = convert(TensorFlow.Tensor{Any}, rhs_)
                    (matrix_, rhs_) = tf.tf_promote(matrix_, rhs_)
                    tf.add_input(desc, matrix_)
                    tf.add_input(desc, rhs_)
                    if adjoint !== nothing
                        desc["adjoint"] = Base.Bool(adjoint)
                    end
                end), name, "MatrixSolve")
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_triangular_solve(matrix, rhs; lower=true, adjoint=false)


"""
tf.@op function matrix_triangular_solve(matrix_, rhs_; name=nothing, lower=nothing, adjoint=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("MatrixTriangularSolve")
                    matrix_ = convert(TensorFlow.Tensor{Any}, matrix_)
                    rhs_ = convert(TensorFlow.Tensor{Any}, rhs_)
                    (matrix_, rhs_) = tf.tf_promote(matrix_, rhs_)
                    tf.add_input(desc, matrix_)
                    tf.add_input(desc, rhs_)
                    if lower !== nothing
                        desc["lower"] = Base.Bool(lower)
                    end
                    if adjoint !== nothing
                        desc["adjoint"] = Base.Bool(adjoint)
                    end
                end), name, "MatrixTriangularSolve")
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_solve_ls(matrix, rhs, l2_regularizer; fast=true)


"""
tf.@op function matrix_solve_ls(matrix_, rhs_, l2_regularizer_; name=nothing, fast=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("MatrixSolveLs")
                    matrix_ = convert(TensorFlow.Tensor{Any}, matrix_)
                    rhs_ = convert(TensorFlow.Tensor{Any}, rhs_)
                    l2_regularizer_ = convert(TensorFlow.Tensor{Float64}, l2_regularizer_)
                    (matrix_, rhs_) = tf.tf_promote(matrix_, rhs_)
                    tf.add_input(desc, matrix_)
                    tf.add_input(desc, rhs_)
                    tf.add_input(desc, l2_regularizer_)
                    if fast !== nothing
                        desc["fast"] = Base.Bool(fast)
                    end
                end), name, "MatrixSolveLs")
        tf.Tensor(tf.Operation(desc))
    end

"""
     cholesky(input)


"""
tf.@op function cholesky(input_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Cholesky")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                end), name, "Cholesky")
        tf.Tensor(tf.Operation(desc))
    end

"""
     neg(x)


"""
tf.@op function neg(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Neg")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Neg")
        tf.Tensor(tf.Operation(desc))
    end

"""
     square(x)


"""
tf.@op function square(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Square")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Square")
        tf.Tensor(tf.Operation(desc))
    end

"""
     shape(input; out_type=Int32)


"""
tf.@op function shape(input_; name=nothing, out_type=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Shape")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                    if out_type !== nothing
                        desc["out_type"] = Base.identity(out_type)
                    end
                end), name, "Shape")
        tf.Tensor(tf.Operation(desc))
    end

"""
     unsorted_segment_sum(data, segment_ids, num_segments)


"""
tf.@op function unsorted_segment_sum(data_, segment_ids_, num_segments_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("UnsortedSegmentSum")
                    data_ = convert(TensorFlow.Tensor{Any}, data_)
                    segment_ids_ = convert(TensorFlow.Tensor{Any}, segment_ids_)
                    segment_ids_ = segment_ids_ - convert(tf.Tensor{eltype(segment_ids_)}, 1)
                    num_segments_ = convert(TensorFlow.Tensor{Int32}, num_segments_)
                    (num_segments_,) = tf.tf_promote(num_segments_)
                    (data_,) = tf.tf_promote(data_)
                    (segment_ids_,) = tf.tf_promote(segment_ids_)
                    tf.add_input(desc, data_)
                    tf.add_input(desc, segment_ids_)
                    tf.add_input(desc, num_segments_)
                end), name, "UnsortedSegmentSum")
        tf.Tensor(tf.Operation(desc))
    end

"""
     unsorted_segment_max(data, segment_ids, num_segments)


"""
tf.@op function unsorted_segment_max(data_, segment_ids_, num_segments_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("UnsortedSegmentMax")
                    data_ = convert(TensorFlow.Tensor{Any}, data_)
                    segment_ids_ = convert(TensorFlow.Tensor{Any}, segment_ids_)
                    segment_ids_ = segment_ids_ - convert(tf.Tensor{eltype(segment_ids_)}, 1)
                    num_segments_ = convert(TensorFlow.Tensor{Int32}, num_segments_)
                    (num_segments_,) = tf.tf_promote(num_segments_)
                    (data_,) = tf.tf_promote(data_)
                    (segment_ids_,) = tf.tf_promote(segment_ids_)
                    tf.add_input(desc, data_)
                    tf.add_input(desc, segment_ids_)
                    tf.add_input(desc, num_segments_)
                end), name, "UnsortedSegmentMax")
        tf.Tensor(tf.Operation(desc))
    end

"""
     segment_sum(data, segment_ids)


"""
tf.@op function segment_sum(data_, segment_ids_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("SegmentSum")
                    data_ = convert(TensorFlow.Tensor{Any}, data_)
                    segment_ids_ = convert(TensorFlow.Tensor{Any}, segment_ids_)
                    segment_ids_ = segment_ids_ - convert(tf.Tensor{eltype(segment_ids_)}, 1)
                    (data_,) = tf.tf_promote(data_)
                    (segment_ids_,) = tf.tf_promote(segment_ids_)
                    tf.add_input(desc, data_)
                    tf.add_input(desc, segment_ids_)
                end), name, "SegmentSum")
        tf.Tensor(tf.Operation(desc))
    end

"""
     segment_max(data, segment_ids)


"""
tf.@op function segment_max(data_, segment_ids_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("SegmentMax")
                    data_ = convert(TensorFlow.Tensor{Any}, data_)
                    segment_ids_ = convert(TensorFlow.Tensor{Any}, segment_ids_)
                    segment_ids_ = segment_ids_ - convert(tf.Tensor{eltype(segment_ids_)}, 1)
                    (data_,) = tf.tf_promote(data_)
                    (segment_ids_,) = tf.tf_promote(segment_ids_)
                    tf.add_input(desc, data_)
                    tf.add_input(desc, segment_ids_)
                end), name, "SegmentMax")
        tf.Tensor(tf.Operation(desc))
    end

"""
     segment_mean(data, segment_ids)


"""
tf.@op function segment_mean(data_, segment_ids_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("SegmentMean")
                    data_ = convert(TensorFlow.Tensor{Any}, data_)
                    segment_ids_ = convert(TensorFlow.Tensor{Any}, segment_ids_)
                    segment_ids_ = segment_ids_ - convert(tf.Tensor{eltype(segment_ids_)}, 1)
                    (data_,) = tf.tf_promote(data_)
                    (segment_ids_,) = tf.tf_promote(segment_ids_)
                    tf.add_input(desc, data_)
                    tf.add_input(desc, segment_ids_)
                end), name, "SegmentMean")
        tf.Tensor(tf.Operation(desc))
    end

"""
     segment_min(data, segment_ids)


"""
tf.@op function segment_min(data_, segment_ids_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("SegmentMin")
                    data_ = convert(TensorFlow.Tensor{Any}, data_)
                    segment_ids_ = convert(TensorFlow.Tensor{Any}, segment_ids_)
                    segment_ids_ = segment_ids_ - convert(tf.Tensor{eltype(segment_ids_)}, 1)
                    (data_,) = tf.tf_promote(data_)
                    (segment_ids_,) = tf.tf_promote(segment_ids_)
                    tf.add_input(desc, data_)
                    tf.add_input(desc, segment_ids_)
                end), name, "SegmentMin")
        tf.Tensor(tf.Operation(desc))
    end

"""
     segment_prod(data, segment_ids)


"""
tf.@op function segment_prod(data_, segment_ids_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("SegmentProd")
                    data_ = convert(TensorFlow.Tensor{Any}, data_)
                    segment_ids_ = convert(TensorFlow.Tensor{Any}, segment_ids_)
                    segment_ids_ = segment_ids_ - convert(tf.Tensor{eltype(segment_ids_)}, 1)
                    (data_,) = tf.tf_promote(data_)
                    (segment_ids_,) = tf.tf_promote(segment_ids_)
                    tf.add_input(desc, data_)
                    tf.add_input(desc, segment_ids_)
                end), name, "SegmentProd")
        tf.Tensor(tf.Operation(desc))
    end

"""
     relu(features)


"""
tf.@op function relu(features_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Relu")
                    features_ = convert(TensorFlow.Tensor{Any}, features_)
                    (features_,) = tf.tf_promote(features_)
                    tf.add_input(desc, features_)
                end), name, "Relu")
        tf.Tensor(tf.Operation(desc))
    end

"""
     relu6(features)


"""
tf.@op function relu6(features_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Relu6")
                    features_ = convert(TensorFlow.Tensor{Any}, features_)
                    (features_,) = tf.tf_promote(features_)
                    tf.add_input(desc, features_)
                end), name, "Relu6")
        tf.Tensor(tf.Operation(desc))
    end

"""
     elu(features)


"""
tf.@op function elu(features_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Elu")
                    features_ = convert(TensorFlow.Tensor{Any}, features_)
                    (features_,) = tf.tf_promote(features_)
                    tf.add_input(desc, features_)
                end), name, "Elu")
        tf.Tensor(tf.Operation(desc))
    end

"""
     softplus(features)


"""
tf.@op function softplus(features_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Softplus")
                    features_ = convert(TensorFlow.Tensor{Any}, features_)
                    (features_,) = tf.tf_promote(features_)
                    tf.add_input(desc, features_)
                end), name, "Softplus")
        tf.Tensor(tf.Operation(desc))
    end

"""
     softsign(features)


"""
tf.@op function softsign(features_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Softsign")
                    features_ = convert(TensorFlow.Tensor{Any}, features_)
                    (features_,) = tf.tf_promote(features_)
                    tf.add_input(desc, features_)
                end), name, "Softsign")
        tf.Tensor(tf.Operation(desc))
    end

"""
     softmax(logits)


"""
tf.@op function softmax(logits_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Softmax")
                    logits_ = convert(TensorFlow.Tensor{Any}, logits_)
                    (logits_,) = tf.tf_promote(logits_)
                    tf.add_input(desc, logits_)
                end), name, "Softmax")
        tf.Tensor(tf.Operation(desc))
    end

"""
     sigmoid(x)


"""
tf.@op function sigmoid(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Sigmoid")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Sigmoid")
        tf.Tensor(tf.Operation(desc))
    end

"""
     conv3d(input, filter; data_format=NDHWC, dilations=[1, 1, 1, 1, 1])


"""
tf.@op function conv3d(input_, filter_; name=nothing, strides=nothing, padding=nothing, data_format=nothing, dilations=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Conv3D")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    filter_ = convert(TensorFlow.Tensor{Any}, filter_)
                    (input_, filter_) = tf.tf_promote(input_, filter_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, filter_)
                    if strides !== nothing
                        desc["strides"] = map(Base.identity, strides)
                    end
                    if padding !== nothing
                        desc["padding"] = Base.String(padding)
                    end
                    if data_format !== nothing
                        desc["data_format"] = Base.String(data_format)
                    end
                    if dilations !== nothing
                        desc["dilations"] = map(Base.identity, dilations)
                    end
                end), name, "Conv3D")
        tf.Tensor(tf.Operation(desc))
    end

"""
     max_pool(input; data_format=NHWC)


"""
tf.@op function max_pool(input_; name=nothing, ksize=nothing, strides=nothing, padding=nothing, data_format=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("MaxPool")
                    input_ = convert(TensorFlow.Tensor{Float32}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                    if ksize !== nothing
                        desc["ksize"] = map(Base.identity, ksize)
                    end
                    if strides !== nothing
                        desc["strides"] = map(Base.identity, strides)
                    end
                    if padding !== nothing
                        desc["padding"] = Base.String(padding)
                    end
                    if data_format !== nothing
                        desc["data_format"] = Base.String(data_format)
                    end
                end), name, "MaxPool")
        tf.Tensor(tf.Operation(desc))
    end

"""
     max_pool3d(input; data_format=NDHWC)


"""
tf.@op function max_pool3d(input_; name=nothing, ksize=nothing, strides=nothing, padding=nothing, data_format=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("MaxPool3D")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                    if ksize !== nothing
                        desc["ksize"] = map(Base.identity, ksize)
                    end
                    if strides !== nothing
                        desc["strides"] = map(Base.identity, strides)
                    end
                    if padding !== nothing
                        desc["padding"] = Base.String(padding)
                    end
                    if data_format !== nothing
                        desc["data_format"] = Base.String(data_format)
                    end
                end), name, "MaxPool3D")
        tf.Tensor(tf.Operation(desc))
    end

"""
     avg_pool(value; data_format=NHWC)


"""
tf.@op function avg_pool(value_; name=nothing, ksize=nothing, strides=nothing, padding=nothing, data_format=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("AvgPool")
                    value_ = convert(TensorFlow.Tensor{Any}, value_)
                    (value_,) = tf.tf_promote(value_)
                    tf.add_input(desc, value_)
                    if ksize !== nothing
                        desc["ksize"] = map(Base.identity, ksize)
                    end
                    if strides !== nothing
                        desc["strides"] = map(Base.identity, strides)
                    end
                    if padding !== nothing
                        desc["padding"] = Base.String(padding)
                    end
                    if data_format !== nothing
                        desc["data_format"] = Base.String(data_format)
                    end
                end), name, "AvgPool")
        tf.Tensor(tf.Operation(desc))
    end

"""
     avg_pool3d(input; data_format=NDHWC)


"""
tf.@op function avg_pool3d(input_; name=nothing, ksize=nothing, strides=nothing, padding=nothing, data_format=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("AvgPool3D")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                    if ksize !== nothing
                        desc["ksize"] = map(Base.identity, ksize)
                    end
                    if strides !== nothing
                        desc["strides"] = map(Base.identity, strides)
                    end
                    if padding !== nothing
                        desc["padding"] = Base.String(padding)
                    end
                    if data_format !== nothing
                        desc["data_format"] = Base.String(data_format)
                    end
                end), name, "AvgPool3D")
        tf.Tensor(tf.Operation(desc))
    end

"""
     log_softmax(logits)


"""
tf.@op function log_softmax(logits_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("LogSoftmax")
                    logits_ = convert(TensorFlow.Tensor{Any}, logits_)
                    (logits_,) = tf.tf_promote(logits_)
                    tf.add_input(desc, logits_)
                end), name, "LogSoftmax")
        tf.Tensor(tf.Operation(desc))
    end

"""
     dilation2d(input, filter)


"""
tf.@op function dilation2d(input_, filter_; name=nothing, strides=nothing, rates=nothing, padding=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Dilation2D")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    filter_ = convert(TensorFlow.Tensor{Any}, filter_)
                    (input_, filter_) = tf.tf_promote(input_, filter_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, filter_)
                    if strides !== nothing
                        desc["strides"] = map(Base.identity, strides)
                    end
                    if rates !== nothing
                        desc["rates"] = map(Base.identity, rates)
                    end
                    if padding !== nothing
                        desc["padding"] = Base.String(padding)
                    end
                end), name, "Dilation2D")
        tf.Tensor(tf.Operation(desc))
    end

"""
     conv2d(input, filter; use_cudnn_on_gpu=true, data_format=NHWC, dilations=[1, 1, 1, 1])


"""
tf.@op function conv2d(input_, filter_; name=nothing, strides=nothing, use_cudnn_on_gpu=nothing, padding=nothing, data_format=nothing, dilations=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Conv2D")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    filter_ = convert(TensorFlow.Tensor{Any}, filter_)
                    (input_, filter_) = tf.tf_promote(input_, filter_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, filter_)
                    if strides !== nothing
                        desc["strides"] = map(Base.identity, strides)
                    end
                    if use_cudnn_on_gpu !== nothing
                        desc["use_cudnn_on_gpu"] = Base.Bool(use_cudnn_on_gpu)
                    end
                    if padding !== nothing
                        desc["padding"] = Base.String(padding)
                    end
                    if data_format !== nothing
                        desc["data_format"] = Base.String(data_format)
                    end
                    if dilations !== nothing
                        desc["dilations"] = map(Base.identity, dilations)
                    end
                end), name, "Conv2D")
        tf.Tensor(tf.Operation(desc))
    end

"""
     random_uniform(shape; seed=0, seed2=0)


"""
tf.@op function random_uniform(shape_; name=nothing, seed=nothing, seed2=nothing, dtype=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("RandomUniform")
                    shape_ = convert(TensorFlow.Tensor{Any}, shape_)
                    (shape_,) = tf.tf_promote(shape_)
                    tf.add_input(desc, shape_)
                    if seed !== nothing
                        desc["seed"] = Base.Int(seed)
                    end
                    if seed2 !== nothing
                        desc["seed2"] = Base.Int(seed2)
                    end
                    if dtype !== nothing
                        desc["dtype"] = Base.identity(dtype)
                    end
                end), name, "RandomUniform")
        tf.Tensor(tf.Operation(desc))
    end

"""
     random_standard_normal(shape; seed=0, seed2=0)


"""
tf.@op function random_standard_normal(shape_; name=nothing, seed=nothing, seed2=nothing, dtype=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("RandomStandardNormal")
                    shape_ = convert(TensorFlow.Tensor{Any}, shape_)
                    (shape_,) = tf.tf_promote(shape_)
                    tf.add_input(desc, shape_)
                    if seed !== nothing
                        desc["seed"] = Base.Int(seed)
                    end
                    if seed2 !== nothing
                        desc["seed2"] = Base.Int(seed2)
                    end
                    if dtype !== nothing
                        desc["dtype"] = Base.identity(dtype)
                    end
                end), name, "RandomStandardNormal")
        tf.Tensor(tf.Operation(desc))
    end

"""
     random_shuffle(value; seed=0, seed2=0)


"""
tf.@op function random_shuffle(value_; name=nothing, seed=nothing, seed2=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("RandomShuffle")
                    value_ = convert(TensorFlow.Tensor{Any}, value_)
                    (value_,) = tf.tf_promote(value_)
                    tf.add_input(desc, value_)
                    if seed !== nothing
                        desc["seed"] = Base.Int(seed)
                    end
                    if seed2 !== nothing
                        desc["seed2"] = Base.Int(seed2)
                    end
                end), name, "RandomShuffle")
        tf.Tensor(tf.Operation(desc))
    end

"""
     strided_slice(input, begin, end, strides; begin_mask=0, end_mask=0, ellipsis_mask=0, new_axis_mask=0, shrink_axis_mask=0)


"""
tf.@op function strided_slice(input_, begin_, end_, strides_; name=nothing, Index=nothing, begin_mask=nothing, end_mask=nothing, ellipsis_mask=nothing, new_axis_mask=nothing, shrink_axis_mask=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("StridedSlice")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    begin_ = convert(TensorFlow.Tensor{Any}, begin_)
                    begin_ = begin_ - convert(tf.Tensor{eltype(begin_)}, 1)
                    end_ = convert(TensorFlow.Tensor{Any}, end_)
                    end_ = end_ - convert(tf.Tensor{eltype(end_)}, 1)
                    strides_ = convert(TensorFlow.Tensor{Any}, strides_)
                    strides_ = strides_ - convert(tf.Tensor{eltype(strides_)}, 1)
                    (input_,) = tf.tf_promote(input_)
                    (begin_, end_, strides_) = tf.tf_promote(begin_, end_, strides_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, begin_)
                    tf.add_input(desc, end_)
                    tf.add_input(desc, strides_)
                    if Index !== nothing
                        desc["Index"] = Base.identity(Index)
                    end
                    if begin_mask !== nothing
                        begin_mask = Base.Int(begin_mask) - 1
                    end
                    if begin_mask !== nothing
                        desc["begin_mask"] = Base.Int(begin_mask)
                    end
                    if end_mask !== nothing
                        end_mask = Base.Int(end_mask) - 1
                    end
                    if end_mask !== nothing
                        desc["end_mask"] = Base.Int(end_mask)
                    end
                    if ellipsis_mask !== nothing
                        ellipsis_mask = Base.Int(ellipsis_mask) - 1
                    end
                    if ellipsis_mask !== nothing
                        desc["ellipsis_mask"] = Base.Int(ellipsis_mask)
                    end
                    if new_axis_mask !== nothing
                        new_axis_mask = Base.Int(new_axis_mask) - 1
                    end
                    if new_axis_mask !== nothing
                        desc["new_axis_mask"] = Base.Int(new_axis_mask)
                    end
                    if shrink_axis_mask !== nothing
                        shrink_axis_mask = Base.Int(shrink_axis_mask) - 1
                    end
                    if shrink_axis_mask !== nothing
                        desc["shrink_axis_mask"] = Base.Int(shrink_axis_mask)
                    end
                end), name, "StridedSlice")
        tf.Tensor(tf.Operation(desc))
    end

"""
     expand_dims(input, dim)


"""
tf.@op function expand_dims(input_, dim_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ExpandDims")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    dim_ = convert(TensorFlow.Tensor{Int32}, dim_)
                    dim_ = dim_ - convert(tf.Tensor{eltype(dim_)}, 1)
                    (input_,) = tf.tf_promote(input_)
                    (dim_,) = tf.tf_promote(dim_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, dim_)
                end), name, "ExpandDims")
        tf.Tensor(tf.Operation(desc))
    end

"""
     tile(input, multiples)


"""
tf.@op function tile(input_, multiples_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Tile")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    multiples_ = convert(TensorFlow.Tensor{Int32}, multiples_)
                    (input_,) = tf.tf_promote(input_)
                    (multiples_,) = tf.tf_promote(multiples_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, multiples_)
                end), name, "Tile")
        tf.Tensor(tf.Operation(desc))
    end

"""
     pad(input, paddings)


"""
tf.@op function pad(input_, paddings_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Pad")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    paddings_ = convert(TensorFlow.Tensor{Int32}, paddings_)
                    (input_,) = tf.tf_promote(input_)
                    (paddings_,) = tf.tf_promote(paddings_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, paddings_)
                end), name, "Pad")
        tf.Tensor(tf.Operation(desc))
    end

"""
     gather(params, indices; validate_indices=true)


"""
tf.@op function gather(params_, indices_; name=nothing, validate_indices=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Gather")
                    params_ = convert(TensorFlow.Tensor{Any}, params_)
                    indices_ = convert(TensorFlow.Tensor{Any}, indices_)
                    indices_ = indices_ - convert(tf.Tensor{eltype(indices_)}, 1)
                    (params_,) = tf.tf_promote(params_)
                    (indices_,) = tf.tf_promote(indices_)
                    tf.add_input(desc, params_)
                    tf.add_input(desc, indices_)
                    if validate_indices !== nothing
                        desc["validate_indices"] = Base.Bool(validate_indices)
                    end
                end), name, "Gather")
        tf.Tensor(tf.Operation(desc))
    end

"""
     gather_nd(params, indices)


"""
tf.@op function gather_nd(params_, indices_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("GatherNd")
                    params_ = convert(TensorFlow.Tensor{Any}, params_)
                    indices_ = convert(TensorFlow.Tensor{Any}, indices_)
                    indices_ = indices_ - convert(tf.Tensor{eltype(indices_)}, 1)
                    (params_,) = tf.tf_promote(params_)
                    (indices_,) = tf.tf_promote(indices_)
                    tf.add_input(desc, params_)
                    tf.add_input(desc, indices_)
                end), name, "GatherNd")
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_nd(indices, updates, shape)


"""
tf.@op function scatter_nd(indices_, updates_, shape_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ScatterNd")
                    indices_ = convert(TensorFlow.Tensor{Any}, indices_)
                    indices_ = indices_ - convert(tf.Tensor{eltype(indices_)}, 1)
                    updates_ = convert(TensorFlow.Tensor{Any}, updates_)
                    shape_ = convert(TensorFlow.Tensor{Any}, shape_)
                    (updates_,) = tf.tf_promote(updates_)
                    (indices_, shape_) = tf.tf_promote(indices_, shape_)
                    tf.add_input(desc, indices_)
                    tf.add_input(desc, updates_)
                    tf.add_input(desc, shape_)
                end), name, "ScatterNd")
        tf.Tensor(tf.Operation(desc))
    end

"""
     dynamic_partition(data, partitions)


"""
tf.@op function dynamic_partition(data_, partitions_; name=nothing, num_partitions=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("DynamicPartition")
                    data_ = convert(TensorFlow.Tensor{Any}, data_)
                    partitions_ = convert(TensorFlow.Tensor{Int32}, partitions_)
                    (data_,) = tf.tf_promote(data_)
                    tf.add_input(desc, data_)
                    tf.add_input(desc, partitions_)
                    if num_partitions !== nothing
                        desc["num_partitions"] = Base.Int(num_partitions)
                    end
                end), name, "DynamicPartition")
        out = tf.Tensor[]
        op = tf.Operation(desc)
        for out_idx = 1:num_partitions
            push!(out, tf.Tensor(op, out_idx))
        end
        out
    end

"""
     dynamic_stitch(indices, data)


"""
tf.@op function dynamic_stitch(indices_, data_; name=nothing, N=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("DynamicStitch")
                    indices_ = [convert(TensorFlow.Tensor{Int32}, x) for x = indices_]
                    data_ = [convert(TensorFlow.Tensor{Any}, x) for x = data_]
                    (data_,) = tf.tf_promote(data_)
                    tf.add_input(desc, indices_)
                    tf.add_input(desc, data_)
                    if N !== nothing
                        desc["N"] = Base.Int(N)
                    end
                end), name, "DynamicStitch")
        tf.Tensor(tf.Operation(desc))
    end

"""
     pack(values; axis=0)


"""
tf.@op function pack(values_; name=nothing, N=nothing, axis=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Pack")
                    values_ = [convert(TensorFlow.Tensor{Any}, x) for x = values_]
                    (values_,) = tf.tf_promote(values_)
                    tf.add_input(desc, values_)
                    if N !== nothing
                        desc["N"] = Base.Int(N)
                    end
                    if axis !== nothing
                        axis = Base.Int(axis) - 1
                    end
                    if axis !== nothing
                        desc["axis"] = Base.Int(axis)
                    end
                end), name, "Pack")
        tf.Tensor(tf.Operation(desc))
    end

"""
     concat_v2(values, axis)


"""
tf.@op function concat_v2(values_, axis_; name=nothing, N=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ConcatV2")
                    values_ = [convert(TensorFlow.Tensor{Any}, x) for x = values_]
                    axis_ = convert(TensorFlow.Tensor{Int32}, axis_)
                    axis_ = axis_ - convert(tf.Tensor{eltype(axis_)}, 1)
                    (values_,) = tf.tf_promote(values_)
                    (axis_,) = tf.tf_promote(axis_)
                    tf.add_input(desc, values_)
                    tf.add_input(desc, axis_)
                    if N !== nothing
                        desc["N"] = Base.Int(N)
                    end
                end), name, "ConcatV2")
        tf.Tensor(tf.Operation(desc))
    end

"""
     self_adjoint_eig_v2(input; compute_v=true)


"""
tf.@op function self_adjoint_eig_v2(input_; name=nothing, compute_v=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("SelfAdjointEigV2")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                    if compute_v !== nothing
                        desc["compute_v"] = Base.Bool(compute_v)
                    end
                end), name, "SelfAdjointEigV2")
        out = tf.Tensor[]
        op = tf.Operation(desc)
        for out_idx = 1:2
            push!(out, tf.Tensor(op, out_idx))
        end
        out
    end

"""
     is_finite(x)


"""
tf.@op function is_finite(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("IsFinite")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "IsFinite")
        tf.Tensor(tf.Operation(desc))
    end

"""
     is_nan(x)


"""
tf.@op function is_nan(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("IsNan")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "IsNan")
        tf.Tensor(tf.Operation(desc))
    end

"""
     is_inf(x)


"""
tf.@op function is_inf(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("IsInf")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "IsInf")
        tf.Tensor(tf.Operation(desc))
    end

"""
     lrn(input; depth_radius=5, bias=nothing, alpha=nothing, beta=nothing)


"""
tf.@op function lrn(input_; name=nothing, depth_radius=nothing, bias=nothing, alpha=nothing, beta=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("LRN")
                    input_ = convert(TensorFlow.Tensor{Float32}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                    if depth_radius !== nothing
                        desc["depth_radius"] = Base.Int(depth_radius)
                    end
                    if bias !== nothing
                        desc["bias"] = Base.identity(bias)
                    end
                    if alpha !== nothing
                        desc["alpha"] = Base.identity(alpha)
                    end
                    if beta !== nothing
                        desc["beta"] = Base.identity(beta)
                    end
                end), name, "LRN")
        tf.Tensor(tf.Operation(desc))
    end

"""
     assign(ref, value; validate_shape=true, use_locking=true)


"""
tf.@op function assign(ref_, value_; name=nothing, validate_shape=nothing, use_locking=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Assign")
                    ref_ = convert(TensorFlow.Tensor{Any}, ref_)
                    value_ = convert(TensorFlow.Tensor{Any}, value_)
                    (ref_, value_) = tf.tf_promote(ref_, value_)
                    tf.add_input(desc, ref_)
                    tf.add_input(desc, value_)
                    if validate_shape !== nothing
                        desc["validate_shape"] = Base.Bool(validate_shape)
                    end
                    if use_locking !== nothing
                        desc["use_locking"] = Base.Bool(use_locking)
                    end
                end), name, "Assign")
        tf.Tensor(tf.Operation(desc))
    end

"""
     assign_add(ref, value; use_locking=false)


"""
tf.@op function assign_add(ref_, value_; name=nothing, use_locking=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("AssignAdd")
                    ref_ = convert(TensorFlow.Tensor{Any}, ref_)
                    value_ = convert(TensorFlow.Tensor{Any}, value_)
                    (ref_, value_) = tf.tf_promote(ref_, value_)
                    tf.add_input(desc, ref_)
                    tf.add_input(desc, value_)
                    if use_locking !== nothing
                        desc["use_locking"] = Base.Bool(use_locking)
                    end
                end), name, "AssignAdd")
        tf.Tensor(tf.Operation(desc))
    end

"""
     assign_sub(ref, value; use_locking=false)


"""
tf.@op function assign_sub(ref_, value_; name=nothing, use_locking=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("AssignSub")
                    ref_ = convert(TensorFlow.Tensor{Any}, ref_)
                    value_ = convert(TensorFlow.Tensor{Any}, value_)
                    (ref_, value_) = tf.tf_promote(ref_, value_)
                    tf.add_input(desc, ref_)
                    tf.add_input(desc, value_)
                    if use_locking !== nothing
                        desc["use_locking"] = Base.Bool(use_locking)
                    end
                end), name, "AssignSub")
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_update(ref, indices, updates; use_locking=true)


"""
tf.@op function scatter_update(ref_, indices_, updates_; name=nothing, use_locking=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ScatterUpdate")
                    ref_ = convert(TensorFlow.Tensor{Any}, ref_)
                    indices_ = convert(TensorFlow.Tensor{Any}, indices_)
                    indices_ = indices_ - convert(tf.Tensor{eltype(indices_)}, 1)
                    updates_ = convert(TensorFlow.Tensor{Any}, updates_)
                    (ref_, updates_) = tf.tf_promote(ref_, updates_)
                    (indices_,) = tf.tf_promote(indices_)
                    tf.add_input(desc, ref_)
                    tf.add_input(desc, indices_)
                    tf.add_input(desc, updates_)
                    if use_locking !== nothing
                        desc["use_locking"] = Base.Bool(use_locking)
                    end
                end), name, "ScatterUpdate")
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_sub(ref, indices, updates; use_locking=false)


"""
tf.@op function scatter_sub(ref_, indices_, updates_; name=nothing, use_locking=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ScatterSub")
                    ref_ = convert(TensorFlow.Tensor{Any}, ref_)
                    indices_ = convert(TensorFlow.Tensor{Any}, indices_)
                    indices_ = indices_ - convert(tf.Tensor{eltype(indices_)}, 1)
                    updates_ = convert(TensorFlow.Tensor{Any}, updates_)
                    (ref_, updates_) = tf.tf_promote(ref_, updates_)
                    (indices_,) = tf.tf_promote(indices_)
                    tf.add_input(desc, ref_)
                    tf.add_input(desc, indices_)
                    tf.add_input(desc, updates_)
                    if use_locking !== nothing
                        desc["use_locking"] = Base.Bool(use_locking)
                    end
                end), name, "ScatterSub")
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_add(ref, indices, updates; use_locking=false)


"""
tf.@op function scatter_add(ref_, indices_, updates_; name=nothing, use_locking=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ScatterAdd")
                    ref_ = convert(TensorFlow.Tensor{Any}, ref_)
                    indices_ = convert(TensorFlow.Tensor{Any}, indices_)
                    indices_ = indices_ - convert(tf.Tensor{eltype(indices_)}, 1)
                    updates_ = convert(TensorFlow.Tensor{Any}, updates_)
                    (ref_, updates_) = tf.tf_promote(ref_, updates_)
                    (indices_,) = tf.tf_promote(indices_)
                    tf.add_input(desc, ref_)
                    tf.add_input(desc, indices_)
                    tf.add_input(desc, updates_)
                    if use_locking !== nothing
                        desc["use_locking"] = Base.Bool(use_locking)
                    end
                end), name, "ScatterAdd")
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_mul(ref, indices, updates; use_locking=false)


"""
tf.@op function scatter_mul(ref_, indices_, updates_; name=nothing, use_locking=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ScatterMul")
                    ref_ = convert(TensorFlow.Tensor{Any}, ref_)
                    indices_ = convert(TensorFlow.Tensor{Any}, indices_)
                    indices_ = indices_ - convert(tf.Tensor{eltype(indices_)}, 1)
                    updates_ = convert(TensorFlow.Tensor{Any}, updates_)
                    (ref_, updates_) = tf.tf_promote(ref_, updates_)
                    (indices_,) = tf.tf_promote(indices_)
                    tf.add_input(desc, ref_)
                    tf.add_input(desc, indices_)
                    tf.add_input(desc, updates_)
                    if use_locking !== nothing
                        desc["use_locking"] = Base.Bool(use_locking)
                    end
                end), name, "ScatterMul")
        tf.Tensor(tf.Operation(desc))
    end

"""
     scatter_div(ref, indices, updates; use_locking=false)


"""
tf.@op function scatter_div(ref_, indices_, updates_; name=nothing, use_locking=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ScatterDiv")
                    ref_ = convert(TensorFlow.Tensor{Any}, ref_)
                    indices_ = convert(TensorFlow.Tensor{Any}, indices_)
                    indices_ = indices_ - convert(tf.Tensor{eltype(indices_)}, 1)
                    updates_ = convert(TensorFlow.Tensor{Any}, updates_)
                    (ref_, updates_) = tf.tf_promote(ref_, updates_)
                    (indices_,) = tf.tf_promote(indices_)
                    tf.add_input(desc, ref_)
                    tf.add_input(desc, indices_)
                    tf.add_input(desc, updates_)
                    if use_locking !== nothing
                        desc["use_locking"] = Base.Bool(use_locking)
                    end
                end), name, "ScatterDiv")
        tf.Tensor(tf.Operation(desc))
    end

"""
     merge_summary(inputs)


"""
tf.@op function merge_summary(inputs_; name=nothing, N=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("MergeSummary")
                    inputs_ = [convert(TensorFlow.Tensor{String}, x) for x = inputs_]
                    tf.add_input(desc, inputs_)
                    if N !== nothing
                        desc["N"] = Base.Int(N)
                    end
                end), name, "MergeSummary")
        tf.Tensor(tf.Operation(desc))
    end

"""
     scalar_summary(tags, values)


"""
tf.@op function scalar_summary(tags_, values_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ScalarSummary")
                    tags_ = convert(TensorFlow.Tensor{String}, tags_)
                    values_ = convert(TensorFlow.Tensor{Any}, values_)
                    (values_,) = tf.tf_promote(values_)
                    tf.add_input(desc, tags_)
                    tf.add_input(desc, values_)
                end), name, "ScalarSummary")
        tf.Tensor(tf.Operation(desc))
    end

"""
     audio_summary_v2(tag, tensor, sample_rate; max_outputs=3)


"""
tf.@op function audio_summary_v2(tag_, tensor_, sample_rate_; name=nothing, max_outputs=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("AudioSummaryV2")
                    tag_ = convert(TensorFlow.Tensor{String}, tag_)
                    tensor_ = convert(TensorFlow.Tensor{Float32}, tensor_)
                    sample_rate_ = convert(TensorFlow.Tensor{Float32}, sample_rate_)
                    tf.add_input(desc, tag_)
                    tf.add_input(desc, tensor_)
                    tf.add_input(desc, sample_rate_)
                    if max_outputs !== nothing
                        desc["max_outputs"] = Base.Int(max_outputs)
                    end
                end), name, "AudioSummaryV2")
        tf.Tensor(tf.Operation(desc))
    end

"""
     histogram_summary(tag, values)


"""
tf.@op function histogram_summary(tag_, values_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("HistogramSummary")
                    tag_ = convert(TensorFlow.Tensor{String}, tag_)
                    values_ = convert(TensorFlow.Tensor{Float32}, values_)
                    (values_,) = tf.tf_promote(values_)
                    tf.add_input(desc, tag_)
                    tf.add_input(desc, values_)
                end), name, "HistogramSummary")
        tf.Tensor(tf.Operation(desc))
    end

"""
     image_summary(tag, tensor; max_images=3, bad_color=?)


"""
tf.@op function image_summary(tag_, tensor_; name=nothing, max_images=nothing, bad_color=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ImageSummary")
                    tag_ = convert(TensorFlow.Tensor{String}, tag_)
                    tensor_ = convert(TensorFlow.Tensor{Float32}, tensor_)
                    (tensor_,) = tf.tf_promote(tensor_)
                    tf.add_input(desc, tag_)
                    tf.add_input(desc, tensor_)
                    if max_images !== nothing
                        desc["max_images"] = Base.Int(max_images)
                    end
                    if bad_color !== nothing
                        desc["bad_color"] = TensorFlow.RawTensor(bad_color)
                    end
                end), name, "ImageSummary")
        tf.Tensor(tf.Operation(desc))
    end

"""
     decode_png(contents; channels=0, dtype=UInt8)


"""
tf.@op function decode_png(contents_; name=nothing, channels=nothing, dtype=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("DecodePng")
                    contents_ = convert(TensorFlow.Tensor{String}, contents_)
                    tf.add_input(desc, contents_)
                    if channels !== nothing
                        desc["channels"] = Base.Int(channels)
                    end
                    if dtype !== nothing
                        desc["dtype"] = Base.identity(dtype)
                    end
                end), name, "DecodePng")
        tf.Tensor(tf.Operation(desc))
    end

"""
     where(input)


"""
tf.@op function where(input_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Where")
                    input_ = convert(TensorFlow.Tensor{Bool}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                end), name, "Where")
        tf.Tensor(tf.Operation(desc))
    end

"""
     const_()


"""
tf.@op function const_(; name=nothing, value=nothing, dtype=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Const")
                    if value !== nothing
                        desc["value"] = TensorFlow.RawTensor(value)
                    end
                    if dtype !== nothing
                        desc["dtype"] = Base.identity(dtype)
                    end
                end), name, "Const")
        tf.Tensor(tf.Operation(desc))
    end

"""
     variable_v2(; container=, shared_name=)


"""
tf.@op function variable_v2(; name=nothing, shape=nothing, dtype=nothing, container=nothing, shared_name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("VariableV2")
                    if shape !== nothing
                        desc["shape"] = Base.identity(shape)
                    end
                    if dtype !== nothing
                        desc["dtype"] = Base.identity(dtype)
                    end
                    if container !== nothing
                        desc["container"] = Base.String(container)
                    end
                    if shared_name !== nothing
                        desc["shared_name"] = Base.String(shared_name)
                    end
                end), name, "VariableV2")
        tf.Tensor(tf.Operation(desc))
    end

"""
     log(x)


"""
tf.@op function log(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Log")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Log")
        tf.Tensor(tf.Operation(desc))
    end

"""
     exp(x)


"""
tf.@op function exp(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Exp")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Exp")
        tf.Tensor(tf.Operation(desc))
    end

"""
     ceil(x)


"""
tf.@op function ceil(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Ceil")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Ceil")
        tf.Tensor(tf.Operation(desc))
    end

"""
     floor(x)


"""
tf.@op function floor(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Floor")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Floor")
        tf.Tensor(tf.Operation(desc))
    end

"""
     sqrt(x)


"""
tf.@op function sqrt(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Sqrt")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Sqrt")
        tf.Tensor(tf.Operation(desc))
    end

"""
     abs(x)


"""
tf.@op function abs(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Abs")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Abs")
        tf.Tensor(tf.Operation(desc))
    end

"""
     cos(x)


"""
tf.@op function cos(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Cos")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Cos")
        tf.Tensor(tf.Operation(desc))
    end

"""
     sin(x)


"""
tf.@op function sin(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Sin")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Sin")
        tf.Tensor(tf.Operation(desc))
    end

"""
     tan(x)


"""
tf.@op function tan(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Tan")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Tan")
        tf.Tensor(tf.Operation(desc))
    end

"""
     atan(x)


"""
tf.@op function atan(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Atan")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Atan")
        tf.Tensor(tf.Operation(desc))
    end

"""
     asin(x)


"""
tf.@op function asin(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Asin")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Asin")
        tf.Tensor(tf.Operation(desc))
    end

"""
     acos(x)


"""
tf.@op function acos(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Acos")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Acos")
        tf.Tensor(tf.Operation(desc))
    end

"""
     tanh(x)


"""
tf.@op function tanh(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Tanh")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Tanh")
        tf.Tensor(tf.Operation(desc))
    end

"""
     lgamma(x)


"""
tf.@op function lgamma(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Lgamma")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Lgamma")
        tf.Tensor(tf.Operation(desc))
    end

"""
     erf(x)


"""
tf.@op function erf(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Erf")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Erf")
        tf.Tensor(tf.Operation(desc))
    end

"""
     erfc(x)


"""
tf.@op function erfc(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Erfc")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Erfc")
        tf.Tensor(tf.Operation(desc))
    end

"""
     real(input)


"""
tf.@op function real(input_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Real")
                    input_ = convert(TensorFlow.Tensor{Complex{Float32}}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                end), name, "Real")
        tf.Tensor(tf.Operation(desc))
    end

"""
     imag(input)


"""
tf.@op function imag(input_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Imag")
                    input_ = convert(TensorFlow.Tensor{Complex{Float32}}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                end), name, "Imag")
        tf.Tensor(tf.Operation(desc))
    end

"""
     sign(x)


"""
tf.@op function sign(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Sign")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Sign")
        tf.Tensor(tf.Operation(desc))
    end

"""
     conj(input)


"""
tf.@op function conj(input_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Conj")
                    input_ = convert(TensorFlow.Tensor{Complex{Float32}}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                end), name, "Conj")
        tf.Tensor(tf.Operation(desc))
    end

"""
     round(x)


"""
tf.@op function round(x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Round")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                end), name, "Round")
        tf.Tensor(tf.Operation(desc))
    end

"""
     polygamma(a, x)


"""
tf.@op function polygamma(a_, x_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Polygamma")
                    a_ = convert(TensorFlow.Tensor{Any}, a_)
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (a_, x_) = tf.tf_promote(a_, x_)
                    tf.add_input(desc, a_)
                    tf.add_input(desc, x_)
                end), name, "Polygamma")
        tf.Tensor(tf.Operation(desc))
    end

"""
     zeta(x, q)


"""
tf.@op function zeta(x_, q_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Zeta")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    q_ = convert(TensorFlow.Tensor{Any}, q_)
                    (x_, q_) = tf.tf_promote(x_, q_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, q_)
                end), name, "Zeta")
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_inverse(input; adjoint=false)


"""
tf.@op function matrix_inverse(input_; name=nothing, adjoint=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("MatrixInverse")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                    if adjoint !== nothing
                        desc["adjoint"] = Base.Bool(adjoint)
                    end
                end), name, "MatrixInverse")
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_determinant(input)


"""
tf.@op function matrix_determinant(input_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("MatrixDeterminant")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                end), name, "MatrixDeterminant")
        tf.Tensor(tf.Operation(desc))
    end

"""
     diag(diagonal)


"""
tf.@op function diag(diagonal_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Diag")
                    diagonal_ = convert(TensorFlow.Tensor{Any}, diagonal_)
                    (diagonal_,) = tf.tf_promote(diagonal_)
                    tf.add_input(desc, diagonal_)
                end), name, "Diag")
        tf.Tensor(tf.Operation(desc))
    end

"""
     matrix_diag_part(input)


"""
tf.@op function matrix_diag_part(input_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("MatrixDiagPart")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                end), name, "MatrixDiagPart")
        tf.Tensor(tf.Operation(desc))
    end

"""
     cast(x)


"""
tf.@op function cast(x_; name=nothing, SrcT=nothing, DstT=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Cast")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                    if SrcT !== nothing
                        desc["SrcT"] = Base.identity(SrcT)
                    end
                    if DstT !== nothing
                        desc["DstT"] = Base.identity(DstT)
                    end
                end), name, "Cast")
        tf.Tensor(tf.Operation(desc))
    end

"""
     one_hot(indices, depth, on_value, off_value; axis=-1)


"""
tf.@op function one_hot(indices_, depth_, on_value_, off_value_; name=nothing, axis=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("OneHot")
                    indices_ = convert(TensorFlow.Tensor{Int64}, indices_)
                    indices_ = indices_ - convert(tf.Tensor{eltype(indices_)}, 1)
                    depth_ = convert(TensorFlow.Tensor{Int32}, depth_)
                    on_value_ = convert(TensorFlow.Tensor{Any}, on_value_)
                    off_value_ = convert(TensorFlow.Tensor{Any}, off_value_)
                    (on_value_, off_value_) = tf.tf_promote(on_value_, off_value_)
                    (indices_,) = tf.tf_promote(indices_)
                    tf.add_input(desc, indices_)
                    tf.add_input(desc, depth_)
                    tf.add_input(desc, on_value_)
                    tf.add_input(desc, off_value_)
                    if axis !== nothing
                        axis = Base.Int(axis) - 1
                    end
                    if axis !== nothing
                        desc["axis"] = Base.Int(axis)
                    end
                end), name, "OneHot")
        tf.Tensor(tf.Operation(desc))
    end

"""
     reshape(tensor, shape)


"""
tf.@op function reshape(tensor_, shape_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Reshape")
                    tensor_ = convert(TensorFlow.Tensor{Any}, tensor_)
                    shape_ = convert(TensorFlow.Tensor{Int32}, shape_)
                    (tensor_,) = tf.tf_promote(tensor_)
                    (shape_,) = tf.tf_promote(shape_)
                    tf.add_input(desc, tensor_)
                    tf.add_input(desc, shape_)
                end), name, "Reshape")
        tf.Tensor(tf.Operation(desc))
    end

"""
     split(split_dim, value)


"""
tf.@op function split(split_dim_, value_; name=nothing, num_split=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Split")
                    split_dim_ = convert(TensorFlow.Tensor{Int32}, split_dim_)
                    split_dim_ = split_dim_ - convert(tf.Tensor{eltype(split_dim_)}, 1)
                    value_ = convert(TensorFlow.Tensor{Any}, value_)
                    (value_,) = tf.tf_promote(value_)
                    tf.add_input(desc, split_dim_)
                    tf.add_input(desc, value_)
                    if num_split !== nothing
                        desc["num_split"] = Base.Int(num_split)
                    end
                end), name, "Split")
        out = tf.Tensor[]
        op = tf.Operation(desc)
        for out_idx = 1:num_split
            push!(out, tf.Tensor(op, out_idx))
        end
        out
    end

"""
     div(x, y)


"""
tf.@op function div(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Div")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "Div")
        tf.Tensor(tf.Operation(desc))
    end

"""
     minimum(x, y)


"""
tf.@op function minimum(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Minimum")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "Minimum")
        tf.Tensor(tf.Operation(desc))
    end

"""
     maximum(x, y)


"""
tf.@op function maximum(x_, y_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Maximum")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    y_ = convert(TensorFlow.Tensor{Any}, y_)
                    (x_, y_) = tf.tf_promote(x_, y_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, y_)
                end), name, "Maximum")
        tf.Tensor(tf.Operation(desc))
    end

"""
     select(condition, t, e)


"""
tf.@op function select(condition_, t_, e_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Select")
                    condition_ = convert(TensorFlow.Tensor{Bool}, condition_)
                    t_ = convert(TensorFlow.Tensor{Any}, t_)
                    e_ = convert(TensorFlow.Tensor{Any}, e_)
                    (t_, e_) = tf.tf_promote(t_, e_)
                    tf.add_input(desc, condition_)
                    tf.add_input(desc, t_)
                    tf.add_input(desc, e_)
                end), name, "Select")
        tf.Tensor(tf.Operation(desc))
    end

"""
     switch(data, pred)


"""
tf.@op function switch(data_, pred_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Switch")
                    data_ = convert(TensorFlow.Tensor{Any}, data_)
                    pred_ = convert(TensorFlow.Tensor{Bool}, pred_)
                    (data_,) = tf.tf_promote(data_)
                    tf.add_input(desc, data_)
                    tf.add_input(desc, pred_)
                end), name, "Switch")
        out = tf.Tensor[]
        op = tf.Operation(desc)
        for out_idx = 1:2
            push!(out, tf.Tensor(op, out_idx))
        end
        out
    end

"""
     identity(input)


"""
tf.@op function identity(input_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Identity")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                end), name, "Identity")
        tf.Tensor(tf.Operation(desc))
    end

"""
     merge(inputs)


"""
tf.@op function merge(inputs_; name=nothing, N=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Merge")
                    inputs_ = [convert(TensorFlow.Tensor{Any}, x) for x = inputs_]
                    (inputs_,) = tf.tf_promote(inputs_)
                    tf.add_input(desc, inputs_)
                    if N !== nothing
                        desc["N"] = Base.Int(N)
                    end
                end), name, "Merge")
        out = tf.Tensor[]
        op = tf.Operation(desc)
        for out_idx = 1:2
            push!(out, tf.Tensor(op, out_idx))
        end
        out
    end

"""
     enter(data; is_constant=false, parallel_iterations=10)


"""
tf.@op function enter(data_; name=nothing, frame_name=nothing, is_constant=nothing, parallel_iterations=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Enter")
                    data_ = convert(TensorFlow.Tensor{Any}, data_)
                    (data_,) = tf.tf_promote(data_)
                    tf.add_input(desc, data_)
                    if frame_name !== nothing
                        desc["frame_name"] = Base.String(frame_name)
                    end
                    if is_constant !== nothing
                        desc["is_constant"] = Base.Bool(is_constant)
                    end
                    if parallel_iterations !== nothing
                        desc["parallel_iterations"] = Base.Int(parallel_iterations)
                    end
                end), name, "Enter")
        tf.Tensor(tf.Operation(desc))
    end

"""
     loop_cond(input)


"""
tf.@op function loop_cond(input_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("LoopCond")
                    input_ = convert(TensorFlow.Tensor{Bool}, input_)
                    tf.add_input(desc, input_)
                end), name, "LoopCond")
        tf.Tensor(tf.Operation(desc))
    end

"""
     exit(data)


"""
tf.@op function exit(data_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Exit")
                    data_ = convert(TensorFlow.Tensor{Any}, data_)
                    (data_,) = tf.tf_promote(data_)
                    tf.add_input(desc, data_)
                end), name, "Exit")
        tf.Tensor(tf.Operation(desc))
    end

"""
     next_iteration(data)


"""
tf.@op function next_iteration(data_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("NextIteration")
                    data_ = convert(TensorFlow.Tensor{Any}, data_)
                    (data_,) = tf.tf_promote(data_)
                    tf.add_input(desc, data_)
                end), name, "NextIteration")
        tf.Tensor(tf.Operation(desc))
    end

"""
     complex(real, imag)


"""
tf.@op function complex(real_, imag_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Complex")
                    real_ = convert(TensorFlow.Tensor{Float32}, real_)
                    imag_ = convert(TensorFlow.Tensor{Float32}, imag_)
                    (real_, imag_) = tf.tf_promote(real_, imag_)
                    tf.add_input(desc, real_)
                    tf.add_input(desc, imag_)
                end), name, "Complex")
        tf.Tensor(tf.Operation(desc))
    end

"""
     print(input, data; message=, first_n=-1, summarize=3)


"""
tf.@op function print(input_, data_; name=nothing, U=nothing, message=nothing, first_n=nothing, summarize=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Print")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    data_ = [convert(TensorFlow.Tensor{Any}, x) for x = data_]
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, data_)
                    if U !== nothing
                        desc["U"] = map(Base.identity, U)
                    end
                    if message !== nothing
                        desc["message"] = Base.String(message)
                    end
                    if first_n !== nothing
                        desc["first_n"] = Base.Int(first_n)
                    end
                    if summarize !== nothing
                        desc["summarize"] = Base.Int(summarize)
                    end
                end), name, "Print")
        tf.Tensor(tf.Operation(desc))
    end

"""
     reverse_v2(tensor, axis)


"""
tf.@op function reverse_v2(tensor_, axis_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("ReverseV2")
                    tensor_ = convert(TensorFlow.Tensor{Any}, tensor_)
                    axis_ = convert(TensorFlow.Tensor{Int32}, axis_)
                    axis_ = axis_ - convert(tf.Tensor{eltype(axis_)}, 1)
                    (tensor_,) = tf.tf_promote(tensor_)
                    (axis_,) = tf.tf_promote(axis_)
                    tf.add_input(desc, tensor_)
                    tf.add_input(desc, axis_)
                end), name, "ReverseV2")
        tf.Tensor(tf.Operation(desc))
    end

"""
     size(input; out_type=Int32)


"""
tf.@op function size(input_; name=nothing, out_type=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Size")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                    if out_type !== nothing
                        desc["out_type"] = Base.identity(out_type)
                    end
                end), name, "Size")
        tf.Tensor(tf.Operation(desc))
    end

"""
     softmax_cross_entropy_with_logits(features, labels)


"""
tf.@op function softmax_cross_entropy_with_logits(features_, labels_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("SoftmaxCrossEntropyWithLogits")
                    features_ = convert(TensorFlow.Tensor{Any}, features_)
                    labels_ = convert(TensorFlow.Tensor{Any}, labels_)
                    (features_, labels_) = tf.tf_promote(features_, labels_)
                    tf.add_input(desc, features_)
                    tf.add_input(desc, labels_)
                end), name, "SoftmaxCrossEntropyWithLogits")
        out = tf.Tensor[]
        op = tf.Operation(desc)
        for out_idx = 1:2
            push!(out, tf.Tensor(op, out_idx))
        end
        out
    end

"""
     sparse_softmax_cross_entropy_with_logits(features, labels)


"""
tf.@op function sparse_softmax_cross_entropy_with_logits(features_, labels_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("SparseSoftmaxCrossEntropyWithLogits")
                    features_ = convert(TensorFlow.Tensor{Any}, features_)
                    labels_ = convert(TensorFlow.Tensor{Int64}, labels_)
                    (features_,) = tf.tf_promote(features_)
                    (labels_,) = tf.tf_promote(labels_)
                    tf.add_input(desc, features_)
                    tf.add_input(desc, labels_)
                end), name, "SparseSoftmaxCrossEntropyWithLogits")
        out = tf.Tensor[]
        op = tf.Operation(desc)
        for out_idx = 1:2
            push!(out, tf.Tensor(op, out_idx))
        end
        out
    end

"""
     top_kv2(input, k; sorted=true)


"""
tf.@op function top_kv2(input_, k_; name=nothing, sorted=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("TopKV2")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    k_ = convert(TensorFlow.Tensor{Int32}, k_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, k_)
                    if sorted !== nothing
                        desc["sorted"] = Base.Bool(sorted)
                    end
                end), name, "TopKV2")
        out = tf.Tensor[]
        op = tf.Operation(desc)
        for out_idx = 1:2
            push!(out, tf.Tensor(op, out_idx))
        end
        out
    end

"""
     in_top_k(predictions, targets)


"""
tf.@op function in_top_k(predictions_, targets_; name=nothing, k=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("InTopK")
                    predictions_ = convert(TensorFlow.Tensor{Float32}, predictions_)
                    targets_ = convert(TensorFlow.Tensor{Int32}, targets_)
                    (targets_,) = tf.tf_promote(targets_)
                    tf.add_input(desc, predictions_)
                    tf.add_input(desc, targets_)
                    if k !== nothing
                        desc["k"] = Base.Int(k)
                    end
                end), name, "InTopK")
        tf.Tensor(tf.Operation(desc))
    end

"""
     fifo_queue_v2(; shapes=Int64[], capacity=-1, container=, shared_name=)


"""
tf.@op function fifo_queue_v2(; name=nothing, component_types=nothing, shapes=nothing, capacity=nothing, container=nothing, shared_name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("FIFOQueueV2")
                    if component_types !== nothing
                        desc["component_types"] = map(Base.identity, component_types)
                    end
                    if shapes !== nothing
                        desc["shapes"] = map(Base.identity, shapes)
                    end
                    if capacity !== nothing
                        desc["capacity"] = Base.Int(capacity)
                    end
                    if container !== nothing
                        desc["container"] = Base.String(container)
                    end
                    if shared_name !== nothing
                        desc["shared_name"] = Base.String(shared_name)
                    end
                end), name, "FIFOQueueV2")
        tf.Tensor(tf.Operation(desc))
    end

"""
     random_shuffle_queue_v2(; shapes=Int64[], capacity=-1, min_after_dequeue=0, seed=0, seed2=0, container=, shared_name=)


"""
tf.@op function random_shuffle_queue_v2(; name=nothing, component_types=nothing, shapes=nothing, capacity=nothing, min_after_dequeue=nothing, seed=nothing, seed2=nothing, container=nothing, shared_name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("RandomShuffleQueueV2")
                    if component_types !== nothing
                        desc["component_types"] = map(Base.identity, component_types)
                    end
                    if shapes !== nothing
                        desc["shapes"] = map(Base.identity, shapes)
                    end
                    if capacity !== nothing
                        desc["capacity"] = Base.Int(capacity)
                    end
                    if min_after_dequeue !== nothing
                        desc["min_after_dequeue"] = Base.Int(min_after_dequeue)
                    end
                    if seed !== nothing
                        desc["seed"] = Base.Int(seed)
                    end
                    if seed2 !== nothing
                        desc["seed2"] = Base.Int(seed2)
                    end
                    if container !== nothing
                        desc["container"] = Base.String(container)
                    end
                    if shared_name !== nothing
                        desc["shared_name"] = Base.String(shared_name)
                    end
                end), name, "RandomShuffleQueueV2")
        tf.Tensor(tf.Operation(desc))
    end

"""
     queue_enqueue_v2(handle, components; timeout_ms=-1)


"""
tf.@op function queue_enqueue_v2(handle_, components_; name=nothing, Tcomponents=nothing, timeout_ms=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("QueueEnqueueV2")
                    handle_ = convert(TensorFlow.Tensor{Any}, handle_)
                    components_ = [convert(TensorFlow.Tensor{Any}, x) for x = components_]
                    tf.add_input(desc, handle_)
                    tf.add_input(desc, components_)
                    if Tcomponents !== nothing
                        desc["Tcomponents"] = map(Base.identity, Tcomponents)
                    end
                    if timeout_ms !== nothing
                        desc["timeout_ms"] = Base.Int(timeout_ms)
                    end
                end), name, "QueueEnqueueV2")
        tf.Tensor(tf.Operation(desc))
    end

"""
     queue_enqueue_many_v2(handle, components; timeout_ms=-1)


"""
tf.@op function queue_enqueue_many_v2(handle_, components_; name=nothing, Tcomponents=nothing, timeout_ms=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("QueueEnqueueManyV2")
                    handle_ = convert(TensorFlow.Tensor{Any}, handle_)
                    components_ = [convert(TensorFlow.Tensor{Any}, x) for x = components_]
                    tf.add_input(desc, handle_)
                    tf.add_input(desc, components_)
                    if Tcomponents !== nothing
                        desc["Tcomponents"] = map(Base.identity, Tcomponents)
                    end
                    if timeout_ms !== nothing
                        desc["timeout_ms"] = Base.Int(timeout_ms)
                    end
                end), name, "QueueEnqueueManyV2")
        tf.Tensor(tf.Operation(desc))
    end

"""
     queue_size_v2(handle)


"""
tf.@op function queue_size_v2(handle_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("QueueSizeV2")
                    handle_ = convert(TensorFlow.Tensor{Any}, handle_)
                    tf.add_input(desc, handle_)
                end), name, "QueueSizeV2")
        tf.Tensor(tf.Operation(desc))
    end

"""
     queue_close_v2(handle; cancel_pending_enqueues=false)


"""
tf.@op function queue_close_v2(handle_; name=nothing, cancel_pending_enqueues=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("QueueCloseV2")
                    handle_ = convert(TensorFlow.Tensor{Any}, handle_)
                    tf.add_input(desc, handle_)
                    if cancel_pending_enqueues !== nothing
                        desc["cancel_pending_enqueues"] = Base.Bool(cancel_pending_enqueues)
                    end
                end), name, "QueueCloseV2")
        tf.Tensor(tf.Operation(desc))
    end

"""
     lin_space(start, stop, num)


"""
tf.@op function lin_space(start_, stop_, num_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("LinSpace")
                    start_ = convert(TensorFlow.Tensor{Any}, start_)
                    stop_ = convert(TensorFlow.Tensor{Any}, stop_)
                    num_ = convert(TensorFlow.Tensor{Int32}, num_)
                    num_ = num_ - convert(tf.Tensor{eltype(num_)}, 1)
                    (start_, stop_) = tf.tf_promote(start_, stop_)
                    (num_,) = tf.tf_promote(num_)
                    tf.add_input(desc, start_)
                    tf.add_input(desc, stop_)
                    tf.add_input(desc, num_)
                end), name, "LinSpace")
        tf.Tensor(tf.Operation(desc))
    end

"""
     range(start, limit, delta)


"""
tf.@op function range(start_, limit_, delta_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Range")
                    start_ = convert(TensorFlow.Tensor{Int32}, start_)
                    limit_ = convert(TensorFlow.Tensor{Int32}, limit_)
                    delta_ = convert(TensorFlow.Tensor{Int32}, delta_)
                    (start_, limit_, delta_) = tf.tf_promote(start_, limit_, delta_)
                    tf.add_input(desc, start_)
                    tf.add_input(desc, limit_)
                    tf.add_input(desc, delta_)
                end), name, "Range")
        tf.Tensor(tf.Operation(desc))
    end

"""
     fill(dims, value; index_type=Int32)


"""
tf.@op function fill(dims_, value_; name=nothing, index_type=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Fill")
                    dims_ = convert(TensorFlow.Tensor{Int32}, dims_)
                    value_ = convert(TensorFlow.Tensor{Any}, value_)
                    (value_,) = tf.tf_promote(value_)
                    (dims_,) = tf.tf_promote(dims_)
                    tf.add_input(desc, dims_)
                    tf.add_input(desc, value_)
                    if index_type !== nothing
                        desc["index_type"] = Base.identity(index_type)
                    end
                end), name, "Fill")
        tf.Tensor(tf.Operation(desc))
    end

"""
     squeeze(input; squeeze_dims=Int64[])


"""
tf.@op function squeeze(input_; name=nothing, squeeze_dims=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Squeeze")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                    if squeeze_dims !== nothing
                        desc["squeeze_dims"] = map(Base.identity, squeeze_dims)
                    end
                end), name, "Squeeze")
        tf.Tensor(tf.Operation(desc))
    end

"""
     unpack(value; axis=0)


"""
tf.@op function unpack(value_; name=nothing, num=nothing, axis=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Unpack")
                    value_ = convert(TensorFlow.Tensor{Any}, value_)
                    (value_,) = tf.tf_promote(value_)
                    tf.add_input(desc, value_)
                    if num !== nothing
                        desc["num"] = Base.Int(num)
                    end
                    if axis !== nothing
                        axis = Base.Int(axis) - 1
                    end
                    if axis !== nothing
                        desc["axis"] = Base.Int(axis)
                    end
                end), name, "Unpack")
        out = tf.Tensor[]
        op = tf.Operation(desc)
        for out_idx = 1:num
            push!(out, tf.Tensor(op, out_idx))
        end
        out
    end

"""
     transpose(x, perm)


"""
tf.@op function transpose(x_, perm_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Transpose")
                    x_ = convert(TensorFlow.Tensor{Any}, x_)
                    perm_ = convert(TensorFlow.Tensor{Int32}, perm_)
                    (perm_,) = tf.tf_promote(perm_)
                    (x_,) = tf.tf_promote(x_)
                    tf.add_input(desc, x_)
                    tf.add_input(desc, perm_)
                end), name, "Transpose")
        tf.Tensor(tf.Operation(desc))
    end

"""
     slice(input, begin, size)


"""
tf.@op function slice(input_, begin_, size_; name=nothing, Index=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Slice")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    begin_ = convert(TensorFlow.Tensor{Any}, begin_)
                    begin_ = begin_ - convert(tf.Tensor{eltype(begin_)}, 1)
                    size_ = convert(TensorFlow.Tensor{Any}, size_)
                    (input_,) = tf.tf_promote(input_)
                    (begin_, size_) = tf.tf_promote(begin_, size_)
                    tf.add_input(desc, input_)
                    tf.add_input(desc, begin_)
                    tf.add_input(desc, size_)
                    if Index !== nothing
                        desc["Index"] = Base.identity(Index)
                    end
                end), name, "Slice")
        tf.Tensor(tf.Operation(desc))
    end

"""
     rank(input)


"""
tf.@op function rank(input_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Rank")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                end), name, "Rank")
        tf.Tensor(tf.Operation(desc))
    end

"""
     conv2d_backprop_input(input_sizes, filter, out_backprop; use_cudnn_on_gpu=true, data_format=NHWC, dilations=[1, 1, 1, 1])


"""
tf.@op function conv2d_backprop_input(input_sizes_, filter_, out_backprop_; name=nothing, strides=nothing, use_cudnn_on_gpu=nothing, padding=nothing, data_format=nothing, dilations=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Conv2DBackpropInput")
                    input_sizes_ = convert(TensorFlow.Tensor{Int32}, input_sizes_)
                    filter_ = convert(TensorFlow.Tensor{Any}, filter_)
                    out_backprop_ = convert(TensorFlow.Tensor{Any}, out_backprop_)
                    (filter_, out_backprop_) = tf.tf_promote(filter_, out_backprop_)
                    tf.add_input(desc, input_sizes_)
                    tf.add_input(desc, filter_)
                    tf.add_input(desc, out_backprop_)
                    if strides !== nothing
                        desc["strides"] = map(Base.identity, strides)
                    end
                    if use_cudnn_on_gpu !== nothing
                        desc["use_cudnn_on_gpu"] = Base.Bool(use_cudnn_on_gpu)
                    end
                    if padding !== nothing
                        desc["padding"] = Base.String(padding)
                    end
                    if data_format !== nothing
                        desc["data_format"] = Base.String(data_format)
                    end
                    if dilations !== nothing
                        desc["dilations"] = map(Base.identity, dilations)
                    end
                end), name, "Conv2DBackpropInput")
        tf.Tensor(tf.Operation(desc))
    end

"""
     svd(input; compute_uv=true, full_matrices=false)


"""
tf.@op function svd(input_; name=nothing, compute_uv=nothing, full_matrices=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Svd")
                    input_ = convert(TensorFlow.Tensor{Any}, input_)
                    (input_,) = tf.tf_promote(input_)
                    tf.add_input(desc, input_)
                    if compute_uv !== nothing
                        desc["compute_uv"] = Base.Bool(compute_uv)
                    end
                    if full_matrices !== nothing
                        desc["full_matrices"] = Base.Bool(full_matrices)
                    end
                end), name, "Svd")
        out = tf.Tensor[]
        op = tf.Operation(desc)
        for out_idx = 1:3
            push!(out, tf.Tensor(op, out_idx))
        end
        out
    end

"""
     cross(a, b)


"""
tf.@op function cross(a_, b_; name=nothing)
        local desc
        tf.with_op_name((()->begin 
                    desc = tf.NodeDescription("Cross")
                    a_ = convert(TensorFlow.Tensor{Any}, a_)
                    b_ = convert(TensorFlow.Tensor{Any}, b_)
                    (a_, b_) = tf.tf_promote(a_, b_)
                    tf.add_input(desc, a_)
                    tf.add_input(desc, b_)
                end), name, "Cross")
        tf.Tensor(tf.Operation(desc))
    end

end
